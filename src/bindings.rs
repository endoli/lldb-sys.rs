/* automatically generated by rust-bindgen 0.70.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod __detail {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct function {
            pub _address: u8,
        }
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub mod lldb {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub const StateType_eStateInvalid: root::lldb::StateType = 0;
        pub const StateType_eStateUnloaded: root::lldb::StateType = 1;
        pub const StateType_eStateConnected: root::lldb::StateType = 2;
        pub const StateType_eStateAttaching: root::lldb::StateType = 3;
        pub const StateType_eStateLaunching: root::lldb::StateType = 4;
        pub const StateType_eStateStopped: root::lldb::StateType = 5;
        pub const StateType_eStateRunning: root::lldb::StateType = 6;
        pub const StateType_eStateStepping: root::lldb::StateType = 7;
        pub const StateType_eStateCrashed: root::lldb::StateType = 8;
        pub const StateType_eStateDetached: root::lldb::StateType = 9;
        pub const StateType_eStateExited: root::lldb::StateType = 10;
        pub const StateType_eStateSuspended: root::lldb::StateType = 11;
        pub const StateType_kLastStateType: root::lldb::StateType = 11;
        pub type StateType = ::std::os::raw::c_uint;
        pub const LaunchFlags_eLaunchFlagNone: root::lldb::LaunchFlags = 0;
        pub const LaunchFlags_eLaunchFlagExec: root::lldb::LaunchFlags = 1;
        pub const LaunchFlags_eLaunchFlagDebug: root::lldb::LaunchFlags = 2;
        pub const LaunchFlags_eLaunchFlagStopAtEntry: root::lldb::LaunchFlags = 4;
        pub const LaunchFlags_eLaunchFlagDisableASLR: root::lldb::LaunchFlags = 8;
        pub const LaunchFlags_eLaunchFlagDisableSTDIO: root::lldb::LaunchFlags = 16;
        pub const LaunchFlags_eLaunchFlagLaunchInTTY: root::lldb::LaunchFlags = 32;
        pub const LaunchFlags_eLaunchFlagLaunchInShell: root::lldb::LaunchFlags = 64;
        pub const LaunchFlags_eLaunchFlagLaunchInSeparateProcessGroup: root::lldb::LaunchFlags =
            128;
        pub const LaunchFlags_eLaunchFlagDontSetExitStatus: root::lldb::LaunchFlags = 256;
        pub const LaunchFlags_eLaunchFlagDetachOnError: root::lldb::LaunchFlags = 512;
        pub const LaunchFlags_eLaunchFlagShellExpandArguments: root::lldb::LaunchFlags = 1024;
        pub const LaunchFlags_eLaunchFlagCloseTTYOnExit: root::lldb::LaunchFlags = 2048;
        pub const LaunchFlags_eLaunchFlagInheritTCCFromParent: root::lldb::LaunchFlags = 4096;
        pub type LaunchFlags = ::std::os::raw::c_uint;
        pub const RunMode_eOnlyThisThread: root::lldb::RunMode = 0;
        pub const RunMode_eAllThreads: root::lldb::RunMode = 1;
        pub const RunMode_eOnlyDuringStepping: root::lldb::RunMode = 2;
        pub type RunMode = ::std::os::raw::c_uint;
        pub const ByteOrder_eByteOrderInvalid: root::lldb::ByteOrder = 0;
        pub const ByteOrder_eByteOrderBig: root::lldb::ByteOrder = 1;
        pub const ByteOrder_eByteOrderPDP: root::lldb::ByteOrder = 2;
        pub const ByteOrder_eByteOrderLittle: root::lldb::ByteOrder = 4;
        pub type ByteOrder = ::std::os::raw::c_uint;
        pub const Encoding_eEncodingInvalid: root::lldb::Encoding = 0;
        pub const Encoding_eEncodingUint: root::lldb::Encoding = 1;
        pub const Encoding_eEncodingSint: root::lldb::Encoding = 2;
        pub const Encoding_eEncodingIEEE754: root::lldb::Encoding = 3;
        pub const Encoding_eEncodingVector: root::lldb::Encoding = 4;
        pub type Encoding = ::std::os::raw::c_uint;
        pub const Format_eFormatDefault: root::lldb::Format = 0;
        pub const Format_eFormatInvalid: root::lldb::Format = 0;
        pub const Format_eFormatBoolean: root::lldb::Format = 1;
        pub const Format_eFormatBinary: root::lldb::Format = 2;
        pub const Format_eFormatBytes: root::lldb::Format = 3;
        pub const Format_eFormatBytesWithASCII: root::lldb::Format = 4;
        pub const Format_eFormatChar: root::lldb::Format = 5;
        pub const Format_eFormatCharPrintable: root::lldb::Format = 6;
        pub const Format_eFormatComplex: root::lldb::Format = 7;
        pub const Format_eFormatComplexFloat: root::lldb::Format = 7;
        pub const Format_eFormatCString: root::lldb::Format = 8;
        pub const Format_eFormatDecimal: root::lldb::Format = 9;
        pub const Format_eFormatEnum: root::lldb::Format = 10;
        pub const Format_eFormatHex: root::lldb::Format = 11;
        pub const Format_eFormatHexUppercase: root::lldb::Format = 12;
        pub const Format_eFormatFloat: root::lldb::Format = 13;
        pub const Format_eFormatOctal: root::lldb::Format = 14;
        pub const Format_eFormatOSType: root::lldb::Format = 15;
        pub const Format_eFormatUnicode16: root::lldb::Format = 16;
        pub const Format_eFormatUnicode32: root::lldb::Format = 17;
        pub const Format_eFormatUnsigned: root::lldb::Format = 18;
        pub const Format_eFormatPointer: root::lldb::Format = 19;
        pub const Format_eFormatVectorOfChar: root::lldb::Format = 20;
        pub const Format_eFormatVectorOfSInt8: root::lldb::Format = 21;
        pub const Format_eFormatVectorOfUInt8: root::lldb::Format = 22;
        pub const Format_eFormatVectorOfSInt16: root::lldb::Format = 23;
        pub const Format_eFormatVectorOfUInt16: root::lldb::Format = 24;
        pub const Format_eFormatVectorOfSInt32: root::lldb::Format = 25;
        pub const Format_eFormatVectorOfUInt32: root::lldb::Format = 26;
        pub const Format_eFormatVectorOfSInt64: root::lldb::Format = 27;
        pub const Format_eFormatVectorOfUInt64: root::lldb::Format = 28;
        pub const Format_eFormatVectorOfFloat16: root::lldb::Format = 29;
        pub const Format_eFormatVectorOfFloat32: root::lldb::Format = 30;
        pub const Format_eFormatVectorOfFloat64: root::lldb::Format = 31;
        pub const Format_eFormatVectorOfUInt128: root::lldb::Format = 32;
        pub const Format_eFormatComplexInteger: root::lldb::Format = 33;
        pub const Format_eFormatCharArray: root::lldb::Format = 34;
        pub const Format_eFormatAddressInfo: root::lldb::Format = 35;
        pub const Format_eFormatHexFloat: root::lldb::Format = 36;
        pub const Format_eFormatInstruction: root::lldb::Format = 37;
        pub const Format_eFormatVoid: root::lldb::Format = 38;
        pub const Format_eFormatUnicode8: root::lldb::Format = 39;
        pub const Format_kNumFormats: root::lldb::Format = 40;
        pub type Format = ::std::os::raw::c_uint;
        pub const DescriptionLevel_eDescriptionLevelBrief: root::lldb::DescriptionLevel = 0;
        pub const DescriptionLevel_eDescriptionLevelFull: root::lldb::DescriptionLevel = 1;
        pub const DescriptionLevel_eDescriptionLevelVerbose: root::lldb::DescriptionLevel = 2;
        pub const DescriptionLevel_eDescriptionLevelInitial: root::lldb::DescriptionLevel = 3;
        pub const DescriptionLevel_kNumDescriptionLevels: root::lldb::DescriptionLevel = 4;
        pub type DescriptionLevel = ::std::os::raw::c_uint;
        pub const ScriptLanguage_eScriptLanguageNone: root::lldb::ScriptLanguage = 0;
        pub const ScriptLanguage_eScriptLanguagePython: root::lldb::ScriptLanguage = 1;
        pub const ScriptLanguage_eScriptLanguageLua: root::lldb::ScriptLanguage = 2;
        pub const ScriptLanguage_eScriptLanguageUnknown: root::lldb::ScriptLanguage = 3;
        pub const ScriptLanguage_eScriptLanguageDefault: root::lldb::ScriptLanguage = 1;
        pub type ScriptLanguage = ::std::os::raw::c_uint;
        pub const RegisterKind_eRegisterKindEHFrame: root::lldb::RegisterKind = 0;
        pub const RegisterKind_eRegisterKindDWARF: root::lldb::RegisterKind = 1;
        pub const RegisterKind_eRegisterKindGeneric: root::lldb::RegisterKind = 2;
        pub const RegisterKind_eRegisterKindProcessPlugin: root::lldb::RegisterKind = 3;
        pub const RegisterKind_eRegisterKindLLDB: root::lldb::RegisterKind = 4;
        pub const RegisterKind_kNumRegisterKinds: root::lldb::RegisterKind = 5;
        pub type RegisterKind = ::std::os::raw::c_uint;
        pub const StopReason_eStopReasonInvalid: root::lldb::StopReason = 0;
        pub const StopReason_eStopReasonNone: root::lldb::StopReason = 1;
        pub const StopReason_eStopReasonTrace: root::lldb::StopReason = 2;
        pub const StopReason_eStopReasonBreakpoint: root::lldb::StopReason = 3;
        pub const StopReason_eStopReasonWatchpoint: root::lldb::StopReason = 4;
        pub const StopReason_eStopReasonSignal: root::lldb::StopReason = 5;
        pub const StopReason_eStopReasonException: root::lldb::StopReason = 6;
        pub const StopReason_eStopReasonExec: root::lldb::StopReason = 7;
        pub const StopReason_eStopReasonPlanComplete: root::lldb::StopReason = 8;
        pub const StopReason_eStopReasonThreadExiting: root::lldb::StopReason = 9;
        pub const StopReason_eStopReasonInstrumentation: root::lldb::StopReason = 10;
        pub const StopReason_eStopReasonProcessorTrace: root::lldb::StopReason = 11;
        pub const StopReason_eStopReasonFork: root::lldb::StopReason = 12;
        pub const StopReason_eStopReasonVFork: root::lldb::StopReason = 13;
        pub const StopReason_eStopReasonVForkDone: root::lldb::StopReason = 14;
        pub type StopReason = ::std::os::raw::c_uint;
        pub const ReturnStatus_eReturnStatusInvalid: root::lldb::ReturnStatus = 0;
        pub const ReturnStatus_eReturnStatusSuccessFinishNoResult: root::lldb::ReturnStatus = 1;
        pub const ReturnStatus_eReturnStatusSuccessFinishResult: root::lldb::ReturnStatus = 2;
        pub const ReturnStatus_eReturnStatusSuccessContinuingNoResult: root::lldb::ReturnStatus = 3;
        pub const ReturnStatus_eReturnStatusSuccessContinuingResult: root::lldb::ReturnStatus = 4;
        pub const ReturnStatus_eReturnStatusStarted: root::lldb::ReturnStatus = 5;
        pub const ReturnStatus_eReturnStatusFailed: root::lldb::ReturnStatus = 6;
        pub const ReturnStatus_eReturnStatusQuit: root::lldb::ReturnStatus = 7;
        pub type ReturnStatus = ::std::os::raw::c_uint;
        pub const ExpressionResults_eExpressionCompleted: root::lldb::ExpressionResults = 0;
        pub const ExpressionResults_eExpressionSetupError: root::lldb::ExpressionResults = 1;
        pub const ExpressionResults_eExpressionParseError: root::lldb::ExpressionResults = 2;
        pub const ExpressionResults_eExpressionDiscarded: root::lldb::ExpressionResults = 3;
        pub const ExpressionResults_eExpressionInterrupted: root::lldb::ExpressionResults = 4;
        pub const ExpressionResults_eExpressionHitBreakpoint: root::lldb::ExpressionResults = 5;
        pub const ExpressionResults_eExpressionTimedOut: root::lldb::ExpressionResults = 6;
        pub const ExpressionResults_eExpressionResultUnavailable: root::lldb::ExpressionResults = 7;
        pub const ExpressionResults_eExpressionStoppedForDebug: root::lldb::ExpressionResults = 8;
        pub const ExpressionResults_eExpressionThreadVanished: root::lldb::ExpressionResults = 9;
        pub type ExpressionResults = ::std::os::raw::c_uint;
        pub const SearchDepth_eSearchDepthInvalid: root::lldb::SearchDepth = 0;
        pub const SearchDepth_eSearchDepthTarget: root::lldb::SearchDepth = 1;
        pub const SearchDepth_eSearchDepthModule: root::lldb::SearchDepth = 2;
        pub const SearchDepth_eSearchDepthCompUnit: root::lldb::SearchDepth = 3;
        pub const SearchDepth_eSearchDepthFunction: root::lldb::SearchDepth = 4;
        pub const SearchDepth_eSearchDepthBlock: root::lldb::SearchDepth = 5;
        pub const SearchDepth_eSearchDepthAddress: root::lldb::SearchDepth = 6;
        pub const SearchDepth_kLastSearchDepthKind: root::lldb::SearchDepth = 6;
        pub type SearchDepth = ::std::os::raw::c_uint;
        pub const ConnectionStatus_eConnectionStatusSuccess: root::lldb::ConnectionStatus = 0;
        pub const ConnectionStatus_eConnectionStatusEndOfFile: root::lldb::ConnectionStatus = 1;
        pub const ConnectionStatus_eConnectionStatusError: root::lldb::ConnectionStatus = 2;
        pub const ConnectionStatus_eConnectionStatusTimedOut: root::lldb::ConnectionStatus = 3;
        pub const ConnectionStatus_eConnectionStatusNoConnection: root::lldb::ConnectionStatus = 4;
        pub const ConnectionStatus_eConnectionStatusLostConnection: root::lldb::ConnectionStatus =
            5;
        pub const ConnectionStatus_eConnectionStatusInterrupted: root::lldb::ConnectionStatus = 6;
        pub type ConnectionStatus = ::std::os::raw::c_uint;
        pub const ErrorType_eErrorTypeInvalid: root::lldb::ErrorType = 0;
        pub const ErrorType_eErrorTypeGeneric: root::lldb::ErrorType = 1;
        pub const ErrorType_eErrorTypeMachKernel: root::lldb::ErrorType = 2;
        pub const ErrorType_eErrorTypePOSIX: root::lldb::ErrorType = 3;
        pub const ErrorType_eErrorTypeExpression: root::lldb::ErrorType = 4;
        pub const ErrorType_eErrorTypeWin32: root::lldb::ErrorType = 5;
        pub type ErrorType = ::std::os::raw::c_uint;
        pub const ValueType_eValueTypeInvalid: root::lldb::ValueType = 0;
        pub const ValueType_eValueTypeVariableGlobal: root::lldb::ValueType = 1;
        pub const ValueType_eValueTypeVariableStatic: root::lldb::ValueType = 2;
        pub const ValueType_eValueTypeVariableArgument: root::lldb::ValueType = 3;
        pub const ValueType_eValueTypeVariableLocal: root::lldb::ValueType = 4;
        pub const ValueType_eValueTypeRegister: root::lldb::ValueType = 5;
        pub const ValueType_eValueTypeRegisterSet: root::lldb::ValueType = 6;
        pub const ValueType_eValueTypeConstResult: root::lldb::ValueType = 7;
        pub const ValueType_eValueTypeVariableThreadLocal: root::lldb::ValueType = 8;
        pub const ValueType_eValueTypeVTable: root::lldb::ValueType = 9;
        pub const ValueType_eValueTypeVTableEntry: root::lldb::ValueType = 10;
        pub type ValueType = ::std::os::raw::c_uint;
        pub const InputReaderGranularity_eInputReaderGranularityInvalid:
            root::lldb::InputReaderGranularity = 0;
        pub const InputReaderGranularity_eInputReaderGranularityByte:
            root::lldb::InputReaderGranularity = 1;
        pub const InputReaderGranularity_eInputReaderGranularityWord:
            root::lldb::InputReaderGranularity = 2;
        pub const InputReaderGranularity_eInputReaderGranularityLine:
            root::lldb::InputReaderGranularity = 3;
        pub const InputReaderGranularity_eInputReaderGranularityAll:
            root::lldb::InputReaderGranularity = 4;
        pub type InputReaderGranularity = ::std::os::raw::c_uint;
        pub const SymbolContextItem_eSymbolContextTarget: root::lldb::SymbolContextItem = 1;
        pub const SymbolContextItem_eSymbolContextModule: root::lldb::SymbolContextItem = 2;
        pub const SymbolContextItem_eSymbolContextCompUnit: root::lldb::SymbolContextItem = 4;
        pub const SymbolContextItem_eSymbolContextFunction: root::lldb::SymbolContextItem = 8;
        pub const SymbolContextItem_eSymbolContextBlock: root::lldb::SymbolContextItem = 16;
        pub const SymbolContextItem_eSymbolContextLineEntry: root::lldb::SymbolContextItem = 32;
        pub const SymbolContextItem_eSymbolContextSymbol: root::lldb::SymbolContextItem = 64;
        pub const SymbolContextItem_eSymbolContextEverything: root::lldb::SymbolContextItem = 127;
        pub const SymbolContextItem_eSymbolContextVariable: root::lldb::SymbolContextItem = 128;
        pub const SymbolContextItem_eSymbolContextLastItem: root::lldb::SymbolContextItem = 128;
        pub type SymbolContextItem = ::std::os::raw::c_uint;
        pub const Permissions_ePermissionsWritable: root::lldb::Permissions = 1;
        pub const Permissions_ePermissionsReadable: root::lldb::Permissions = 2;
        pub const Permissions_ePermissionsExecutable: root::lldb::Permissions = 4;
        pub type Permissions = ::std::os::raw::c_uint;
        pub const InputReaderAction_eInputReaderActivate: root::lldb::InputReaderAction = 0;
        pub const InputReaderAction_eInputReaderAsynchronousOutputWritten:
            root::lldb::InputReaderAction = 1;
        pub const InputReaderAction_eInputReaderReactivate: root::lldb::InputReaderAction = 2;
        pub const InputReaderAction_eInputReaderDeactivate: root::lldb::InputReaderAction = 3;
        pub const InputReaderAction_eInputReaderGotToken: root::lldb::InputReaderAction = 4;
        pub const InputReaderAction_eInputReaderInterrupt: root::lldb::InputReaderAction = 5;
        pub const InputReaderAction_eInputReaderEndOfFile: root::lldb::InputReaderAction = 6;
        pub const InputReaderAction_eInputReaderDone: root::lldb::InputReaderAction = 7;
        pub type InputReaderAction = ::std::os::raw::c_uint;
        pub const BreakpointEventType_eBreakpointEventTypeInvalidType:
            root::lldb::BreakpointEventType = 1;
        pub const BreakpointEventType_eBreakpointEventTypeAdded: root::lldb::BreakpointEventType =
            2;
        pub const BreakpointEventType_eBreakpointEventTypeRemoved: root::lldb::BreakpointEventType =
            4;
        pub const BreakpointEventType_eBreakpointEventTypeLocationsAdded:
            root::lldb::BreakpointEventType = 8;
        pub const BreakpointEventType_eBreakpointEventTypeLocationsRemoved:
            root::lldb::BreakpointEventType = 16;
        pub const BreakpointEventType_eBreakpointEventTypeLocationsResolved:
            root::lldb::BreakpointEventType = 32;
        pub const BreakpointEventType_eBreakpointEventTypeEnabled: root::lldb::BreakpointEventType =
            64;
        pub const BreakpointEventType_eBreakpointEventTypeDisabled:
            root::lldb::BreakpointEventType = 128;
        pub const BreakpointEventType_eBreakpointEventTypeCommandChanged:
            root::lldb::BreakpointEventType = 256;
        pub const BreakpointEventType_eBreakpointEventTypeConditionChanged:
            root::lldb::BreakpointEventType = 512;
        pub const BreakpointEventType_eBreakpointEventTypeIgnoreChanged:
            root::lldb::BreakpointEventType = 1024;
        pub const BreakpointEventType_eBreakpointEventTypeThreadChanged:
            root::lldb::BreakpointEventType = 2048;
        pub const BreakpointEventType_eBreakpointEventTypeAutoContinueChanged:
            root::lldb::BreakpointEventType = 4096;
        pub type BreakpointEventType = ::std::os::raw::c_uint;
        pub const WatchpointEventType_eWatchpointEventTypeInvalidType:
            root::lldb::WatchpointEventType = 1;
        pub const WatchpointEventType_eWatchpointEventTypeAdded: root::lldb::WatchpointEventType =
            2;
        pub const WatchpointEventType_eWatchpointEventTypeRemoved: root::lldb::WatchpointEventType =
            4;
        pub const WatchpointEventType_eWatchpointEventTypeEnabled: root::lldb::WatchpointEventType =
            64;
        pub const WatchpointEventType_eWatchpointEventTypeDisabled:
            root::lldb::WatchpointEventType = 128;
        pub const WatchpointEventType_eWatchpointEventTypeCommandChanged:
            root::lldb::WatchpointEventType = 256;
        pub const WatchpointEventType_eWatchpointEventTypeConditionChanged:
            root::lldb::WatchpointEventType = 512;
        pub const WatchpointEventType_eWatchpointEventTypeIgnoreChanged:
            root::lldb::WatchpointEventType = 1024;
        pub const WatchpointEventType_eWatchpointEventTypeThreadChanged:
            root::lldb::WatchpointEventType = 2048;
        pub const WatchpointEventType_eWatchpointEventTypeTypeChanged:
            root::lldb::WatchpointEventType = 4096;
        pub type WatchpointEventType = ::std::os::raw::c_uint;
        pub const WatchpointWriteType_eWatchpointWriteTypeDisabled:
            root::lldb::WatchpointWriteType = 0;
        pub const WatchpointWriteType_eWatchpointWriteTypeAlways: root::lldb::WatchpointWriteType =
            1;
        pub const WatchpointWriteType_eWatchpointWriteTypeOnModify:
            root::lldb::WatchpointWriteType = 2;
        pub type WatchpointWriteType = ::std::os::raw::c_uint;
        pub const LanguageType_eLanguageTypeUnknown: root::lldb::LanguageType = 0;
        pub const LanguageType_eLanguageTypeC89: root::lldb::LanguageType = 1;
        pub const LanguageType_eLanguageTypeC: root::lldb::LanguageType = 2;
        pub const LanguageType_eLanguageTypeAda83: root::lldb::LanguageType = 3;
        pub const LanguageType_eLanguageTypeC_plus_plus: root::lldb::LanguageType = 4;
        pub const LanguageType_eLanguageTypeCobol74: root::lldb::LanguageType = 5;
        pub const LanguageType_eLanguageTypeCobol85: root::lldb::LanguageType = 6;
        pub const LanguageType_eLanguageTypeFortran77: root::lldb::LanguageType = 7;
        pub const LanguageType_eLanguageTypeFortran90: root::lldb::LanguageType = 8;
        pub const LanguageType_eLanguageTypePascal83: root::lldb::LanguageType = 9;
        pub const LanguageType_eLanguageTypeModula2: root::lldb::LanguageType = 10;
        pub const LanguageType_eLanguageTypeJava: root::lldb::LanguageType = 11;
        pub const LanguageType_eLanguageTypeC99: root::lldb::LanguageType = 12;
        pub const LanguageType_eLanguageTypeAda95: root::lldb::LanguageType = 13;
        pub const LanguageType_eLanguageTypeFortran95: root::lldb::LanguageType = 14;
        pub const LanguageType_eLanguageTypePLI: root::lldb::LanguageType = 15;
        pub const LanguageType_eLanguageTypeObjC: root::lldb::LanguageType = 16;
        pub const LanguageType_eLanguageTypeObjC_plus_plus: root::lldb::LanguageType = 17;
        pub const LanguageType_eLanguageTypeUPC: root::lldb::LanguageType = 18;
        pub const LanguageType_eLanguageTypeD: root::lldb::LanguageType = 19;
        pub const LanguageType_eLanguageTypePython: root::lldb::LanguageType = 20;
        pub const LanguageType_eLanguageTypeOpenCL: root::lldb::LanguageType = 21;
        pub const LanguageType_eLanguageTypeGo: root::lldb::LanguageType = 22;
        pub const LanguageType_eLanguageTypeModula3: root::lldb::LanguageType = 23;
        pub const LanguageType_eLanguageTypeHaskell: root::lldb::LanguageType = 24;
        pub const LanguageType_eLanguageTypeC_plus_plus_03: root::lldb::LanguageType = 25;
        pub const LanguageType_eLanguageTypeC_plus_plus_11: root::lldb::LanguageType = 26;
        pub const LanguageType_eLanguageTypeOCaml: root::lldb::LanguageType = 27;
        pub const LanguageType_eLanguageTypeRust: root::lldb::LanguageType = 28;
        pub const LanguageType_eLanguageTypeC11: root::lldb::LanguageType = 29;
        pub const LanguageType_eLanguageTypeSwift: root::lldb::LanguageType = 30;
        pub const LanguageType_eLanguageTypeJulia: root::lldb::LanguageType = 31;
        pub const LanguageType_eLanguageTypeDylan: root::lldb::LanguageType = 32;
        pub const LanguageType_eLanguageTypeC_plus_plus_14: root::lldb::LanguageType = 33;
        pub const LanguageType_eLanguageTypeFortran03: root::lldb::LanguageType = 34;
        pub const LanguageType_eLanguageTypeFortran08: root::lldb::LanguageType = 35;
        pub const LanguageType_eLanguageTypeRenderScript: root::lldb::LanguageType = 36;
        pub const LanguageType_eLanguageTypeBLISS: root::lldb::LanguageType = 37;
        pub const LanguageType_eLanguageTypeKotlin: root::lldb::LanguageType = 38;
        pub const LanguageType_eLanguageTypeZig: root::lldb::LanguageType = 39;
        pub const LanguageType_eLanguageTypeCrystal: root::lldb::LanguageType = 40;
        pub const LanguageType_eLanguageTypeC_plus_plus_17: root::lldb::LanguageType = 42;
        pub const LanguageType_eLanguageTypeC_plus_plus_20: root::lldb::LanguageType = 43;
        pub const LanguageType_eLanguageTypeC17: root::lldb::LanguageType = 44;
        pub const LanguageType_eLanguageTypeFortran18: root::lldb::LanguageType = 45;
        pub const LanguageType_eLanguageTypeAda2005: root::lldb::LanguageType = 46;
        pub const LanguageType_eLanguageTypeAda2012: root::lldb::LanguageType = 47;
        pub const LanguageType_eLanguageTypeHIP: root::lldb::LanguageType = 48;
        pub const LanguageType_eLanguageTypeAssembly: root::lldb::LanguageType = 49;
        pub const LanguageType_eLanguageTypeC_sharp: root::lldb::LanguageType = 50;
        pub const LanguageType_eLanguageTypeMojo: root::lldb::LanguageType = 51;
        pub const LanguageType_eLanguageTypeMipsAssembler: root::lldb::LanguageType = 52;
        pub const LanguageType_eNumLanguageTypes: root::lldb::LanguageType = 53;
        pub type LanguageType = ::std::os::raw::c_uint;
        pub const InstrumentationRuntimeType_eInstrumentationRuntimeTypeAddressSanitizer:
            root::lldb::InstrumentationRuntimeType = 0;
        pub const InstrumentationRuntimeType_eInstrumentationRuntimeTypeThreadSanitizer:
            root::lldb::InstrumentationRuntimeType = 1;
        pub const InstrumentationRuntimeType_eInstrumentationRuntimeTypeUndefinedBehaviorSanitizer : root :: lldb :: InstrumentationRuntimeType = 2 ;
        pub const InstrumentationRuntimeType_eInstrumentationRuntimeTypeMainThreadChecker:
            root::lldb::InstrumentationRuntimeType = 3;
        pub const InstrumentationRuntimeType_eInstrumentationRuntimeTypeSwiftRuntimeReporting:
            root::lldb::InstrumentationRuntimeType = 4;
        pub const InstrumentationRuntimeType_eInstrumentationRuntimeTypeLibsanitizersAsan:
            root::lldb::InstrumentationRuntimeType = 5;
        pub const InstrumentationRuntimeType_eNumInstrumentationRuntimeTypes:
            root::lldb::InstrumentationRuntimeType = 6;
        pub type InstrumentationRuntimeType = ::std::os::raw::c_uint;
        pub const DynamicValueType_eNoDynamicValues: root::lldb::DynamicValueType = 0;
        pub const DynamicValueType_eDynamicCanRunTarget: root::lldb::DynamicValueType = 1;
        pub const DynamicValueType_eDynamicDontRunTarget: root::lldb::DynamicValueType = 2;
        pub type DynamicValueType = ::std::os::raw::c_uint;
        pub const StopShowColumn_eStopShowColumnAnsiOrCaret: root::lldb::StopShowColumn = 0;
        pub const StopShowColumn_eStopShowColumnAnsi: root::lldb::StopShowColumn = 1;
        pub const StopShowColumn_eStopShowColumnCaret: root::lldb::StopShowColumn = 2;
        pub const StopShowColumn_eStopShowColumnNone: root::lldb::StopShowColumn = 3;
        pub type StopShowColumn = ::std::os::raw::c_uint;
        pub const AccessType_eAccessNone: root::lldb::AccessType = 0;
        pub const AccessType_eAccessPublic: root::lldb::AccessType = 1;
        pub const AccessType_eAccessPrivate: root::lldb::AccessType = 2;
        pub const AccessType_eAccessProtected: root::lldb::AccessType = 3;
        pub const AccessType_eAccessPackage: root::lldb::AccessType = 4;
        pub type AccessType = ::std::os::raw::c_uint;
        pub const CommandArgumentType_eArgTypeAddress: root::lldb::CommandArgumentType = 0;
        pub const CommandArgumentType_eArgTypeAddressOrExpression: root::lldb::CommandArgumentType =
            1;
        pub const CommandArgumentType_eArgTypeAliasName: root::lldb::CommandArgumentType = 2;
        pub const CommandArgumentType_eArgTypeAliasOptions: root::lldb::CommandArgumentType = 3;
        pub const CommandArgumentType_eArgTypeArchitecture: root::lldb::CommandArgumentType = 4;
        pub const CommandArgumentType_eArgTypeBoolean: root::lldb::CommandArgumentType = 5;
        pub const CommandArgumentType_eArgTypeBreakpointID: root::lldb::CommandArgumentType = 6;
        pub const CommandArgumentType_eArgTypeBreakpointIDRange: root::lldb::CommandArgumentType =
            7;
        pub const CommandArgumentType_eArgTypeBreakpointName: root::lldb::CommandArgumentType = 8;
        pub const CommandArgumentType_eArgTypeByteSize: root::lldb::CommandArgumentType = 9;
        pub const CommandArgumentType_eArgTypeClassName: root::lldb::CommandArgumentType = 10;
        pub const CommandArgumentType_eArgTypeCommandName: root::lldb::CommandArgumentType = 11;
        pub const CommandArgumentType_eArgTypeCount: root::lldb::CommandArgumentType = 12;
        pub const CommandArgumentType_eArgTypeDescriptionVerbosity:
            root::lldb::CommandArgumentType = 13;
        pub const CommandArgumentType_eArgTypeDirectoryName: root::lldb::CommandArgumentType = 14;
        pub const CommandArgumentType_eArgTypeDisassemblyFlavor: root::lldb::CommandArgumentType =
            15;
        pub const CommandArgumentType_eArgTypeEndAddress: root::lldb::CommandArgumentType = 16;
        pub const CommandArgumentType_eArgTypeExpression: root::lldb::CommandArgumentType = 17;
        pub const CommandArgumentType_eArgTypeExpressionPath: root::lldb::CommandArgumentType = 18;
        pub const CommandArgumentType_eArgTypeExprFormat: root::lldb::CommandArgumentType = 19;
        pub const CommandArgumentType_eArgTypeFileLineColumn: root::lldb::CommandArgumentType = 20;
        pub const CommandArgumentType_eArgTypeFilename: root::lldb::CommandArgumentType = 21;
        pub const CommandArgumentType_eArgTypeFormat: root::lldb::CommandArgumentType = 22;
        pub const CommandArgumentType_eArgTypeFrameIndex: root::lldb::CommandArgumentType = 23;
        pub const CommandArgumentType_eArgTypeFullName: root::lldb::CommandArgumentType = 24;
        pub const CommandArgumentType_eArgTypeFunctionName: root::lldb::CommandArgumentType = 25;
        pub const CommandArgumentType_eArgTypeFunctionOrSymbol: root::lldb::CommandArgumentType =
            26;
        pub const CommandArgumentType_eArgTypeGDBFormat: root::lldb::CommandArgumentType = 27;
        pub const CommandArgumentType_eArgTypeHelpText: root::lldb::CommandArgumentType = 28;
        pub const CommandArgumentType_eArgTypeIndex: root::lldb::CommandArgumentType = 29;
        pub const CommandArgumentType_eArgTypeLanguage: root::lldb::CommandArgumentType = 30;
        pub const CommandArgumentType_eArgTypeLineNum: root::lldb::CommandArgumentType = 31;
        pub const CommandArgumentType_eArgTypeLogCategory: root::lldb::CommandArgumentType = 32;
        pub const CommandArgumentType_eArgTypeLogChannel: root::lldb::CommandArgumentType = 33;
        pub const CommandArgumentType_eArgTypeMethod: root::lldb::CommandArgumentType = 34;
        pub const CommandArgumentType_eArgTypeName: root::lldb::CommandArgumentType = 35;
        pub const CommandArgumentType_eArgTypeNewPathPrefix: root::lldb::CommandArgumentType = 36;
        pub const CommandArgumentType_eArgTypeNumLines: root::lldb::CommandArgumentType = 37;
        pub const CommandArgumentType_eArgTypeNumberPerLine: root::lldb::CommandArgumentType = 38;
        pub const CommandArgumentType_eArgTypeOffset: root::lldb::CommandArgumentType = 39;
        pub const CommandArgumentType_eArgTypeOldPathPrefix: root::lldb::CommandArgumentType = 40;
        pub const CommandArgumentType_eArgTypeOneLiner: root::lldb::CommandArgumentType = 41;
        pub const CommandArgumentType_eArgTypePath: root::lldb::CommandArgumentType = 42;
        pub const CommandArgumentType_eArgTypePermissionsNumber: root::lldb::CommandArgumentType =
            43;
        pub const CommandArgumentType_eArgTypePermissionsString: root::lldb::CommandArgumentType =
            44;
        pub const CommandArgumentType_eArgTypePid: root::lldb::CommandArgumentType = 45;
        pub const CommandArgumentType_eArgTypePlugin: root::lldb::CommandArgumentType = 46;
        pub const CommandArgumentType_eArgTypeProcessName: root::lldb::CommandArgumentType = 47;
        pub const CommandArgumentType_eArgTypePythonClass: root::lldb::CommandArgumentType = 48;
        pub const CommandArgumentType_eArgTypePythonFunction: root::lldb::CommandArgumentType = 49;
        pub const CommandArgumentType_eArgTypePythonScript: root::lldb::CommandArgumentType = 50;
        pub const CommandArgumentType_eArgTypeQueueName: root::lldb::CommandArgumentType = 51;
        pub const CommandArgumentType_eArgTypeRegisterName: root::lldb::CommandArgumentType = 52;
        pub const CommandArgumentType_eArgTypeRegularExpression: root::lldb::CommandArgumentType =
            53;
        pub const CommandArgumentType_eArgTypeRunArgs: root::lldb::CommandArgumentType = 54;
        pub const CommandArgumentType_eArgTypeRunMode: root::lldb::CommandArgumentType = 55;
        pub const CommandArgumentType_eArgTypeScriptedCommandSynchronicity:
            root::lldb::CommandArgumentType = 56;
        pub const CommandArgumentType_eArgTypeScriptLang: root::lldb::CommandArgumentType = 57;
        pub const CommandArgumentType_eArgTypeSearchWord: root::lldb::CommandArgumentType = 58;
        pub const CommandArgumentType_eArgTypeSelector: root::lldb::CommandArgumentType = 59;
        pub const CommandArgumentType_eArgTypeSettingIndex: root::lldb::CommandArgumentType = 60;
        pub const CommandArgumentType_eArgTypeSettingKey: root::lldb::CommandArgumentType = 61;
        pub const CommandArgumentType_eArgTypeSettingPrefix: root::lldb::CommandArgumentType = 62;
        pub const CommandArgumentType_eArgTypeSettingVariableName: root::lldb::CommandArgumentType =
            63;
        pub const CommandArgumentType_eArgTypeShlibName: root::lldb::CommandArgumentType = 64;
        pub const CommandArgumentType_eArgTypeSourceFile: root::lldb::CommandArgumentType = 65;
        pub const CommandArgumentType_eArgTypeSortOrder: root::lldb::CommandArgumentType = 66;
        pub const CommandArgumentType_eArgTypeStartAddress: root::lldb::CommandArgumentType = 67;
        pub const CommandArgumentType_eArgTypeSummaryString: root::lldb::CommandArgumentType = 68;
        pub const CommandArgumentType_eArgTypeSymbol: root::lldb::CommandArgumentType = 69;
        pub const CommandArgumentType_eArgTypeThreadID: root::lldb::CommandArgumentType = 70;
        pub const CommandArgumentType_eArgTypeThreadIndex: root::lldb::CommandArgumentType = 71;
        pub const CommandArgumentType_eArgTypeThreadName: root::lldb::CommandArgumentType = 72;
        pub const CommandArgumentType_eArgTypeTypeName: root::lldb::CommandArgumentType = 73;
        pub const CommandArgumentType_eArgTypeUnsignedInteger: root::lldb::CommandArgumentType = 74;
        pub const CommandArgumentType_eArgTypeUnixSignal: root::lldb::CommandArgumentType = 75;
        pub const CommandArgumentType_eArgTypeVarName: root::lldb::CommandArgumentType = 76;
        pub const CommandArgumentType_eArgTypeValue: root::lldb::CommandArgumentType = 77;
        pub const CommandArgumentType_eArgTypeWidth: root::lldb::CommandArgumentType = 78;
        pub const CommandArgumentType_eArgTypeNone: root::lldb::CommandArgumentType = 79;
        pub const CommandArgumentType_eArgTypePlatform: root::lldb::CommandArgumentType = 80;
        pub const CommandArgumentType_eArgTypeWatchpointID: root::lldb::CommandArgumentType = 81;
        pub const CommandArgumentType_eArgTypeWatchpointIDRange: root::lldb::CommandArgumentType =
            82;
        pub const CommandArgumentType_eArgTypeWatchType: root::lldb::CommandArgumentType = 83;
        pub const CommandArgumentType_eArgRawInput: root::lldb::CommandArgumentType = 84;
        pub const CommandArgumentType_eArgTypeCommand: root::lldb::CommandArgumentType = 85;
        pub const CommandArgumentType_eArgTypeColumnNum: root::lldb::CommandArgumentType = 86;
        pub const CommandArgumentType_eArgTypeModuleUUID: root::lldb::CommandArgumentType = 87;
        pub const CommandArgumentType_eArgTypeSaveCoreStyle: root::lldb::CommandArgumentType = 88;
        pub const CommandArgumentType_eArgTypeLogHandler: root::lldb::CommandArgumentType = 89;
        pub const CommandArgumentType_eArgTypeSEDStylePair: root::lldb::CommandArgumentType = 90;
        pub const CommandArgumentType_eArgTypeRecognizerID: root::lldb::CommandArgumentType = 91;
        pub const CommandArgumentType_eArgTypeConnectURL: root::lldb::CommandArgumentType = 92;
        pub const CommandArgumentType_eArgTypeTargetID: root::lldb::CommandArgumentType = 93;
        pub const CommandArgumentType_eArgTypeStopHookID: root::lldb::CommandArgumentType = 94;
        pub const CommandArgumentType_eArgTypeCompletionType: root::lldb::CommandArgumentType = 95;
        pub const CommandArgumentType_eArgTypeRemotePath: root::lldb::CommandArgumentType = 96;
        pub const CommandArgumentType_eArgTypeRemoteFilename: root::lldb::CommandArgumentType = 97;
        pub const CommandArgumentType_eArgTypeModule: root::lldb::CommandArgumentType = 98;
        pub const CommandArgumentType_eArgTypeLastArg: root::lldb::CommandArgumentType = 99;
        pub type CommandArgumentType = ::std::os::raw::c_uint;
        pub const SymbolType_eSymbolTypeAny: root::lldb::SymbolType = 0;
        pub const SymbolType_eSymbolTypeInvalid: root::lldb::SymbolType = 0;
        pub const SymbolType_eSymbolTypeAbsolute: root::lldb::SymbolType = 1;
        pub const SymbolType_eSymbolTypeCode: root::lldb::SymbolType = 2;
        pub const SymbolType_eSymbolTypeResolver: root::lldb::SymbolType = 3;
        pub const SymbolType_eSymbolTypeData: root::lldb::SymbolType = 4;
        pub const SymbolType_eSymbolTypeTrampoline: root::lldb::SymbolType = 5;
        pub const SymbolType_eSymbolTypeRuntime: root::lldb::SymbolType = 6;
        pub const SymbolType_eSymbolTypeException: root::lldb::SymbolType = 7;
        pub const SymbolType_eSymbolTypeSourceFile: root::lldb::SymbolType = 8;
        pub const SymbolType_eSymbolTypeHeaderFile: root::lldb::SymbolType = 9;
        pub const SymbolType_eSymbolTypeObjectFile: root::lldb::SymbolType = 10;
        pub const SymbolType_eSymbolTypeCommonBlock: root::lldb::SymbolType = 11;
        pub const SymbolType_eSymbolTypeBlock: root::lldb::SymbolType = 12;
        pub const SymbolType_eSymbolTypeLocal: root::lldb::SymbolType = 13;
        pub const SymbolType_eSymbolTypeParam: root::lldb::SymbolType = 14;
        pub const SymbolType_eSymbolTypeVariable: root::lldb::SymbolType = 15;
        pub const SymbolType_eSymbolTypeVariableType: root::lldb::SymbolType = 16;
        pub const SymbolType_eSymbolTypeLineEntry: root::lldb::SymbolType = 17;
        pub const SymbolType_eSymbolTypeLineHeader: root::lldb::SymbolType = 18;
        pub const SymbolType_eSymbolTypeScopeBegin: root::lldb::SymbolType = 19;
        pub const SymbolType_eSymbolTypeScopeEnd: root::lldb::SymbolType = 20;
        pub const SymbolType_eSymbolTypeAdditional: root::lldb::SymbolType = 21;
        pub const SymbolType_eSymbolTypeCompiler: root::lldb::SymbolType = 22;
        pub const SymbolType_eSymbolTypeInstrumentation: root::lldb::SymbolType = 23;
        pub const SymbolType_eSymbolTypeUndefined: root::lldb::SymbolType = 24;
        pub const SymbolType_eSymbolTypeObjCClass: root::lldb::SymbolType = 25;
        pub const SymbolType_eSymbolTypeObjCMetaClass: root::lldb::SymbolType = 26;
        pub const SymbolType_eSymbolTypeObjCIVar: root::lldb::SymbolType = 27;
        pub const SymbolType_eSymbolTypeReExported: root::lldb::SymbolType = 28;
        pub type SymbolType = ::std::os::raw::c_uint;
        pub const SectionType_eSectionTypeInvalid: root::lldb::SectionType = 0;
        pub const SectionType_eSectionTypeCode: root::lldb::SectionType = 1;
        pub const SectionType_eSectionTypeContainer: root::lldb::SectionType = 2;
        pub const SectionType_eSectionTypeData: root::lldb::SectionType = 3;
        pub const SectionType_eSectionTypeDataCString: root::lldb::SectionType = 4;
        pub const SectionType_eSectionTypeDataCStringPointers: root::lldb::SectionType = 5;
        pub const SectionType_eSectionTypeDataSymbolAddress: root::lldb::SectionType = 6;
        pub const SectionType_eSectionTypeData4: root::lldb::SectionType = 7;
        pub const SectionType_eSectionTypeData8: root::lldb::SectionType = 8;
        pub const SectionType_eSectionTypeData16: root::lldb::SectionType = 9;
        pub const SectionType_eSectionTypeDataPointers: root::lldb::SectionType = 10;
        pub const SectionType_eSectionTypeDebug: root::lldb::SectionType = 11;
        pub const SectionType_eSectionTypeZeroFill: root::lldb::SectionType = 12;
        pub const SectionType_eSectionTypeDataObjCMessageRefs: root::lldb::SectionType = 13;
        pub const SectionType_eSectionTypeDataObjCCFStrings: root::lldb::SectionType = 14;
        pub const SectionType_eSectionTypeDWARFDebugAbbrev: root::lldb::SectionType = 15;
        pub const SectionType_eSectionTypeDWARFDebugAddr: root::lldb::SectionType = 16;
        pub const SectionType_eSectionTypeDWARFDebugAranges: root::lldb::SectionType = 17;
        pub const SectionType_eSectionTypeDWARFDebugCuIndex: root::lldb::SectionType = 18;
        pub const SectionType_eSectionTypeDWARFDebugFrame: root::lldb::SectionType = 19;
        pub const SectionType_eSectionTypeDWARFDebugInfo: root::lldb::SectionType = 20;
        pub const SectionType_eSectionTypeDWARFDebugLine: root::lldb::SectionType = 21;
        pub const SectionType_eSectionTypeDWARFDebugLoc: root::lldb::SectionType = 22;
        pub const SectionType_eSectionTypeDWARFDebugMacInfo: root::lldb::SectionType = 23;
        pub const SectionType_eSectionTypeDWARFDebugMacro: root::lldb::SectionType = 24;
        pub const SectionType_eSectionTypeDWARFDebugPubNames: root::lldb::SectionType = 25;
        pub const SectionType_eSectionTypeDWARFDebugPubTypes: root::lldb::SectionType = 26;
        pub const SectionType_eSectionTypeDWARFDebugRanges: root::lldb::SectionType = 27;
        pub const SectionType_eSectionTypeDWARFDebugStr: root::lldb::SectionType = 28;
        pub const SectionType_eSectionTypeDWARFDebugStrOffsets: root::lldb::SectionType = 29;
        pub const SectionType_eSectionTypeDWARFAppleNames: root::lldb::SectionType = 30;
        pub const SectionType_eSectionTypeDWARFAppleTypes: root::lldb::SectionType = 31;
        pub const SectionType_eSectionTypeDWARFAppleNamespaces: root::lldb::SectionType = 32;
        pub const SectionType_eSectionTypeDWARFAppleObjC: root::lldb::SectionType = 33;
        pub const SectionType_eSectionTypeELFSymbolTable: root::lldb::SectionType = 34;
        pub const SectionType_eSectionTypeELFDynamicSymbols: root::lldb::SectionType = 35;
        pub const SectionType_eSectionTypeELFRelocationEntries: root::lldb::SectionType = 36;
        pub const SectionType_eSectionTypeELFDynamicLinkInfo: root::lldb::SectionType = 37;
        pub const SectionType_eSectionTypeEHFrame: root::lldb::SectionType = 38;
        pub const SectionType_eSectionTypeARMexidx: root::lldb::SectionType = 39;
        pub const SectionType_eSectionTypeARMextab: root::lldb::SectionType = 40;
        pub const SectionType_eSectionTypeCompactUnwind: root::lldb::SectionType = 41;
        pub const SectionType_eSectionTypeGoSymtab: root::lldb::SectionType = 42;
        pub const SectionType_eSectionTypeAbsoluteAddress: root::lldb::SectionType = 43;
        pub const SectionType_eSectionTypeDWARFGNUDebugAltLink: root::lldb::SectionType = 44;
        pub const SectionType_eSectionTypeDWARFDebugTypes: root::lldb::SectionType = 45;
        pub const SectionType_eSectionTypeDWARFDebugNames: root::lldb::SectionType = 46;
        pub const SectionType_eSectionTypeOther: root::lldb::SectionType = 47;
        pub const SectionType_eSectionTypeDWARFDebugLineStr: root::lldb::SectionType = 48;
        pub const SectionType_eSectionTypeDWARFDebugRngLists: root::lldb::SectionType = 49;
        pub const SectionType_eSectionTypeDWARFDebugLocLists: root::lldb::SectionType = 50;
        pub const SectionType_eSectionTypeDWARFDebugAbbrevDwo: root::lldb::SectionType = 51;
        pub const SectionType_eSectionTypeDWARFDebugInfoDwo: root::lldb::SectionType = 52;
        pub const SectionType_eSectionTypeDWARFDebugStrDwo: root::lldb::SectionType = 53;
        pub const SectionType_eSectionTypeDWARFDebugStrOffsetsDwo: root::lldb::SectionType = 54;
        pub const SectionType_eSectionTypeDWARFDebugTypesDwo: root::lldb::SectionType = 55;
        pub const SectionType_eSectionTypeDWARFDebugRngListsDwo: root::lldb::SectionType = 56;
        pub const SectionType_eSectionTypeDWARFDebugLocDwo: root::lldb::SectionType = 57;
        pub const SectionType_eSectionTypeDWARFDebugLocListsDwo: root::lldb::SectionType = 58;
        pub const SectionType_eSectionTypeDWARFDebugTuIndex: root::lldb::SectionType = 59;
        pub const SectionType_eSectionTypeCTF: root::lldb::SectionType = 60;
        pub const SectionType_eSectionTypeSwiftModules: root::lldb::SectionType = 61;
        pub type SectionType = ::std::os::raw::c_uint;
        pub const EmulateInstructionOptions_eEmulateInstructionOptionNone:
            root::lldb::EmulateInstructionOptions = 0;
        pub const EmulateInstructionOptions_eEmulateInstructionOptionAutoAdvancePC:
            root::lldb::EmulateInstructionOptions = 1;
        pub const EmulateInstructionOptions_eEmulateInstructionOptionIgnoreConditions:
            root::lldb::EmulateInstructionOptions = 2;
        pub type EmulateInstructionOptions = ::std::os::raw::c_uint;
        pub const FunctionNameType_eFunctionNameTypeNone: root::lldb::FunctionNameType = 0;
        pub const FunctionNameType_eFunctionNameTypeAuto: root::lldb::FunctionNameType = 2;
        pub const FunctionNameType_eFunctionNameTypeFull: root::lldb::FunctionNameType = 4;
        pub const FunctionNameType_eFunctionNameTypeBase: root::lldb::FunctionNameType = 8;
        pub const FunctionNameType_eFunctionNameTypeMethod: root::lldb::FunctionNameType = 16;
        pub const FunctionNameType_eFunctionNameTypeSelector: root::lldb::FunctionNameType = 32;
        pub const FunctionNameType_eFunctionNameTypeAny: root::lldb::FunctionNameType = 2;
        pub type FunctionNameType = ::std::os::raw::c_uint;
        pub const BasicType_eBasicTypeInvalid: root::lldb::BasicType = 0;
        pub const BasicType_eBasicTypeVoid: root::lldb::BasicType = 1;
        pub const BasicType_eBasicTypeChar: root::lldb::BasicType = 2;
        pub const BasicType_eBasicTypeSignedChar: root::lldb::BasicType = 3;
        pub const BasicType_eBasicTypeUnsignedChar: root::lldb::BasicType = 4;
        pub const BasicType_eBasicTypeWChar: root::lldb::BasicType = 5;
        pub const BasicType_eBasicTypeSignedWChar: root::lldb::BasicType = 6;
        pub const BasicType_eBasicTypeUnsignedWChar: root::lldb::BasicType = 7;
        pub const BasicType_eBasicTypeChar16: root::lldb::BasicType = 8;
        pub const BasicType_eBasicTypeChar32: root::lldb::BasicType = 9;
        pub const BasicType_eBasicTypeChar8: root::lldb::BasicType = 10;
        pub const BasicType_eBasicTypeShort: root::lldb::BasicType = 11;
        pub const BasicType_eBasicTypeUnsignedShort: root::lldb::BasicType = 12;
        pub const BasicType_eBasicTypeInt: root::lldb::BasicType = 13;
        pub const BasicType_eBasicTypeUnsignedInt: root::lldb::BasicType = 14;
        pub const BasicType_eBasicTypeLong: root::lldb::BasicType = 15;
        pub const BasicType_eBasicTypeUnsignedLong: root::lldb::BasicType = 16;
        pub const BasicType_eBasicTypeLongLong: root::lldb::BasicType = 17;
        pub const BasicType_eBasicTypeUnsignedLongLong: root::lldb::BasicType = 18;
        pub const BasicType_eBasicTypeInt128: root::lldb::BasicType = 19;
        pub const BasicType_eBasicTypeUnsignedInt128: root::lldb::BasicType = 20;
        pub const BasicType_eBasicTypeBool: root::lldb::BasicType = 21;
        pub const BasicType_eBasicTypeHalf: root::lldb::BasicType = 22;
        pub const BasicType_eBasicTypeFloat: root::lldb::BasicType = 23;
        pub const BasicType_eBasicTypeDouble: root::lldb::BasicType = 24;
        pub const BasicType_eBasicTypeLongDouble: root::lldb::BasicType = 25;
        pub const BasicType_eBasicTypeFloatComplex: root::lldb::BasicType = 26;
        pub const BasicType_eBasicTypeDoubleComplex: root::lldb::BasicType = 27;
        pub const BasicType_eBasicTypeLongDoubleComplex: root::lldb::BasicType = 28;
        pub const BasicType_eBasicTypeObjCID: root::lldb::BasicType = 29;
        pub const BasicType_eBasicTypeObjCClass: root::lldb::BasicType = 30;
        pub const BasicType_eBasicTypeObjCSel: root::lldb::BasicType = 31;
        pub const BasicType_eBasicTypeNullPtr: root::lldb::BasicType = 32;
        pub const BasicType_eBasicTypeOther: root::lldb::BasicType = 33;
        pub type BasicType = ::std::os::raw::c_uint;
        pub const TraceType_eTraceTypeNone: root::lldb::TraceType = 0;
        pub const TraceType_eTraceTypeProcessorTrace: root::lldb::TraceType = 1;
        pub type TraceType = ::std::os::raw::c_uint;
        pub const StructuredDataType_eStructuredDataTypeInvalid: root::lldb::StructuredDataType =
            -1;
        pub const StructuredDataType_eStructuredDataTypeNull: root::lldb::StructuredDataType = 0;
        pub const StructuredDataType_eStructuredDataTypeGeneric: root::lldb::StructuredDataType = 1;
        pub const StructuredDataType_eStructuredDataTypeArray: root::lldb::StructuredDataType = 2;
        pub const StructuredDataType_eStructuredDataTypeInteger: root::lldb::StructuredDataType = 3;
        pub const StructuredDataType_eStructuredDataTypeFloat: root::lldb::StructuredDataType = 4;
        pub const StructuredDataType_eStructuredDataTypeBoolean: root::lldb::StructuredDataType = 5;
        pub const StructuredDataType_eStructuredDataTypeString: root::lldb::StructuredDataType = 6;
        pub const StructuredDataType_eStructuredDataTypeDictionary: root::lldb::StructuredDataType =
            7;
        pub const StructuredDataType_eStructuredDataTypeSignedInteger:
            root::lldb::StructuredDataType = 8;
        pub const StructuredDataType_eStructuredDataTypeUnsignedInteger:
            root::lldb::StructuredDataType = 3;
        pub type StructuredDataType = ::std::os::raw::c_int;
        pub const TypeClass_eTypeClassInvalid: root::lldb::TypeClass = 0;
        pub const TypeClass_eTypeClassArray: root::lldb::TypeClass = 1;
        pub const TypeClass_eTypeClassBlockPointer: root::lldb::TypeClass = 2;
        pub const TypeClass_eTypeClassBuiltin: root::lldb::TypeClass = 4;
        pub const TypeClass_eTypeClassClass: root::lldb::TypeClass = 8;
        pub const TypeClass_eTypeClassComplexFloat: root::lldb::TypeClass = 16;
        pub const TypeClass_eTypeClassComplexInteger: root::lldb::TypeClass = 32;
        pub const TypeClass_eTypeClassEnumeration: root::lldb::TypeClass = 64;
        pub const TypeClass_eTypeClassFunction: root::lldb::TypeClass = 128;
        pub const TypeClass_eTypeClassMemberPointer: root::lldb::TypeClass = 256;
        pub const TypeClass_eTypeClassObjCObject: root::lldb::TypeClass = 512;
        pub const TypeClass_eTypeClassObjCInterface: root::lldb::TypeClass = 1024;
        pub const TypeClass_eTypeClassObjCObjectPointer: root::lldb::TypeClass = 2048;
        pub const TypeClass_eTypeClassPointer: root::lldb::TypeClass = 4096;
        pub const TypeClass_eTypeClassReference: root::lldb::TypeClass = 8192;
        pub const TypeClass_eTypeClassStruct: root::lldb::TypeClass = 16384;
        pub const TypeClass_eTypeClassTypedef: root::lldb::TypeClass = 32768;
        pub const TypeClass_eTypeClassUnion: root::lldb::TypeClass = 65536;
        pub const TypeClass_eTypeClassVector: root::lldb::TypeClass = 131072;
        pub const TypeClass_eTypeClassOther: root::lldb::TypeClass = 2147483648;
        pub const TypeClass_eTypeClassAny: root::lldb::TypeClass = 4294967295;
        pub type TypeClass = ::std::os::raw::c_uint;
        pub const TemplateArgumentKind_eTemplateArgumentKindNull: root::lldb::TemplateArgumentKind =
            0;
        pub const TemplateArgumentKind_eTemplateArgumentKindType: root::lldb::TemplateArgumentKind =
            1;
        pub const TemplateArgumentKind_eTemplateArgumentKindDeclaration:
            root::lldb::TemplateArgumentKind = 2;
        pub const TemplateArgumentKind_eTemplateArgumentKindIntegral:
            root::lldb::TemplateArgumentKind = 3;
        pub const TemplateArgumentKind_eTemplateArgumentKindTemplate:
            root::lldb::TemplateArgumentKind = 4;
        pub const TemplateArgumentKind_eTemplateArgumentKindTemplateExpansion:
            root::lldb::TemplateArgumentKind = 5;
        pub const TemplateArgumentKind_eTemplateArgumentKindExpression:
            root::lldb::TemplateArgumentKind = 6;
        pub const TemplateArgumentKind_eTemplateArgumentKindPack: root::lldb::TemplateArgumentKind =
            7;
        pub const TemplateArgumentKind_eTemplateArgumentKindNullPtr:
            root::lldb::TemplateArgumentKind = 8;
        pub const TemplateArgumentKind_eTemplateArgumentKindStructuralValue:
            root::lldb::TemplateArgumentKind = 9;
        pub type TemplateArgumentKind = ::std::os::raw::c_uint;
        pub const FormatterMatchType_eFormatterMatchExact: root::lldb::FormatterMatchType = 0;
        pub const FormatterMatchType_eFormatterMatchRegex: root::lldb::FormatterMatchType = 1;
        pub const FormatterMatchType_eFormatterMatchCallback: root::lldb::FormatterMatchType = 2;
        pub const FormatterMatchType_eLastFormatterMatchType: root::lldb::FormatterMatchType = 2;
        pub type FormatterMatchType = ::std::os::raw::c_uint;
        pub const TypeOptions_eTypeOptionNone: root::lldb::TypeOptions = 0;
        pub const TypeOptions_eTypeOptionCascade: root::lldb::TypeOptions = 1;
        pub const TypeOptions_eTypeOptionSkipPointers: root::lldb::TypeOptions = 2;
        pub const TypeOptions_eTypeOptionSkipReferences: root::lldb::TypeOptions = 4;
        pub const TypeOptions_eTypeOptionHideChildren: root::lldb::TypeOptions = 8;
        pub const TypeOptions_eTypeOptionHideValue: root::lldb::TypeOptions = 16;
        pub const TypeOptions_eTypeOptionShowOneLiner: root::lldb::TypeOptions = 32;
        pub const TypeOptions_eTypeOptionHideNames: root::lldb::TypeOptions = 64;
        pub const TypeOptions_eTypeOptionNonCacheable: root::lldb::TypeOptions = 128;
        pub const TypeOptions_eTypeOptionHideEmptyAggregates: root::lldb::TypeOptions = 256;
        pub const TypeOptions_eTypeOptionFrontEndWantsDereference: root::lldb::TypeOptions = 512;
        pub type TypeOptions = ::std::os::raw::c_uint;
        pub const FrameComparison_eFrameCompareInvalid: root::lldb::FrameComparison = 0;
        pub const FrameComparison_eFrameCompareUnknown: root::lldb::FrameComparison = 1;
        pub const FrameComparison_eFrameCompareEqual: root::lldb::FrameComparison = 2;
        pub const FrameComparison_eFrameCompareSameParent: root::lldb::FrameComparison = 3;
        pub const FrameComparison_eFrameCompareYounger: root::lldb::FrameComparison = 4;
        pub const FrameComparison_eFrameCompareOlder: root::lldb::FrameComparison = 5;
        pub type FrameComparison = ::std::os::raw::c_uint;
        pub const FilePermissions_eFilePermissionsUserRead: root::lldb::FilePermissions = 256;
        pub const FilePermissions_eFilePermissionsUserWrite: root::lldb::FilePermissions = 128;
        pub const FilePermissions_eFilePermissionsUserExecute: root::lldb::FilePermissions = 64;
        pub const FilePermissions_eFilePermissionsGroupRead: root::lldb::FilePermissions = 32;
        pub const FilePermissions_eFilePermissionsGroupWrite: root::lldb::FilePermissions = 16;
        pub const FilePermissions_eFilePermissionsGroupExecute: root::lldb::FilePermissions = 8;
        pub const FilePermissions_eFilePermissionsWorldRead: root::lldb::FilePermissions = 4;
        pub const FilePermissions_eFilePermissionsWorldWrite: root::lldb::FilePermissions = 2;
        pub const FilePermissions_eFilePermissionsWorldExecute: root::lldb::FilePermissions = 1;
        pub const FilePermissions_eFilePermissionsUserRW: root::lldb::FilePermissions = 384;
        pub const FilePermissions_eFileFilePermissionsUserRX: root::lldb::FilePermissions = 320;
        pub const FilePermissions_eFilePermissionsUserRWX: root::lldb::FilePermissions = 448;
        pub const FilePermissions_eFilePermissionsGroupRW: root::lldb::FilePermissions = 48;
        pub const FilePermissions_eFilePermissionsGroupRX: root::lldb::FilePermissions = 40;
        pub const FilePermissions_eFilePermissionsGroupRWX: root::lldb::FilePermissions = 56;
        pub const FilePermissions_eFilePermissionsWorldRW: root::lldb::FilePermissions = 6;
        pub const FilePermissions_eFilePermissionsWorldRX: root::lldb::FilePermissions = 5;
        pub const FilePermissions_eFilePermissionsWorldRWX: root::lldb::FilePermissions = 7;
        pub const FilePermissions_eFilePermissionsEveryoneR: root::lldb::FilePermissions = 292;
        pub const FilePermissions_eFilePermissionsEveryoneW: root::lldb::FilePermissions = 146;
        pub const FilePermissions_eFilePermissionsEveryoneX: root::lldb::FilePermissions = 73;
        pub const FilePermissions_eFilePermissionsEveryoneRW: root::lldb::FilePermissions = 438;
        pub const FilePermissions_eFilePermissionsEveryoneRX: root::lldb::FilePermissions = 365;
        pub const FilePermissions_eFilePermissionsEveryoneRWX: root::lldb::FilePermissions = 511;
        pub const FilePermissions_eFilePermissionsFileDefault: root::lldb::FilePermissions = 384;
        pub const FilePermissions_eFilePermissionsDirectoryDefault: root::lldb::FilePermissions =
            448;
        pub type FilePermissions = ::std::os::raw::c_uint;
        pub const QueueItemKind_eQueueItemKindUnknown: root::lldb::QueueItemKind = 0;
        pub const QueueItemKind_eQueueItemKindFunction: root::lldb::QueueItemKind = 1;
        pub const QueueItemKind_eQueueItemKindBlock: root::lldb::QueueItemKind = 2;
        pub type QueueItemKind = ::std::os::raw::c_uint;
        pub const QueueKind_eQueueKindUnknown: root::lldb::QueueKind = 0;
        pub const QueueKind_eQueueKindSerial: root::lldb::QueueKind = 1;
        pub const QueueKind_eQueueKindConcurrent: root::lldb::QueueKind = 2;
        pub type QueueKind = ::std::os::raw::c_uint;
        pub const ExpressionEvaluationPhase_eExpressionEvaluationParse:
            root::lldb::ExpressionEvaluationPhase = 0;
        pub const ExpressionEvaluationPhase_eExpressionEvaluationIRGen:
            root::lldb::ExpressionEvaluationPhase = 1;
        pub const ExpressionEvaluationPhase_eExpressionEvaluationExecution:
            root::lldb::ExpressionEvaluationPhase = 2;
        pub const ExpressionEvaluationPhase_eExpressionEvaluationComplete:
            root::lldb::ExpressionEvaluationPhase = 3;
        pub type ExpressionEvaluationPhase = ::std::os::raw::c_uint;
        pub const InstructionControlFlowKind_eInstructionControlFlowKindUnknown:
            root::lldb::InstructionControlFlowKind = 0;
        pub const InstructionControlFlowKind_eInstructionControlFlowKindOther:
            root::lldb::InstructionControlFlowKind = 1;
        pub const InstructionControlFlowKind_eInstructionControlFlowKindCall:
            root::lldb::InstructionControlFlowKind = 2;
        pub const InstructionControlFlowKind_eInstructionControlFlowKindReturn:
            root::lldb::InstructionControlFlowKind = 3;
        pub const InstructionControlFlowKind_eInstructionControlFlowKindJump:
            root::lldb::InstructionControlFlowKind = 4;
        pub const InstructionControlFlowKind_eInstructionControlFlowKindCondJump:
            root::lldb::InstructionControlFlowKind = 5;
        pub const InstructionControlFlowKind_eInstructionControlFlowKindFarCall:
            root::lldb::InstructionControlFlowKind = 6;
        pub const InstructionControlFlowKind_eInstructionControlFlowKindFarReturn:
            root::lldb::InstructionControlFlowKind = 7;
        pub const InstructionControlFlowKind_eInstructionControlFlowKindFarJump:
            root::lldb::InstructionControlFlowKind = 8;
        pub type InstructionControlFlowKind = ::std::os::raw::c_uint;
        pub const WatchpointKind_eWatchpointKindWrite: root::lldb::WatchpointKind = 1;
        pub const WatchpointKind_eWatchpointKindRead: root::lldb::WatchpointKind = 2;
        pub type WatchpointKind = ::std::os::raw::c_uint;
        pub const GdbSignal_eGdbSignalBadAccess: root::lldb::GdbSignal = 145;
        pub const GdbSignal_eGdbSignalBadInstruction: root::lldb::GdbSignal = 146;
        pub const GdbSignal_eGdbSignalArithmetic: root::lldb::GdbSignal = 147;
        pub const GdbSignal_eGdbSignalEmulation: root::lldb::GdbSignal = 148;
        pub const GdbSignal_eGdbSignalSoftware: root::lldb::GdbSignal = 149;
        pub const GdbSignal_eGdbSignalBreakpoint: root::lldb::GdbSignal = 150;
        pub type GdbSignal = ::std::os::raw::c_uint;
        pub const PathType_ePathTypeLLDBShlibDir: root::lldb::PathType = 0;
        pub const PathType_ePathTypeSupportExecutableDir: root::lldb::PathType = 1;
        pub const PathType_ePathTypeHeaderDir: root::lldb::PathType = 2;
        pub const PathType_ePathTypePythonDir: root::lldb::PathType = 3;
        pub const PathType_ePathTypeLLDBSystemPlugins: root::lldb::PathType = 4;
        pub const PathType_ePathTypeLLDBUserPlugins: root::lldb::PathType = 5;
        pub const PathType_ePathTypeLLDBTempSystemDir: root::lldb::PathType = 6;
        pub const PathType_ePathTypeGlobalLLDBTempSystemDir: root::lldb::PathType = 7;
        pub const PathType_ePathTypeClangDir: root::lldb::PathType = 8;
        pub type PathType = ::std::os::raw::c_uint;
        pub const MemberFunctionKind_eMemberFunctionKindUnknown: root::lldb::MemberFunctionKind = 0;
        pub const MemberFunctionKind_eMemberFunctionKindConstructor:
            root::lldb::MemberFunctionKind = 1;
        pub const MemberFunctionKind_eMemberFunctionKindDestructor: root::lldb::MemberFunctionKind =
            2;
        pub const MemberFunctionKind_eMemberFunctionKindInstanceMethod:
            root::lldb::MemberFunctionKind = 3;
        pub const MemberFunctionKind_eMemberFunctionKindStaticMethod:
            root::lldb::MemberFunctionKind = 4;
        pub type MemberFunctionKind = ::std::os::raw::c_uint;
        pub const MatchType_eMatchTypeNormal: root::lldb::MatchType = 0;
        pub const MatchType_eMatchTypeRegex: root::lldb::MatchType = 1;
        pub const MatchType_eMatchTypeStartsWith: root::lldb::MatchType = 2;
        pub const MatchType_eMatchTypeRegexInsensitive: root::lldb::MatchType = 3;
        pub type MatchType = ::std::os::raw::c_uint;
        pub const TypeFlags_eTypeHasChildren: root::lldb::TypeFlags = 1;
        pub const TypeFlags_eTypeHasValue: root::lldb::TypeFlags = 2;
        pub const TypeFlags_eTypeIsArray: root::lldb::TypeFlags = 4;
        pub const TypeFlags_eTypeIsBlock: root::lldb::TypeFlags = 8;
        pub const TypeFlags_eTypeIsBuiltIn: root::lldb::TypeFlags = 16;
        pub const TypeFlags_eTypeIsClass: root::lldb::TypeFlags = 32;
        pub const TypeFlags_eTypeIsCPlusPlus: root::lldb::TypeFlags = 64;
        pub const TypeFlags_eTypeIsEnumeration: root::lldb::TypeFlags = 128;
        pub const TypeFlags_eTypeIsFuncPrototype: root::lldb::TypeFlags = 256;
        pub const TypeFlags_eTypeIsMember: root::lldb::TypeFlags = 512;
        pub const TypeFlags_eTypeIsObjC: root::lldb::TypeFlags = 1024;
        pub const TypeFlags_eTypeIsPointer: root::lldb::TypeFlags = 2048;
        pub const TypeFlags_eTypeIsReference: root::lldb::TypeFlags = 4096;
        pub const TypeFlags_eTypeIsStructUnion: root::lldb::TypeFlags = 8192;
        pub const TypeFlags_eTypeIsTemplate: root::lldb::TypeFlags = 16384;
        pub const TypeFlags_eTypeIsTypedef: root::lldb::TypeFlags = 32768;
        pub const TypeFlags_eTypeIsVector: root::lldb::TypeFlags = 65536;
        pub const TypeFlags_eTypeIsScalar: root::lldb::TypeFlags = 131072;
        pub const TypeFlags_eTypeIsInteger: root::lldb::TypeFlags = 262144;
        pub const TypeFlags_eTypeIsFloat: root::lldb::TypeFlags = 524288;
        pub const TypeFlags_eTypeIsComplex: root::lldb::TypeFlags = 1048576;
        pub const TypeFlags_eTypeIsSigned: root::lldb::TypeFlags = 2097152;
        pub const TypeFlags_eTypeInstanceIsPointer: root::lldb::TypeFlags = 4194304;
        pub type TypeFlags = ::std::os::raw::c_uint;
        pub const CommandFlags_eCommandRequiresTarget: root::lldb::CommandFlags = 1;
        pub const CommandFlags_eCommandRequiresProcess: root::lldb::CommandFlags = 2;
        pub const CommandFlags_eCommandRequiresThread: root::lldb::CommandFlags = 4;
        pub const CommandFlags_eCommandRequiresFrame: root::lldb::CommandFlags = 8;
        pub const CommandFlags_eCommandRequiresRegContext: root::lldb::CommandFlags = 16;
        pub const CommandFlags_eCommandTryTargetAPILock: root::lldb::CommandFlags = 32;
        pub const CommandFlags_eCommandProcessMustBeLaunched: root::lldb::CommandFlags = 64;
        pub const CommandFlags_eCommandProcessMustBePaused: root::lldb::CommandFlags = 128;
        pub const CommandFlags_eCommandProcessMustBeTraced: root::lldb::CommandFlags = 256;
        pub type CommandFlags = ::std::os::raw::c_uint;
        pub const TypeSummaryCapping_eTypeSummaryCapped: root::lldb::TypeSummaryCapping = 1;
        pub const TypeSummaryCapping_eTypeSummaryUncapped: root::lldb::TypeSummaryCapping = 0;
        pub type TypeSummaryCapping = ::std::os::raw::c_uint;
        pub const CommandInterpreterResult_eCommandInterpreterResultSuccess:
            root::lldb::CommandInterpreterResult = 0;
        pub const CommandInterpreterResult_eCommandInterpreterResultInferiorCrash:
            root::lldb::CommandInterpreterResult = 1;
        pub const CommandInterpreterResult_eCommandInterpreterResultCommandError:
            root::lldb::CommandInterpreterResult = 2;
        pub const CommandInterpreterResult_eCommandInterpreterResultQuitRequested:
            root::lldb::CommandInterpreterResult = 3;
        pub type CommandInterpreterResult = ::std::os::raw::c_uint;
        pub const SaveCoreStyle_eSaveCoreUnspecified: root::lldb::SaveCoreStyle = 0;
        pub const SaveCoreStyle_eSaveCoreFull: root::lldb::SaveCoreStyle = 1;
        pub const SaveCoreStyle_eSaveCoreDirtyOnly: root::lldb::SaveCoreStyle = 2;
        pub const SaveCoreStyle_eSaveCoreStackOnly: root::lldb::SaveCoreStyle = 3;
        pub type SaveCoreStyle = ::std::os::raw::c_uint;
        pub const TraceEvent_eTraceEventDisabledSW: root::lldb::TraceEvent = 0;
        pub const TraceEvent_eTraceEventDisabledHW: root::lldb::TraceEvent = 1;
        pub const TraceEvent_eTraceEventCPUChanged: root::lldb::TraceEvent = 2;
        pub const TraceEvent_eTraceEventHWClockTick: root::lldb::TraceEvent = 3;
        pub const TraceEvent_eTraceEventSyncPoint: root::lldb::TraceEvent = 4;
        pub type TraceEvent = ::std::os::raw::c_uint;
        pub const TraceItemKind_eTraceItemKindError: root::lldb::TraceItemKind = 0;
        pub const TraceItemKind_eTraceItemKindEvent: root::lldb::TraceItemKind = 1;
        pub const TraceItemKind_eTraceItemKindInstruction: root::lldb::TraceItemKind = 2;
        pub type TraceItemKind = ::std::os::raw::c_uint;
        pub const TraceCursorSeekType_eTraceCursorSeekTypeBeginning:
            root::lldb::TraceCursorSeekType = 0;
        pub const TraceCursorSeekType_eTraceCursorSeekTypeCurrent: root::lldb::TraceCursorSeekType =
            1;
        pub const TraceCursorSeekType_eTraceCursorSeekTypeEnd: root::lldb::TraceCursorSeekType = 2;
        pub type TraceCursorSeekType = ::std::os::raw::c_uint;
        pub const DWIMPrintVerbosity_eDWIMPrintVerbosityNone: root::lldb::DWIMPrintVerbosity = 0;
        pub const DWIMPrintVerbosity_eDWIMPrintVerbosityExpression: root::lldb::DWIMPrintVerbosity =
            1;
        pub const DWIMPrintVerbosity_eDWIMPrintVerbosityFull: root::lldb::DWIMPrintVerbosity = 2;
        pub type DWIMPrintVerbosity = ::std::os::raw::c_uint;
        pub const WatchpointValueKind_eWatchPointValueKindInvalid: root::lldb::WatchpointValueKind =
            0;
        pub const WatchpointValueKind_eWatchPointValueKindVariable:
            root::lldb::WatchpointValueKind = 1;
        pub const WatchpointValueKind_eWatchPointValueKindExpression:
            root::lldb::WatchpointValueKind = 2;
        pub type WatchpointValueKind = ::std::os::raw::c_uint;
        pub const CompletionType_eNoCompletion: root::lldb::CompletionType = 0;
        pub const CompletionType_eSourceFileCompletion: root::lldb::CompletionType = 1;
        pub const CompletionType_eDiskFileCompletion: root::lldb::CompletionType = 2;
        pub const CompletionType_eDiskDirectoryCompletion: root::lldb::CompletionType = 4;
        pub const CompletionType_eSymbolCompletion: root::lldb::CompletionType = 8;
        pub const CompletionType_eModuleCompletion: root::lldb::CompletionType = 16;
        pub const CompletionType_eSettingsNameCompletion: root::lldb::CompletionType = 32;
        pub const CompletionType_ePlatformPluginCompletion: root::lldb::CompletionType = 64;
        pub const CompletionType_eArchitectureCompletion: root::lldb::CompletionType = 128;
        pub const CompletionType_eVariablePathCompletion: root::lldb::CompletionType = 256;
        pub const CompletionType_eRegisterCompletion: root::lldb::CompletionType = 512;
        pub const CompletionType_eBreakpointCompletion: root::lldb::CompletionType = 1024;
        pub const CompletionType_eProcessPluginCompletion: root::lldb::CompletionType = 2048;
        pub const CompletionType_eDisassemblyFlavorCompletion: root::lldb::CompletionType = 4096;
        pub const CompletionType_eTypeLanguageCompletion: root::lldb::CompletionType = 8192;
        pub const CompletionType_eFrameIndexCompletion: root::lldb::CompletionType = 16384;
        pub const CompletionType_eModuleUUIDCompletion: root::lldb::CompletionType = 32768;
        pub const CompletionType_eStopHookIDCompletion: root::lldb::CompletionType = 65536;
        pub const CompletionType_eThreadIndexCompletion: root::lldb::CompletionType = 131072;
        pub const CompletionType_eWatchpointIDCompletion: root::lldb::CompletionType = 262144;
        pub const CompletionType_eBreakpointNameCompletion: root::lldb::CompletionType = 524288;
        pub const CompletionType_eProcessIDCompletion: root::lldb::CompletionType = 1048576;
        pub const CompletionType_eProcessNameCompletion: root::lldb::CompletionType = 2097152;
        pub const CompletionType_eRemoteDiskFileCompletion: root::lldb::CompletionType = 4194304;
        pub const CompletionType_eRemoteDiskDirectoryCompletion: root::lldb::CompletionType =
            8388608;
        pub const CompletionType_eTypeCategoryNameCompletion: root::lldb::CompletionType = 16777216;
        pub const CompletionType_eCustomCompletion: root::lldb::CompletionType = 33554432;
        pub const CompletionType_eThreadIDCompletion: root::lldb::CompletionType = 67108864;
        pub const CompletionType_eTerminatorCompletion: root::lldb::CompletionType = 134217728;
        pub type CompletionType = ::std::os::raw::c_uint;
        pub const ChildCacheState_eRefetch: root::lldb::ChildCacheState = 0;
        pub const ChildCacheState_eReuse: root::lldb::ChildCacheState = 1;
        pub type ChildCacheState = ::std::os::raw::c_uint;
        pub const SymbolDownload_eSymbolDownloadOff: root::lldb::SymbolDownload = 0;
        pub const SymbolDownload_eSymbolDownloadBackground: root::lldb::SymbolDownload = 1;
        pub const SymbolDownload_eSymbolDownloadForeground: root::lldb::SymbolDownload = 2;
        pub type SymbolDownload = ::std::os::raw::c_uint;
        pub const AddressMaskType_eAddressMaskTypeCode: root::lldb::AddressMaskType = 0;
        pub const AddressMaskType_eAddressMaskTypeData: root::lldb::AddressMaskType = 1;
        pub const AddressMaskType_eAddressMaskTypeAny: root::lldb::AddressMaskType = 2;
        pub const AddressMaskType_eAddressMaskTypeAll: root::lldb::AddressMaskType = 2;
        pub type AddressMaskType = ::std::os::raw::c_uint;
        pub const AddressMaskRange_eAddressMaskRangeLow: root::lldb::AddressMaskRange = 0;
        pub const AddressMaskRange_eAddressMaskRangeHigh: root::lldb::AddressMaskRange = 1;
        pub const AddressMaskRange_eAddressMaskRangeAny: root::lldb::AddressMaskRange = 2;
        pub const AddressMaskRange_eAddressMaskRangeAll: root::lldb::AddressMaskRange = 2;
        pub type AddressMaskRange = ::std::os::raw::c_uint;
        pub const DebuggerBroadcastBit_eBroadcastBitProgress: root::lldb::DebuggerBroadcastBit = 1;
        pub const DebuggerBroadcastBit_eBroadcastBitWarning: root::lldb::DebuggerBroadcastBit = 2;
        pub const DebuggerBroadcastBit_eBroadcastBitError: root::lldb::DebuggerBroadcastBit = 4;
        pub const DebuggerBroadcastBit_eBroadcastSymbolChange: root::lldb::DebuggerBroadcastBit = 8;
        pub const DebuggerBroadcastBit_eBroadcastBitProgressCategory:
            root::lldb::DebuggerBroadcastBit = 16;
        pub type DebuggerBroadcastBit = ::std::os::raw::c_uint;
        pub const Severity_eSeverityError: root::lldb::Severity = 0;
        pub const Severity_eSeverityWarning: root::lldb::Severity = 1;
        pub const Severity_eSeverityInfo: root::lldb::Severity = 2;
        pub type Severity = ::std::os::raw::c_uint;
        pub type ABISP = u8;
        pub type AddressRangeUP = u64;
        pub type BatonSP = u8;
        pub type BlockSP = u8;
        pub type BreakpointSP = u8;
        pub type BreakpointWP = [u64; 2usize];
        pub type BreakpointSiteSP = u8;
        pub type BreakpointLocationSP = u8;
        pub type BreakpointLocationWP = [u64; 2usize];
        pub type BreakpointPreconditionSP = u8;
        pub type BreakpointResolverSP = u8;
        pub type BroadcasterSP = [u64; 2usize];
        pub type BroadcasterManagerSP = u8;
        pub type BroadcasterManagerWP = u8;
        pub type UserExpressionSP = u8;
        pub type CommandObjectSP = [u64; 2usize];
        pub type ConnectionSP = u8;
        pub type CompUnitSP = u8;
        pub type DataBufferSP = u8;
        pub type WritableDataBufferSP = u8;
        pub type DataExtractorSP = [u64; 2usize];
        pub type DebuggerSP = [u64; 2usize];
        pub type DebuggerWP = u8;
        pub type DisassemblerSP = [u64; 2usize];
        pub type DynamicCheckerFunctionsUP = u8;
        pub type DynamicLoaderUP = u8;
        pub type EventSP = [u64; 2usize];
        pub type EventDataSP = u8;
        pub type EventDataStructuredDataSP = u8;
        pub type ExecutionContextRefSP = [u64; 2usize];
        pub type ExpressionVariableSP = u8;
        pub type FileUP = u8;
        pub type FileSP = [u64; 2usize];
        pub type FormatEntrySP = [u64; 2usize];
        pub type FunctionSP = u8;
        pub type FuncUnwindersSP = u8;
        pub type InlineFunctionInfoSP = u8;
        pub type InstructionSP = u8;
        pub type InstrumentationRuntimeSP = u8;
        pub type IOHandlerSP = u8;
        pub type IOObjectSP = u8;
        pub type IRExecutionUnitSP = u8;
        pub type JITLoaderSP = u8;
        pub type JITLoaderListUP = u8;
        pub type LanguageRuntimeSP = u8;
        pub type SystemRuntimeUP = u8;
        pub type ListenerSP = [u64; 2usize];
        pub type ListenerWP = u8;
        pub type MemoryHistorySP = u8;
        pub type MemoryRegionInfoUP = u64;
        pub type MemoryRegionInfoSP = u8;
        pub type ModuleSP = [u64; 2usize];
        pub type ModuleWP = u8;
        pub type ObjectFileSP = u8;
        pub type ObjectContainerSP = u8;
        pub type ObjectFileJITDelegateSP = u8;
        pub type ObjectFileJITDelegateWP = u8;
        pub type OperatingSystemUP = u8;
        pub type OperatingSystemInterfaceSP = u8;
        pub type OptionValueSP = u8;
        pub type OptionValueWP = u8;
        pub type OptionValuePropertiesSP = u8;
        pub type PlatformSP = [u64; 2usize];
        pub type ProcessSP = u8;
        pub type ProcessAttachInfoSP = [u64; 2usize];
        pub type ProcessLaunchInfoSP = u8;
        pub type ProcessWP = [u64; 2usize];
        pub type RegisterCheckpointSP = u8;
        pub type RegisterContextSP = u8;
        pub type RegisterTypeBuilderSP = u8;
        pub type RegularExpressionSP = u8;
        pub type QueueSP = u8;
        pub type QueueWP = u8;
        pub type QueueItemSP = [u64; 2usize];
        pub type REPLSP = u8;
        pub type RecognizedStackFrameSP = u8;
        pub type ScriptSummaryFormatSP = u8;
        pub type ScriptInterpreterSP = u8;
        pub type ScriptedMetadataSP = u8;
        pub type ScriptedPlatformInterfaceUP = u8;
        pub type ScriptedProcessInterfaceUP = u8;
        pub type ScriptedThreadInterfaceSP = u8;
        pub type ScriptedThreadPlanInterfaceSP = u8;
        pub type SectionSP = u8;
        pub type SectionListUP = u8;
        pub type SectionWP = [u64; 2usize];
        pub type SectionLoadListSP = u8;
        pub type SearchFilterSP = u8;
        pub type SourceManagerUP = u8;
        pub type StackFrameSP = u8;
        pub type StackFrameWP = u8;
        pub type StackFrameListSP = u8;
        pub type StackFrameRecognizerSP = u8;
        pub type StackFrameRecognizerManagerUP = u8;
        pub type StopInfoSP = u8;
        pub type StreamSP = u8;
        pub type StreamFileSP = u8;
        pub type StringTypeSummaryImplSP = u8;
        pub type StructuredDataImplUP = u64;
        pub type StructuredDataPluginSP = u8;
        pub type StructuredDataPluginWP = u8;
        pub type SymbolFileTypeSP = u8;
        pub type SymbolContextSpecifierSP = u8;
        pub type SymbolVendorUP = u8;
        pub type SyntheticChildrenSP = u8;
        pub type SyntheticChildrenFrontEndSP = u8;
        pub type TargetSP = [u64; 2usize];
        pub type TargetWP = u8;
        pub type ThreadSP = u8;
        pub type ThreadWP = u8;
        pub type ThreadCollectionSP = [u64; 2usize];
        pub type ThreadPlanSP = [u64; 2usize];
        pub type ThreadPostMortemTraceSP = u8;
        pub type ThreadPlanWP = [u64; 2usize];
        pub type ThreadPlanTracerSP = u8;
        pub type TraceSP = [u64; 2usize];
        pub type TraceExporterUP = u8;
        pub type TraceCursorSP = [u64; 2usize];
        pub type TypeSP = u8;
        pub type TypeWP = u8;
        pub type TypeCategoryImplSP = [u64; 2usize];
        pub type TypeImplSP = [u64; 2usize];
        pub type TypeMemberFunctionImplSP = [u64; 2usize];
        pub type TypeEnumMemberImplSP = [u64; 2usize];
        pub type TypeFilterImplSP = [u64; 2usize];
        pub type TypeSystemSP = u8;
        pub type TypeSystemClangSP = u8;
        pub type TypeSystemWP = u8;
        pub type TypeFormatImplSP = [u64; 2usize];
        pub type TypeNameSpecifierImplSP = [u64; 2usize];
        pub type TypeSummaryImplSP = [u64; 2usize];
        pub type TypeSummaryOptionsSP = u8;
        pub type ScriptedSyntheticChildrenSP = [u64; 2usize];
        pub type SupportFileSP = u8;
        pub type UnixSignalsSP = u8;
        pub type UnixSignalsWP = [u64; 2usize];
        pub type UnwindAssemblySP = u8;
        pub type UnwindPlanSP = u8;
        pub type ValueObjectSP = u8;
        pub type ValueSP = u8;
        pub type VariableSP = u8;
        pub type VariableListSP = u8;
        pub type ValueObjectListSP = u8;
        pub type WatchpointSP = u8;
        pub type WatchpointResourceSP = u8;
        pub type rwlock_t = [u64; 7usize];
        pub type process_t = u64;
        pub type thread_t = u64;
        pub type file_t = u32;
        pub type socket_t = u32;
        pub type thread_arg_t = u64;
        pub type thread_result_t = u64;
        pub type thread_func_t = u64;
        pub type pipe_t = u32;
        pub type LogOutputCallback = u64;
        pub type CommandOverrideCallback = u64;
        pub type ExpressionCancelCallback = u64;
        pub type ScriptObjectPtr = u64;
        pub type addr_t = u64;
        pub type callback_token_t = u32;
        pub type user_id_t = u64;
        pub type pid_t = u64;
        pub type tid_t = u64;
        pub type offset_t = u64;
        pub type break_id_t = u32;
        pub type watch_id_t = u32;
        pub type wp_resource_id_t = u32;
        pub type opaque_compiler_type_t = u64;
        pub type queue_id_t = u64;
        pub type cpu_id_t = u32;
        #[repr(C)]
        #[derive(Debug)]
        pub struct SBBreakpointNameImpl {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct SBEventList {
            _unused: [u8; 0],
        }
        pub type SBBreakpointHitCallback = u64;
        pub type SBDebuggerDestroyCallback = u64;
        pub type SBPlatformLocateModuleCallback = u64;
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBError {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBError10GetCStringEv"]
            pub fn SBError_GetCString(
                this: *const root::lldb::SBError,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBError5ClearEv"]
            pub fn SBError_Clear(this: *mut root::lldb::SBError);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBError4FailEv"]
            pub fn SBError_Fail(this: *const root::lldb::SBError) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBError7SuccessEv"]
            pub fn SBError_Success(this: *const root::lldb::SBError) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBError8GetErrorEv"]
            pub fn SBError_GetError(this: *const root::lldb::SBError) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBError7GetTypeEv"]
            pub fn SBError_GetType(this: *const root::lldb::SBError) -> root::lldb::ErrorType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBError8SetErrorEjNS_9ErrorTypeE"]
            pub fn SBError_SetError(
                this: *mut root::lldb::SBError,
                err: u32,
                type_: root::lldb::ErrorType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBError15SetErrorToErrnoEv"]
            pub fn SBError_SetErrorToErrno(this: *mut root::lldb::SBError);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBError22SetErrorToGenericErrorEv"]
            pub fn SBError_SetErrorToGenericError(this: *mut root::lldb::SBError);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBError14SetErrorStringEPKc"]
            pub fn SBError_SetErrorString(
                this: *mut root::lldb::SBError,
                err_str: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBError24SetErrorStringWithFormatEPKcz"]
            pub fn SBError_SetErrorStringWithFormat(
                this: *mut root::lldb::SBError,
                format: *const ::std::os::raw::c_char,
                ...
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBError7IsValidEv"]
            pub fn SBError_IsValid(this: *const root::lldb::SBError) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBError14GetDescriptionERNS_8SBStreamE"]
            pub fn SBError_GetDescription(
                this: *mut root::lldb::SBError,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBError3getEv"]
            pub fn SBError_get(this: *mut root::lldb::SBError) -> *mut root::lldb_private::Status;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBError3refEv"]
            pub fn SBError_ref(this: *mut root::lldb::SBError) -> *mut root::lldb_private::Status;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBError8SetErrorERKN12lldb_private6StatusE"]
            pub fn SBError_SetError1(
                this: *mut root::lldb::SBError,
                lldb_error: *const root::lldb_private::Status,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBErrorC1Ev"]
            pub fn SBError_SBError(this: *mut root::lldb::SBError);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBErrorC1ERKS0_"]
            pub fn SBError_SBError1(
                this: *mut root::lldb::SBError,
                rhs: *const root::lldb::SBError,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBErrorC1EPKc"]
            pub fn SBError_SBError2(
                this: *mut root::lldb::SBError,
                message: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBErrorC1ERKN12lldb_private6StatusE"]
            pub fn SBError_SBError3(
                this: *mut root::lldb::SBError,
                error: *const root::lldb_private::Status,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBErrorD1Ev"]
            pub fn SBError_SBError_destructor(this: *mut root::lldb::SBError);
        }
        impl SBError {
            #[inline]
            pub unsafe fn GetCString(&self) -> *const ::std::os::raw::c_char {
                SBError_GetCString(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBError_Clear(self)
            }
            #[inline]
            pub unsafe fn Fail(&self) -> bool {
                SBError_Fail(self)
            }
            #[inline]
            pub unsafe fn Success(&self) -> bool {
                SBError_Success(self)
            }
            #[inline]
            pub unsafe fn GetError(&self) -> u32 {
                SBError_GetError(self)
            }
            #[inline]
            pub unsafe fn GetType(&self) -> root::lldb::ErrorType {
                SBError_GetType(self)
            }
            #[inline]
            pub unsafe fn SetError(&mut self, err: u32, type_: root::lldb::ErrorType) {
                SBError_SetError(self, err, type_)
            }
            #[inline]
            pub unsafe fn SetErrorToErrno(&mut self) {
                SBError_SetErrorToErrno(self)
            }
            #[inline]
            pub unsafe fn SetErrorToGenericError(&mut self) {
                SBError_SetErrorToGenericError(self)
            }
            #[inline]
            pub unsafe fn SetErrorString(&mut self, err_str: *const ::std::os::raw::c_char) {
                SBError_SetErrorString(self, err_str)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBError_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBError_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn get(&mut self) -> *mut root::lldb_private::Status {
                SBError_get(self)
            }
            #[inline]
            pub unsafe fn ref_(&mut self) -> *mut root::lldb_private::Status {
                SBError_ref(self)
            }
            #[inline]
            pub unsafe fn SetError1(&mut self, lldb_error: *const root::lldb_private::Status) {
                SBError_SetError1(self, lldb_error)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBError_SBError(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBError) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBError_SBError1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(message: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBError_SBError2(__bindgen_tmp.as_mut_ptr(), message);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(error: *const root::lldb_private::Status) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBError_SBError3(__bindgen_tmp.as_mut_ptr(), error);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBError_SBError_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBData {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData18GetAddressByteSizeEv"]
            pub fn SBData_GetAddressByteSize(this: *mut root::lldb::SBData) -> u8;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData18SetAddressByteSizeEh"]
            pub fn SBData_SetAddressByteSize(this: *mut root::lldb::SBData, addr_byte_size: u8);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData5ClearEv"]
            pub fn SBData_Clear(this: *mut root::lldb::SBData);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData7IsValidEv"]
            pub fn SBData_IsValid(this: *mut root::lldb::SBData) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData11GetByteSizeEv"]
            pub fn SBData_GetByteSize(this: *mut root::lldb::SBData) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData12GetByteOrderEv"]
            pub fn SBData_GetByteOrder(this: *mut root::lldb::SBData) -> root::lldb::ByteOrder;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData12SetByteOrderENS_9ByteOrderE"]
            pub fn SBData_SetByteOrder(
                this: *mut root::lldb::SBData,
                endian: root::lldb::ByteOrder,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData8GetFloatERNS_7SBErrorEm"]
            pub fn SBData_GetFloat(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData9GetDoubleERNS_7SBErrorEm"]
            pub fn SBData_GetDouble(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> f64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData13GetLongDoubleERNS_7SBErrorEm"]
            pub fn SBData_GetLongDouble(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData10GetAddressERNS_7SBErrorEm"]
            pub fn SBData_GetAddress(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData15GetUnsignedInt8ERNS_7SBErrorEm"]
            pub fn SBData_GetUnsignedInt8(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> u8;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData16GetUnsignedInt16ERNS_7SBErrorEm"]
            pub fn SBData_GetUnsignedInt16(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> u16;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData16GetUnsignedInt32ERNS_7SBErrorEm"]
            pub fn SBData_GetUnsignedInt32(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData16GetUnsignedInt64ERNS_7SBErrorEm"]
            pub fn SBData_GetUnsignedInt64(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData13GetSignedInt8ERNS_7SBErrorEm"]
            pub fn SBData_GetSignedInt8(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> i8;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData14GetSignedInt16ERNS_7SBErrorEm"]
            pub fn SBData_GetSignedInt16(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> i16;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData14GetSignedInt32ERNS_7SBErrorEm"]
            pub fn SBData_GetSignedInt32(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> i32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData14GetSignedInt64ERNS_7SBErrorEm"]
            pub fn SBData_GetSignedInt64(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> i64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData9GetStringERNS_7SBErrorEm"]
            pub fn SBData_GetString(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData11ReadRawDataERNS_7SBErrorEmPvm"]
            pub fn SBData_ReadRawData(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
                buf: *mut ::std::os::raw::c_void,
                size: usize,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData14GetDescriptionERNS_8SBStreamEm"]
            pub fn SBData_GetDescription(
                this: *mut root::lldb::SBData,
                description: *mut root::lldb::SBStream,
                base_addr: root::lldb::addr_t,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData7SetDataERNS_7SBErrorEPKvmNS_9ByteOrderEh"]
            pub fn SBData_SetData(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                buf: *const ::std::os::raw::c_void,
                size: usize,
                endian: root::lldb::ByteOrder,
                addr_size: u8,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData20SetDataWithOwnershipERNS_7SBErrorEPKvmNS_9ByteOrderEh"]
            pub fn SBData_SetDataWithOwnership(
                this: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
                buf: *const ::std::os::raw::c_void,
                size: usize,
                endian: root::lldb::ByteOrder,
                addr_size: u8,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData6AppendERKS0_"]
            pub fn SBData_Append(
                this: *mut root::lldb::SBData,
                rhs: *const root::lldb::SBData,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData21CreateDataFromCStringENS_9ByteOrderEjPKc"]
            pub fn SBData_CreateDataFromCString(
                endian: root::lldb::ByteOrder,
                addr_byte_size: u32,
                data: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData25CreateDataFromUInt64ArrayENS_9ByteOrderEjPmm"]
            pub fn SBData_CreateDataFromUInt64Array(
                endian: root::lldb::ByteOrder,
                addr_byte_size: u32,
                array: *mut u64,
                array_len: usize,
            ) -> root::lldb::SBData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData25CreateDataFromUInt32ArrayENS_9ByteOrderEjPjm"]
            pub fn SBData_CreateDataFromUInt32Array(
                endian: root::lldb::ByteOrder,
                addr_byte_size: u32,
                array: *mut u32,
                array_len: usize,
            ) -> root::lldb::SBData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData25CreateDataFromSInt64ArrayENS_9ByteOrderEjPlm"]
            pub fn SBData_CreateDataFromSInt64Array(
                endian: root::lldb::ByteOrder,
                addr_byte_size: u32,
                array: *mut i64,
                array_len: usize,
            ) -> root::lldb::SBData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData25CreateDataFromSInt32ArrayENS_9ByteOrderEjPim"]
            pub fn SBData_CreateDataFromSInt32Array(
                endian: root::lldb::ByteOrder,
                addr_byte_size: u32,
                array: *mut i32,
                array_len: usize,
            ) -> root::lldb::SBData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData25CreateDataFromDoubleArrayENS_9ByteOrderEjPdm"]
            pub fn SBData_CreateDataFromDoubleArray(
                endian: root::lldb::ByteOrder,
                addr_byte_size: u32,
                array: *mut f64,
                array_len: usize,
            ) -> root::lldb::SBData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData18SetDataFromCStringEPKc"]
            pub fn SBData_SetDataFromCString(
                this: *mut root::lldb::SBData,
                data: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData22SetDataFromUInt64ArrayEPmm"]
            pub fn SBData_SetDataFromUInt64Array(
                this: *mut root::lldb::SBData,
                array: *mut u64,
                array_len: usize,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData22SetDataFromUInt32ArrayEPjm"]
            pub fn SBData_SetDataFromUInt32Array(
                this: *mut root::lldb::SBData,
                array: *mut u32,
                array_len: usize,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData22SetDataFromSInt64ArrayEPlm"]
            pub fn SBData_SetDataFromSInt64Array(
                this: *mut root::lldb::SBData,
                array: *mut i64,
                array_len: usize,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData22SetDataFromSInt32ArrayEPim"]
            pub fn SBData_SetDataFromSInt32Array(
                this: *mut root::lldb::SBData,
                array: *mut i32,
                array_len: usize,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData22SetDataFromDoubleArrayEPdm"]
            pub fn SBData_SetDataFromDoubleArray(
                this: *mut root::lldb::SBData,
                array: *mut f64,
                array_len: usize,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb6SBData3getEv"]
            pub fn SBData_get(
                this: *const root::lldb::SBData,
            ) -> *mut root::lldb_private::DataExtractor;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBData9SetOpaqueERKSt10shared_ptrIN12lldb_private13DataExtractorEE"]
            pub fn SBData_SetOpaque(
                this: *mut root::lldb::SBData,
                data_sp: *const root::lldb::DataExtractorSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBDataC1Ev"]
            pub fn SBData_SBData(this: *mut root::lldb::SBData);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBDataC1ERKS0_"]
            pub fn SBData_SBData1(this: *mut root::lldb::SBData, rhs: *const root::lldb::SBData);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBDataC1ERKSt10shared_ptrIN12lldb_private13DataExtractorEE"]
            pub fn SBData_SBData2(
                this: *mut root::lldb::SBData,
                data_sp: *const root::lldb::DataExtractorSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBDataD1Ev"]
            pub fn SBData_SBData_destructor(this: *mut root::lldb::SBData);
        }
        impl SBData {
            #[inline]
            pub unsafe fn GetAddressByteSize(&mut self) -> u8 {
                SBData_GetAddressByteSize(self)
            }
            #[inline]
            pub unsafe fn SetAddressByteSize(&mut self, addr_byte_size: u8) {
                SBData_SetAddressByteSize(self, addr_byte_size)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBData_Clear(self)
            }
            #[inline]
            pub unsafe fn IsValid(&mut self) -> bool {
                SBData_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetByteSize(&mut self) -> usize {
                SBData_GetByteSize(self)
            }
            #[inline]
            pub unsafe fn GetByteOrder(&mut self) -> root::lldb::ByteOrder {
                SBData_GetByteOrder(self)
            }
            #[inline]
            pub unsafe fn SetByteOrder(&mut self, endian: root::lldb::ByteOrder) {
                SBData_SetByteOrder(self, endian)
            }
            #[inline]
            pub unsafe fn GetFloat(
                &mut self,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> f32 {
                SBData_GetFloat(self, error, offset)
            }
            #[inline]
            pub unsafe fn GetDouble(
                &mut self,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> f64 {
                SBData_GetDouble(self, error, offset)
            }
            #[inline]
            pub unsafe fn GetLongDouble(
                &mut self,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> u128 {
                SBData_GetLongDouble(self, error, offset)
            }
            #[inline]
            pub unsafe fn GetAddress(
                &mut self,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> root::lldb::addr_t {
                SBData_GetAddress(self, error, offset)
            }
            #[inline]
            pub unsafe fn GetUnsignedInt8(
                &mut self,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> u8 {
                SBData_GetUnsignedInt8(self, error, offset)
            }
            #[inline]
            pub unsafe fn GetUnsignedInt16(
                &mut self,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> u16 {
                SBData_GetUnsignedInt16(self, error, offset)
            }
            #[inline]
            pub unsafe fn GetUnsignedInt32(
                &mut self,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> u32 {
                SBData_GetUnsignedInt32(self, error, offset)
            }
            #[inline]
            pub unsafe fn GetUnsignedInt64(
                &mut self,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> u64 {
                SBData_GetUnsignedInt64(self, error, offset)
            }
            #[inline]
            pub unsafe fn GetSignedInt8(
                &mut self,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> i8 {
                SBData_GetSignedInt8(self, error, offset)
            }
            #[inline]
            pub unsafe fn GetSignedInt16(
                &mut self,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> i16 {
                SBData_GetSignedInt16(self, error, offset)
            }
            #[inline]
            pub unsafe fn GetSignedInt32(
                &mut self,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> i32 {
                SBData_GetSignedInt32(self, error, offset)
            }
            #[inline]
            pub unsafe fn GetSignedInt64(
                &mut self,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> i64 {
                SBData_GetSignedInt64(self, error, offset)
            }
            #[inline]
            pub unsafe fn GetString(
                &mut self,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
            ) -> *const ::std::os::raw::c_char {
                SBData_GetString(self, error, offset)
            }
            #[inline]
            pub unsafe fn ReadRawData(
                &mut self,
                error: *mut root::lldb::SBError,
                offset: root::lldb::offset_t,
                buf: *mut ::std::os::raw::c_void,
                size: usize,
            ) -> usize {
                SBData_ReadRawData(self, error, offset, buf, size)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                base_addr: root::lldb::addr_t,
            ) -> bool {
                SBData_GetDescription(self, description, base_addr)
            }
            #[inline]
            pub unsafe fn SetData(
                &mut self,
                error: *mut root::lldb::SBError,
                buf: *const ::std::os::raw::c_void,
                size: usize,
                endian: root::lldb::ByteOrder,
                addr_size: u8,
            ) {
                SBData_SetData(self, error, buf, size, endian, addr_size)
            }
            #[inline]
            pub unsafe fn SetDataWithOwnership(
                &mut self,
                error: *mut root::lldb::SBError,
                buf: *const ::std::os::raw::c_void,
                size: usize,
                endian: root::lldb::ByteOrder,
                addr_size: u8,
            ) {
                SBData_SetDataWithOwnership(self, error, buf, size, endian, addr_size)
            }
            #[inline]
            pub unsafe fn Append(&mut self, rhs: *const root::lldb::SBData) -> bool {
                SBData_Append(self, rhs)
            }
            #[inline]
            pub unsafe fn CreateDataFromCString(
                endian: root::lldb::ByteOrder,
                addr_byte_size: u32,
                data: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBData {
                SBData_CreateDataFromCString(endian, addr_byte_size, data)
            }
            #[inline]
            pub unsafe fn CreateDataFromUInt64Array(
                endian: root::lldb::ByteOrder,
                addr_byte_size: u32,
                array: *mut u64,
                array_len: usize,
            ) -> root::lldb::SBData {
                SBData_CreateDataFromUInt64Array(endian, addr_byte_size, array, array_len)
            }
            #[inline]
            pub unsafe fn CreateDataFromUInt32Array(
                endian: root::lldb::ByteOrder,
                addr_byte_size: u32,
                array: *mut u32,
                array_len: usize,
            ) -> root::lldb::SBData {
                SBData_CreateDataFromUInt32Array(endian, addr_byte_size, array, array_len)
            }
            #[inline]
            pub unsafe fn CreateDataFromSInt64Array(
                endian: root::lldb::ByteOrder,
                addr_byte_size: u32,
                array: *mut i64,
                array_len: usize,
            ) -> root::lldb::SBData {
                SBData_CreateDataFromSInt64Array(endian, addr_byte_size, array, array_len)
            }
            #[inline]
            pub unsafe fn CreateDataFromSInt32Array(
                endian: root::lldb::ByteOrder,
                addr_byte_size: u32,
                array: *mut i32,
                array_len: usize,
            ) -> root::lldb::SBData {
                SBData_CreateDataFromSInt32Array(endian, addr_byte_size, array, array_len)
            }
            #[inline]
            pub unsafe fn CreateDataFromDoubleArray(
                endian: root::lldb::ByteOrder,
                addr_byte_size: u32,
                array: *mut f64,
                array_len: usize,
            ) -> root::lldb::SBData {
                SBData_CreateDataFromDoubleArray(endian, addr_byte_size, array, array_len)
            }
            #[inline]
            pub unsafe fn SetDataFromCString(
                &mut self,
                data: *const ::std::os::raw::c_char,
            ) -> bool {
                SBData_SetDataFromCString(self, data)
            }
            #[inline]
            pub unsafe fn SetDataFromUInt64Array(
                &mut self,
                array: *mut u64,
                array_len: usize,
            ) -> bool {
                SBData_SetDataFromUInt64Array(self, array, array_len)
            }
            #[inline]
            pub unsafe fn SetDataFromUInt32Array(
                &mut self,
                array: *mut u32,
                array_len: usize,
            ) -> bool {
                SBData_SetDataFromUInt32Array(self, array, array_len)
            }
            #[inline]
            pub unsafe fn SetDataFromSInt64Array(
                &mut self,
                array: *mut i64,
                array_len: usize,
            ) -> bool {
                SBData_SetDataFromSInt64Array(self, array, array_len)
            }
            #[inline]
            pub unsafe fn SetDataFromSInt32Array(
                &mut self,
                array: *mut i32,
                array_len: usize,
            ) -> bool {
                SBData_SetDataFromSInt32Array(self, array, array_len)
            }
            #[inline]
            pub unsafe fn SetDataFromDoubleArray(
                &mut self,
                array: *mut f64,
                array_len: usize,
            ) -> bool {
                SBData_SetDataFromDoubleArray(self, array, array_len)
            }
            #[inline]
            pub unsafe fn get(&self) -> *mut root::lldb_private::DataExtractor {
                SBData_get(self)
            }
            #[inline]
            pub unsafe fn SetOpaque(&mut self, data_sp: *const root::lldb::DataExtractorSP) {
                SBData_SetOpaque(self, data_sp)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBData_SBData(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBData) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBData_SBData1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(data_sp: *const root::lldb::DataExtractorSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBData_SBData2(__bindgen_tmp.as_mut_ptr(), data_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBData_SBData_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBSection {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBSection7IsValidEv"]
            pub fn SBSection_IsValid(this: *const root::lldb::SBSection) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection7GetNameEv"]
            pub fn SBSection_GetName(
                this: *mut root::lldb::SBSection,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection9GetParentEv"]
            pub fn SBSection_GetParent(this: *mut root::lldb::SBSection) -> root::lldb::SBSection;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection14FindSubSectionEPKc"]
            pub fn SBSection_FindSubSection(
                this: *mut root::lldb::SBSection,
                sect_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBSection;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection17GetNumSubSectionsEv"]
            pub fn SBSection_GetNumSubSections(this: *mut root::lldb::SBSection) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection20GetSubSectionAtIndexEm"]
            pub fn SBSection_GetSubSectionAtIndex(
                this: *mut root::lldb::SBSection,
                idx: usize,
            ) -> root::lldb::SBSection;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection14GetFileAddressEv"]
            pub fn SBSection_GetFileAddress(this: *mut root::lldb::SBSection)
                -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection14GetLoadAddressERNS_8SBTargetE"]
            pub fn SBSection_GetLoadAddress(
                this: *mut root::lldb::SBSection,
                target: *mut root::lldb::SBTarget,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection11GetByteSizeEv"]
            pub fn SBSection_GetByteSize(this: *mut root::lldb::SBSection) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection13GetFileOffsetEv"]
            pub fn SBSection_GetFileOffset(this: *mut root::lldb::SBSection) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection15GetFileByteSizeEv"]
            pub fn SBSection_GetFileByteSize(this: *mut root::lldb::SBSection) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection14GetSectionDataEv"]
            pub fn SBSection_GetSectionData(this: *mut root::lldb::SBSection)
                -> root::lldb::SBData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection14GetSectionDataEmm"]
            pub fn SBSection_GetSectionData1(
                this: *mut root::lldb::SBSection,
                offset: u64,
                size: u64,
            ) -> root::lldb::SBData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection14GetSectionTypeEv"]
            pub fn SBSection_GetSectionType(
                this: *mut root::lldb::SBSection,
            ) -> root::lldb::SectionType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBSection14GetPermissionsEv"]
            pub fn SBSection_GetPermissions(this: *const root::lldb::SBSection) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection17GetTargetByteSizeEv"]
            pub fn SBSection_GetTargetByteSize(this: *mut root::lldb::SBSection) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection12GetAlignmentEv"]
            pub fn SBSection_GetAlignment(this: *mut root::lldb::SBSection) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSection14GetDescriptionERNS_8SBStreamE"]
            pub fn SBSection_GetDescription(
                this: *mut root::lldb::SBSection,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSectionC1Ev"]
            pub fn SBSection_SBSection(this: *mut root::lldb::SBSection);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSectionC1ERKS0_"]
            pub fn SBSection_SBSection1(
                this: *mut root::lldb::SBSection,
                rhs: *const root::lldb::SBSection,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBSectionD1Ev"]
            pub fn SBSection_SBSection_destructor(this: *mut root::lldb::SBSection);
        }
        impl SBSection {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBSection_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetName(&mut self) -> *const ::std::os::raw::c_char {
                SBSection_GetName(self)
            }
            #[inline]
            pub unsafe fn GetParent(&mut self) -> root::lldb::SBSection {
                SBSection_GetParent(self)
            }
            #[inline]
            pub unsafe fn FindSubSection(
                &mut self,
                sect_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBSection {
                SBSection_FindSubSection(self, sect_name)
            }
            #[inline]
            pub unsafe fn GetNumSubSections(&mut self) -> usize {
                SBSection_GetNumSubSections(self)
            }
            #[inline]
            pub unsafe fn GetSubSectionAtIndex(&mut self, idx: usize) -> root::lldb::SBSection {
                SBSection_GetSubSectionAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetFileAddress(&mut self) -> root::lldb::addr_t {
                SBSection_GetFileAddress(self)
            }
            #[inline]
            pub unsafe fn GetLoadAddress(
                &mut self,
                target: *mut root::lldb::SBTarget,
            ) -> root::lldb::addr_t {
                SBSection_GetLoadAddress(self, target)
            }
            #[inline]
            pub unsafe fn GetByteSize(&mut self) -> root::lldb::addr_t {
                SBSection_GetByteSize(self)
            }
            #[inline]
            pub unsafe fn GetFileOffset(&mut self) -> u64 {
                SBSection_GetFileOffset(self)
            }
            #[inline]
            pub unsafe fn GetFileByteSize(&mut self) -> u64 {
                SBSection_GetFileByteSize(self)
            }
            #[inline]
            pub unsafe fn GetSectionData(&mut self) -> root::lldb::SBData {
                SBSection_GetSectionData(self)
            }
            #[inline]
            pub unsafe fn GetSectionData1(&mut self, offset: u64, size: u64) -> root::lldb::SBData {
                SBSection_GetSectionData1(self, offset, size)
            }
            #[inline]
            pub unsafe fn GetSectionType(&mut self) -> root::lldb::SectionType {
                SBSection_GetSectionType(self)
            }
            #[inline]
            pub unsafe fn GetPermissions(&self) -> u32 {
                SBSection_GetPermissions(self)
            }
            #[inline]
            pub unsafe fn GetTargetByteSize(&mut self) -> u32 {
                SBSection_GetTargetByteSize(self)
            }
            #[inline]
            pub unsafe fn GetAlignment(&mut self) -> u32 {
                SBSection_GetAlignment(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBSection_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBSection_SBSection(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBSection) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBSection_SBSection1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBSection_SBSection_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBAddressRange {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBAddressRange5ClearEv"]
            pub fn SBAddressRange_Clear(this: *mut root::lldb::SBAddressRange);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb14SBAddressRange7IsValidEv"]
            pub fn SBAddressRange_IsValid(this: *const root::lldb::SBAddressRange) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb14SBAddressRange14GetBaseAddressEv"]
            pub fn SBAddressRange_GetBaseAddress(
                this: *const root::lldb::SBAddressRange,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb14SBAddressRange11GetByteSizeEv"]
            pub fn SBAddressRange_GetByteSize(
                this: *const root::lldb::SBAddressRange,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBAddressRange14GetDescriptionERNS_8SBStreamENS_8SBTargetE"]
            pub fn SBAddressRange_GetDescription(
                this: *mut root::lldb::SBAddressRange,
                description: *mut root::lldb::SBStream,
                target: root::lldb::SBTarget,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBAddressRangeC1Ev"]
            pub fn SBAddressRange_SBAddressRange(this: *mut root::lldb::SBAddressRange);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBAddressRangeC1ERKS0_"]
            pub fn SBAddressRange_SBAddressRange1(
                this: *mut root::lldb::SBAddressRange,
                rhs: *const root::lldb::SBAddressRange,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBAddressRangeC1ENS_9SBAddressEm"]
            pub fn SBAddressRange_SBAddressRange2(
                this: *mut root::lldb::SBAddressRange,
                addr: root::lldb::SBAddress,
                byte_size: root::lldb::addr_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBAddressRangeD1Ev"]
            pub fn SBAddressRange_SBAddressRange_destructor(this: *mut root::lldb::SBAddressRange);
        }
        impl SBAddressRange {
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBAddressRange_Clear(self)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBAddressRange_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetBaseAddress(&self) -> root::lldb::SBAddress {
                SBAddressRange_GetBaseAddress(self)
            }
            #[inline]
            pub unsafe fn GetByteSize(&self) -> root::lldb::addr_t {
                SBAddressRange_GetByteSize(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                target: root::lldb::SBTarget,
            ) -> bool {
                SBAddressRange_GetDescription(self, description, target)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAddressRange_SBAddressRange(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBAddressRange) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAddressRange_SBAddressRange1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(addr: root::lldb::SBAddress, byte_size: root::lldb::addr_t) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAddressRange_SBAddressRange2(__bindgen_tmp.as_mut_ptr(), addr, byte_size);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBAddressRange_SBAddressRange_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBAddressRangeList {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBAddressRangeList7GetSizeEv"]
            pub fn SBAddressRangeList_GetSize(this: *const root::lldb::SBAddressRangeList) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBAddressRangeList5ClearEv"]
            pub fn SBAddressRangeList_Clear(this: *mut root::lldb::SBAddressRangeList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBAddressRangeList22GetAddressRangeAtIndexEm"]
            pub fn SBAddressRangeList_GetAddressRangeAtIndex(
                this: *mut root::lldb::SBAddressRangeList,
                idx: u64,
            ) -> root::lldb::SBAddressRange;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBAddressRangeList6AppendERKNS_14SBAddressRangeE"]
            pub fn SBAddressRangeList_Append(
                this: *mut root::lldb::SBAddressRangeList,
                addr_range: *const root::lldb::SBAddressRange,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBAddressRangeList6AppendERKS0_"]
            pub fn SBAddressRangeList_Append1(
                this: *mut root::lldb::SBAddressRangeList,
                addr_range_list: *const root::lldb::SBAddressRangeList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBAddressRangeList14GetDescriptionERNS_8SBStreamERKNS_8SBTargetE"]
            pub fn SBAddressRangeList_GetDescription(
                this: *mut root::lldb::SBAddressRangeList,
                description: *mut root::lldb::SBStream,
                target: *const root::lldb::SBTarget,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBAddressRangeListC1Ev"]
            pub fn SBAddressRangeList_SBAddressRangeList(this: *mut root::lldb::SBAddressRangeList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBAddressRangeListC1ERKS0_"]
            pub fn SBAddressRangeList_SBAddressRangeList1(
                this: *mut root::lldb::SBAddressRangeList,
                rhs: *const root::lldb::SBAddressRangeList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBAddressRangeListD1Ev"]
            pub fn SBAddressRangeList_SBAddressRangeList_destructor(
                this: *mut root::lldb::SBAddressRangeList,
            );
        }
        impl SBAddressRangeList {
            #[inline]
            pub unsafe fn GetSize(&self) -> u32 {
                SBAddressRangeList_GetSize(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBAddressRangeList_Clear(self)
            }
            #[inline]
            pub unsafe fn GetAddressRangeAtIndex(
                &mut self,
                idx: u64,
            ) -> root::lldb::SBAddressRange {
                SBAddressRangeList_GetAddressRangeAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn Append(&mut self, addr_range: *const root::lldb::SBAddressRange) {
                SBAddressRangeList_Append(self, addr_range)
            }
            #[inline]
            pub unsafe fn Append1(
                &mut self,
                addr_range_list: *const root::lldb::SBAddressRangeList,
            ) {
                SBAddressRangeList_Append1(self, addr_range_list)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                target: *const root::lldb::SBTarget,
            ) -> bool {
                SBAddressRangeList_GetDescription(self, description, target)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAddressRangeList_SBAddressRangeList(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBAddressRangeList) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAddressRangeList_SBAddressRangeList1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBAddressRangeList_SBAddressRangeList_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBValueList {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb11SBValueList7IsValidEv"]
            pub fn SBValueList_IsValid(this: *const root::lldb::SBValueList) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBValueList5ClearEv"]
            pub fn SBValueList_Clear(this: *mut root::lldb::SBValueList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBValueList6AppendERKNS_7SBValueE"]
            pub fn SBValueList_Append(
                this: *mut root::lldb::SBValueList,
                val_obj: *const root::lldb::SBValue,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBValueList6AppendERKS0_"]
            pub fn SBValueList_Append1(
                this: *mut root::lldb::SBValueList,
                value_list: *const root::lldb::SBValueList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb11SBValueList7GetSizeEv"]
            pub fn SBValueList_GetSize(this: *const root::lldb::SBValueList) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb11SBValueList15GetValueAtIndexEj"]
            pub fn SBValueList_GetValueAtIndex(
                this: *const root::lldb::SBValueList,
                idx: u32,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb11SBValueList19GetFirstValueByNameEPKc"]
            pub fn SBValueList_GetFirstValueByName(
                this: *const root::lldb::SBValueList,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBValueList20FindValueObjectByUIDEm"]
            pub fn SBValueList_FindValueObjectByUID(
                this: *mut root::lldb::SBValueList,
                uid: root::lldb::user_id_t,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBValueList8GetErrorEv"]
            pub fn SBValueList_GetError(this: *mut root::lldb::SBValueList) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBValueList10opaque_ptrEv"]
            pub fn SBValueList_opaque_ptr(
                this: *mut root::lldb::SBValueList,
            ) -> *mut ::std::os::raw::c_void;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBValueListC1Ev"]
            pub fn SBValueList_SBValueList(this: *mut root::lldb::SBValueList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBValueListC1ERKS0_"]
            pub fn SBValueList_SBValueList1(
                this: *mut root::lldb::SBValueList,
                rhs: *const root::lldb::SBValueList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBValueListD1Ev"]
            pub fn SBValueList_SBValueList_destructor(this: *mut root::lldb::SBValueList);
        }
        impl SBValueList {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBValueList_IsValid(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBValueList_Clear(self)
            }
            #[inline]
            pub unsafe fn Append(&mut self, val_obj: *const root::lldb::SBValue) {
                SBValueList_Append(self, val_obj)
            }
            #[inline]
            pub unsafe fn Append1(&mut self, value_list: *const root::lldb::SBValueList) {
                SBValueList_Append1(self, value_list)
            }
            #[inline]
            pub unsafe fn GetSize(&self) -> u32 {
                SBValueList_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetValueAtIndex(&self, idx: u32) -> root::lldb::SBValue {
                SBValueList_GetValueAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetFirstValueByName(
                &self,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBValueList_GetFirstValueByName(self, name)
            }
            #[inline]
            pub unsafe fn FindValueObjectByUID(
                &mut self,
                uid: root::lldb::user_id_t,
            ) -> root::lldb::SBValue {
                SBValueList_FindValueObjectByUID(self, uid)
            }
            #[inline]
            pub unsafe fn GetError(&mut self) -> root::lldb::SBError {
                SBValueList_GetError(self)
            }
            #[inline]
            pub unsafe fn opaque_ptr(&mut self) -> *mut ::std::os::raw::c_void {
                SBValueList_opaque_ptr(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBValueList_SBValueList(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBValueList) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBValueList_SBValueList1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBValueList_SBValueList_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBFrame {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame7IsEqualERKS0_"]
            pub fn SBFrame_IsEqual(
                this: *const root::lldb::SBFrame,
                that: *const root::lldb::SBFrame,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame7IsValidEv"]
            pub fn SBFrame_IsValid(this: *const root::lldb::SBFrame) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame10GetFrameIDEv"]
            pub fn SBFrame_GetFrameID(this: *const root::lldb::SBFrame) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame6GetCFAEv"]
            pub fn SBFrame_GetCFA(this: *const root::lldb::SBFrame) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame5GetPCEv"]
            pub fn SBFrame_GetPC(this: *const root::lldb::SBFrame) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame5SetPCEm"]
            pub fn SBFrame_SetPC(
                this: *mut root::lldb::SBFrame,
                new_pc: root::lldb::addr_t,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame5GetSPEv"]
            pub fn SBFrame_GetSP(this: *const root::lldb::SBFrame) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame5GetFPEv"]
            pub fn SBFrame_GetFP(this: *const root::lldb::SBFrame) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame12GetPCAddressEv"]
            pub fn SBFrame_GetPCAddress(this: *const root::lldb::SBFrame) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame16GetSymbolContextEj"]
            pub fn SBFrame_GetSymbolContext(
                this: *const root::lldb::SBFrame,
                resolve_scope: u32,
            ) -> root::lldb::SBSymbolContext;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame9GetModuleEv"]
            pub fn SBFrame_GetModule(this: *const root::lldb::SBFrame) -> root::lldb::SBModule;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame14GetCompileUnitEv"]
            pub fn SBFrame_GetCompileUnit(
                this: *const root::lldb::SBFrame,
            ) -> root::lldb::SBCompileUnit;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame11GetFunctionEv"]
            pub fn SBFrame_GetFunction(this: *const root::lldb::SBFrame) -> root::lldb::SBFunction;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame9GetSymbolEv"]
            pub fn SBFrame_GetSymbol(this: *const root::lldb::SBFrame) -> root::lldb::SBSymbol;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame8GetBlockEv"]
            pub fn SBFrame_GetBlock(this: *const root::lldb::SBFrame) -> root::lldb::SBBlock;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame15GetFunctionNameEv"]
            pub fn SBFrame_GetFunctionName(
                this: *mut root::lldb::SBFrame,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame22GetDisplayFunctionNameEv"]
            pub fn SBFrame_GetDisplayFunctionName(
                this: *mut root::lldb::SBFrame,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame15GetFunctionNameEv"]
            pub fn SBFrame_GetFunctionName1(
                this: *const root::lldb::SBFrame,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame13GuessLanguageEv"]
            pub fn SBFrame_GuessLanguage(
                this: *const root::lldb::SBFrame,
            ) -> root::lldb::LanguageType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame9IsInlinedEv"]
            pub fn SBFrame_IsInlined(this: *mut root::lldb::SBFrame) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame9IsInlinedEv"]
            pub fn SBFrame_IsInlined1(this: *const root::lldb::SBFrame) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame12IsArtificialEv"]
            pub fn SBFrame_IsArtificial(this: *mut root::lldb::SBFrame) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame12IsArtificialEv"]
            pub fn SBFrame_IsArtificial1(this: *const root::lldb::SBFrame) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame18EvaluateExpressionEPKc"]
            pub fn SBFrame_EvaluateExpression(
                this: *mut root::lldb::SBFrame,
                expr: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame18EvaluateExpressionEPKcNS_16DynamicValueTypeE"]
            pub fn SBFrame_EvaluateExpression1(
                this: *mut root::lldb::SBFrame,
                expr: *const ::std::os::raw::c_char,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame18EvaluateExpressionEPKcNS_16DynamicValueTypeEb"]
            pub fn SBFrame_EvaluateExpression2(
                this: *mut root::lldb::SBFrame,
                expr: *const ::std::os::raw::c_char,
                use_dynamic: root::lldb::DynamicValueType,
                unwind_on_error: bool,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame18EvaluateExpressionEPKcRKNS_19SBExpressionOptionsE"]
            pub fn SBFrame_EvaluateExpression3(
                this: *mut root::lldb::SBFrame,
                expr: *const ::std::os::raw::c_char,
                options: *const root::lldb::SBExpressionOptions,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame13GetFrameBlockEv"]
            pub fn SBFrame_GetFrameBlock(this: *const root::lldb::SBFrame) -> root::lldb::SBBlock;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame12GetLineEntryEv"]
            pub fn SBFrame_GetLineEntry(
                this: *const root::lldb::SBFrame,
            ) -> root::lldb::SBLineEntry;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame9GetThreadEv"]
            pub fn SBFrame_GetThread(this: *const root::lldb::SBFrame) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame11DisassembleEv"]
            pub fn SBFrame_Disassemble(
                this: *const root::lldb::SBFrame,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame5ClearEv"]
            pub fn SBFrame_Clear(this: *mut root::lldb::SBFrame);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame12GetVariablesEbbbb"]
            pub fn SBFrame_GetVariables(
                this: *mut root::lldb::SBFrame,
                arguments: bool,
                locals: bool,
                statics: bool,
                in_scope_only: bool,
            ) -> root::lldb::SBValueList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame12GetVariablesEbbbbNS_16DynamicValueTypeE"]
            pub fn SBFrame_GetVariables1(
                this: *mut root::lldb::SBFrame,
                arguments: bool,
                locals: bool,
                statics: bool,
                in_scope_only: bool,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValueList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame12GetVariablesERKNS_18SBVariablesOptionsE"]
            pub fn SBFrame_GetVariables2(
                this: *mut root::lldb::SBFrame,
                options: *const root::lldb::SBVariablesOptions,
            ) -> root::lldb::SBValueList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame12GetRegistersEv"]
            pub fn SBFrame_GetRegisters(this: *mut root::lldb::SBFrame) -> root::lldb::SBValueList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame12FindRegisterEPKc"]
            pub fn SBFrame_FindRegister(
                this: *mut root::lldb::SBFrame,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame12FindVariableEPKc"]
            pub fn SBFrame_FindVariable(
                this: *mut root::lldb::SBFrame,
                var_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame12FindVariableEPKcNS_16DynamicValueTypeE"]
            pub fn SBFrame_FindVariable1(
                this: *mut root::lldb::SBFrame,
                var_name: *const ::std::os::raw::c_char,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame23GetValueForVariablePathEPKcNS_16DynamicValueTypeE"]
            pub fn SBFrame_GetValueForVariablePath(
                this: *mut root::lldb::SBFrame,
                var_expr_cstr: *const ::std::os::raw::c_char,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame23GetValueForVariablePathEPKc"]
            pub fn SBFrame_GetValueForVariablePath1(
                this: *mut root::lldb::SBFrame,
                var_path: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame9FindValueEPKcNS_9ValueTypeE"]
            pub fn SBFrame_FindValue(
                this: *mut root::lldb::SBFrame,
                name: *const ::std::os::raw::c_char,
                value_type: root::lldb::ValueType,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame9FindValueEPKcNS_9ValueTypeENS_16DynamicValueTypeE"]
            pub fn SBFrame_FindValue1(
                this: *mut root::lldb::SBFrame,
                name: *const ::std::os::raw::c_char,
                value_type: root::lldb::ValueType,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame14GetDescriptionERNS_8SBStreamE"]
            pub fn SBFrame_GetDescription(
                this: *mut root::lldb::SBFrame,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame24GetDescriptionWithFormatERKNS_8SBFormatERNS_8SBStreamE"]
            pub fn SBFrame_GetDescriptionWithFormat(
                this: *mut root::lldb::SBFrame,
                format: *const root::lldb::SBFormat,
                output: *mut root::lldb::SBStream,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBFrame10GetFrameSPEv"]
            pub fn SBFrame_GetFrameSP(this: *const root::lldb::SBFrame)
                -> root::lldb::StackFrameSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrame10SetFrameSPERKSt10shared_ptrIN12lldb_private10StackFrameEE"]
            pub fn SBFrame_SetFrameSP(
                this: *mut root::lldb::SBFrame,
                lldb_object_sp: *const root::lldb::StackFrameSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrameC1Ev"]
            pub fn SBFrame_SBFrame(this: *mut root::lldb::SBFrame);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrameC1ERKS0_"]
            pub fn SBFrame_SBFrame1(
                this: *mut root::lldb::SBFrame,
                rhs: *const root::lldb::SBFrame,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrameC1ERKSt10shared_ptrIN12lldb_private10StackFrameEE"]
            pub fn SBFrame_SBFrame2(
                this: *mut root::lldb::SBFrame,
                lldb_object_sp: *const root::lldb::StackFrameSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBFrameD1Ev"]
            pub fn SBFrame_SBFrame_destructor(this: *mut root::lldb::SBFrame);
        }
        impl SBFrame {
            #[inline]
            pub unsafe fn IsEqual(&self, that: *const root::lldb::SBFrame) -> bool {
                SBFrame_IsEqual(self, that)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBFrame_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetFrameID(&self) -> u32 {
                SBFrame_GetFrameID(self)
            }
            #[inline]
            pub unsafe fn GetCFA(&self) -> root::lldb::addr_t {
                SBFrame_GetCFA(self)
            }
            #[inline]
            pub unsafe fn GetPC(&self) -> root::lldb::addr_t {
                SBFrame_GetPC(self)
            }
            #[inline]
            pub unsafe fn SetPC(&mut self, new_pc: root::lldb::addr_t) -> bool {
                SBFrame_SetPC(self, new_pc)
            }
            #[inline]
            pub unsafe fn GetSP(&self) -> root::lldb::addr_t {
                SBFrame_GetSP(self)
            }
            #[inline]
            pub unsafe fn GetFP(&self) -> root::lldb::addr_t {
                SBFrame_GetFP(self)
            }
            #[inline]
            pub unsafe fn GetPCAddress(&self) -> root::lldb::SBAddress {
                SBFrame_GetPCAddress(self)
            }
            #[inline]
            pub unsafe fn GetSymbolContext(
                &self,
                resolve_scope: u32,
            ) -> root::lldb::SBSymbolContext {
                SBFrame_GetSymbolContext(self, resolve_scope)
            }
            #[inline]
            pub unsafe fn GetModule(&self) -> root::lldb::SBModule {
                SBFrame_GetModule(self)
            }
            #[inline]
            pub unsafe fn GetCompileUnit(&self) -> root::lldb::SBCompileUnit {
                SBFrame_GetCompileUnit(self)
            }
            #[inline]
            pub unsafe fn GetFunction(&self) -> root::lldb::SBFunction {
                SBFrame_GetFunction(self)
            }
            #[inline]
            pub unsafe fn GetSymbol(&self) -> root::lldb::SBSymbol {
                SBFrame_GetSymbol(self)
            }
            #[inline]
            pub unsafe fn GetBlock(&self) -> root::lldb::SBBlock {
                SBFrame_GetBlock(self)
            }
            #[inline]
            pub unsafe fn GetFunctionName(&mut self) -> *const ::std::os::raw::c_char {
                SBFrame_GetFunctionName(self)
            }
            #[inline]
            pub unsafe fn GetDisplayFunctionName(&mut self) -> *const ::std::os::raw::c_char {
                SBFrame_GetDisplayFunctionName(self)
            }
            #[inline]
            pub unsafe fn GetFunctionName1(&self) -> *const ::std::os::raw::c_char {
                SBFrame_GetFunctionName1(self)
            }
            #[inline]
            pub unsafe fn GuessLanguage(&self) -> root::lldb::LanguageType {
                SBFrame_GuessLanguage(self)
            }
            #[inline]
            pub unsafe fn IsInlined(&mut self) -> bool {
                SBFrame_IsInlined(self)
            }
            #[inline]
            pub unsafe fn IsInlined1(&self) -> bool {
                SBFrame_IsInlined1(self)
            }
            #[inline]
            pub unsafe fn IsArtificial(&mut self) -> bool {
                SBFrame_IsArtificial(self)
            }
            #[inline]
            pub unsafe fn IsArtificial1(&self) -> bool {
                SBFrame_IsArtificial1(self)
            }
            #[inline]
            pub unsafe fn EvaluateExpression(
                &mut self,
                expr: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBFrame_EvaluateExpression(self, expr)
            }
            #[inline]
            pub unsafe fn EvaluateExpression1(
                &mut self,
                expr: *const ::std::os::raw::c_char,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValue {
                SBFrame_EvaluateExpression1(self, expr, use_dynamic)
            }
            #[inline]
            pub unsafe fn EvaluateExpression2(
                &mut self,
                expr: *const ::std::os::raw::c_char,
                use_dynamic: root::lldb::DynamicValueType,
                unwind_on_error: bool,
            ) -> root::lldb::SBValue {
                SBFrame_EvaluateExpression2(self, expr, use_dynamic, unwind_on_error)
            }
            #[inline]
            pub unsafe fn EvaluateExpression3(
                &mut self,
                expr: *const ::std::os::raw::c_char,
                options: *const root::lldb::SBExpressionOptions,
            ) -> root::lldb::SBValue {
                SBFrame_EvaluateExpression3(self, expr, options)
            }
            #[inline]
            pub unsafe fn GetFrameBlock(&self) -> root::lldb::SBBlock {
                SBFrame_GetFrameBlock(self)
            }
            #[inline]
            pub unsafe fn GetLineEntry(&self) -> root::lldb::SBLineEntry {
                SBFrame_GetLineEntry(self)
            }
            #[inline]
            pub unsafe fn GetThread(&self) -> root::lldb::SBThread {
                SBFrame_GetThread(self)
            }
            #[inline]
            pub unsafe fn Disassemble(&self) -> *const ::std::os::raw::c_char {
                SBFrame_Disassemble(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBFrame_Clear(self)
            }
            #[inline]
            pub unsafe fn GetVariables(
                &mut self,
                arguments: bool,
                locals: bool,
                statics: bool,
                in_scope_only: bool,
            ) -> root::lldb::SBValueList {
                SBFrame_GetVariables(self, arguments, locals, statics, in_scope_only)
            }
            #[inline]
            pub unsafe fn GetVariables1(
                &mut self,
                arguments: bool,
                locals: bool,
                statics: bool,
                in_scope_only: bool,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValueList {
                SBFrame_GetVariables1(self, arguments, locals, statics, in_scope_only, use_dynamic)
            }
            #[inline]
            pub unsafe fn GetVariables2(
                &mut self,
                options: *const root::lldb::SBVariablesOptions,
            ) -> root::lldb::SBValueList {
                SBFrame_GetVariables2(self, options)
            }
            #[inline]
            pub unsafe fn GetRegisters(&mut self) -> root::lldb::SBValueList {
                SBFrame_GetRegisters(self)
            }
            #[inline]
            pub unsafe fn FindRegister(
                &mut self,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBFrame_FindRegister(self, name)
            }
            #[inline]
            pub unsafe fn FindVariable(
                &mut self,
                var_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBFrame_FindVariable(self, var_name)
            }
            #[inline]
            pub unsafe fn FindVariable1(
                &mut self,
                var_name: *const ::std::os::raw::c_char,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValue {
                SBFrame_FindVariable1(self, var_name, use_dynamic)
            }
            #[inline]
            pub unsafe fn GetValueForVariablePath(
                &mut self,
                var_expr_cstr: *const ::std::os::raw::c_char,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValue {
                SBFrame_GetValueForVariablePath(self, var_expr_cstr, use_dynamic)
            }
            #[inline]
            pub unsafe fn GetValueForVariablePath1(
                &mut self,
                var_path: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBFrame_GetValueForVariablePath1(self, var_path)
            }
            #[inline]
            pub unsafe fn FindValue(
                &mut self,
                name: *const ::std::os::raw::c_char,
                value_type: root::lldb::ValueType,
            ) -> root::lldb::SBValue {
                SBFrame_FindValue(self, name, value_type)
            }
            #[inline]
            pub unsafe fn FindValue1(
                &mut self,
                name: *const ::std::os::raw::c_char,
                value_type: root::lldb::ValueType,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValue {
                SBFrame_FindValue1(self, name, value_type, use_dynamic)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBFrame_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn GetDescriptionWithFormat(
                &mut self,
                format: *const root::lldb::SBFormat,
                output: *mut root::lldb::SBStream,
            ) -> root::lldb::SBError {
                SBFrame_GetDescriptionWithFormat(self, format, output)
            }
            #[inline]
            pub unsafe fn GetFrameSP(&self) -> root::lldb::StackFrameSP {
                SBFrame_GetFrameSP(self)
            }
            #[inline]
            pub unsafe fn SetFrameSP(&mut self, lldb_object_sp: *const root::lldb::StackFrameSP) {
                SBFrame_SetFrameSP(self, lldb_object_sp)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFrame_SBFrame(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBFrame) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFrame_SBFrame1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(lldb_object_sp: *const root::lldb::StackFrameSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFrame_SBFrame2(__bindgen_tmp.as_mut_ptr(), lldb_object_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBFrame_SBFrame_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBAttachInfo {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo12GetProcessIDEv"]
            pub fn SBAttachInfo_GetProcessID(
                this: *mut root::lldb::SBAttachInfo,
            ) -> root::lldb::pid_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo12SetProcessIDEm"]
            pub fn SBAttachInfo_SetProcessID(
                this: *mut root::lldb::SBAttachInfo,
                pid: root::lldb::pid_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo13SetExecutableEPKc"]
            pub fn SBAttachInfo_SetExecutable(
                this: *mut root::lldb::SBAttachInfo,
                path: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo13SetExecutableENS_10SBFileSpecE"]
            pub fn SBAttachInfo_SetExecutable1(
                this: *mut root::lldb::SBAttachInfo,
                exe_file: root::lldb::SBFileSpec,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo16GetWaitForLaunchEv"]
            pub fn SBAttachInfo_GetWaitForLaunch(this: *mut root::lldb::SBAttachInfo) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo16SetWaitForLaunchEb"]
            pub fn SBAttachInfo_SetWaitForLaunch(this: *mut root::lldb::SBAttachInfo, b: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo16SetWaitForLaunchEbb"]
            pub fn SBAttachInfo_SetWaitForLaunch1(
                this: *mut root::lldb::SBAttachInfo,
                b: bool,
                async_: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo17GetIgnoreExistingEv"]
            pub fn SBAttachInfo_GetIgnoreExisting(this: *mut root::lldb::SBAttachInfo) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo17SetIgnoreExistingEb"]
            pub fn SBAttachInfo_SetIgnoreExisting(this: *mut root::lldb::SBAttachInfo, b: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo14GetResumeCountEv"]
            pub fn SBAttachInfo_GetResumeCount(this: *mut root::lldb::SBAttachInfo) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo14SetResumeCountEj"]
            pub fn SBAttachInfo_SetResumeCount(this: *mut root::lldb::SBAttachInfo, c: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo20GetProcessPluginNameEv"]
            pub fn SBAttachInfo_GetProcessPluginName(
                this: *mut root::lldb::SBAttachInfo,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo20SetProcessPluginNameEPKc"]
            pub fn SBAttachInfo_SetProcessPluginName(
                this: *mut root::lldb::SBAttachInfo,
                plugin_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo9GetUserIDEv"]
            pub fn SBAttachInfo_GetUserID(this: *mut root::lldb::SBAttachInfo) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo10GetGroupIDEv"]
            pub fn SBAttachInfo_GetGroupID(this: *mut root::lldb::SBAttachInfo) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo13UserIDIsValidEv"]
            pub fn SBAttachInfo_UserIDIsValid(this: *mut root::lldb::SBAttachInfo) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo14GroupIDIsValidEv"]
            pub fn SBAttachInfo_GroupIDIsValid(this: *mut root::lldb::SBAttachInfo) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo9SetUserIDEj"]
            pub fn SBAttachInfo_SetUserID(this: *mut root::lldb::SBAttachInfo, uid: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo10SetGroupIDEj"]
            pub fn SBAttachInfo_SetGroupID(this: *mut root::lldb::SBAttachInfo, gid: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo18GetEffectiveUserIDEv"]
            pub fn SBAttachInfo_GetEffectiveUserID(this: *mut root::lldb::SBAttachInfo) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo19GetEffectiveGroupIDEv"]
            pub fn SBAttachInfo_GetEffectiveGroupID(this: *mut root::lldb::SBAttachInfo) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo22EffectiveUserIDIsValidEv"]
            pub fn SBAttachInfo_EffectiveUserIDIsValid(this: *mut root::lldb::SBAttachInfo)
                -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo23EffectiveGroupIDIsValidEv"]
            pub fn SBAttachInfo_EffectiveGroupIDIsValid(
                this: *mut root::lldb::SBAttachInfo,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo18SetEffectiveUserIDEj"]
            pub fn SBAttachInfo_SetEffectiveUserID(this: *mut root::lldb::SBAttachInfo, uid: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo19SetEffectiveGroupIDEj"]
            pub fn SBAttachInfo_SetEffectiveGroupID(this: *mut root::lldb::SBAttachInfo, gid: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo18GetParentProcessIDEv"]
            pub fn SBAttachInfo_GetParentProcessID(
                this: *mut root::lldb::SBAttachInfo,
            ) -> root::lldb::pid_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo18SetParentProcessIDEm"]
            pub fn SBAttachInfo_SetParentProcessID(
                this: *mut root::lldb::SBAttachInfo,
                pid: root::lldb::pid_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo22ParentProcessIDIsValidEv"]
            pub fn SBAttachInfo_ParentProcessIDIsValid(this: *mut root::lldb::SBAttachInfo)
                -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo11GetListenerEv"]
            pub fn SBAttachInfo_GetListener(
                this: *mut root::lldb::SBAttachInfo,
            ) -> root::lldb::SBListener;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo11SetListenerERNS_10SBListenerE"]
            pub fn SBAttachInfo_SetListener(
                this: *mut root::lldb::SBAttachInfo,
                listener: *mut root::lldb::SBListener,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo17GetShadowListenerEv"]
            pub fn SBAttachInfo_GetShadowListener(
                this: *mut root::lldb::SBAttachInfo,
            ) -> root::lldb::SBListener;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo17SetShadowListenerERNS_10SBListenerE"]
            pub fn SBAttachInfo_SetShadowListener(
                this: *mut root::lldb::SBAttachInfo,
                listener: *mut root::lldb::SBListener,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBAttachInfo27GetScriptedProcessClassNameEv"]
            pub fn SBAttachInfo_GetScriptedProcessClassName(
                this: *const root::lldb::SBAttachInfo,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo27SetScriptedProcessClassNameEPKc"]
            pub fn SBAttachInfo_SetScriptedProcessClassName(
                this: *mut root::lldb::SBAttachInfo,
                class_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBAttachInfo28GetScriptedProcessDictionaryEv"]
            pub fn SBAttachInfo_GetScriptedProcessDictionary(
                this: *const root::lldb::SBAttachInfo,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo28SetScriptedProcessDictionaryENS_16SBStructuredDataE"]
            pub fn SBAttachInfo_SetScriptedProcessDictionary(
                this: *mut root::lldb::SBAttachInfo,
                dict: root::lldb::SBStructuredData,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfo3refEv"]
            pub fn SBAttachInfo_ref(
                this: *mut root::lldb::SBAttachInfo,
            ) -> *mut root::lldb_private::ProcessAttachInfo;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfoC1Ev"]
            pub fn SBAttachInfo_SBAttachInfo(this: *mut root::lldb::SBAttachInfo);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfoC1Em"]
            pub fn SBAttachInfo_SBAttachInfo1(
                this: *mut root::lldb::SBAttachInfo,
                pid: root::lldb::pid_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfoC1EPKcb"]
            pub fn SBAttachInfo_SBAttachInfo2(
                this: *mut root::lldb::SBAttachInfo,
                path: *const ::std::os::raw::c_char,
                wait_for: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfoC1EPKcbb"]
            pub fn SBAttachInfo_SBAttachInfo3(
                this: *mut root::lldb::SBAttachInfo,
                path: *const ::std::os::raw::c_char,
                wait_for: bool,
                async_: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfoC1ERKS0_"]
            pub fn SBAttachInfo_SBAttachInfo4(
                this: *mut root::lldb::SBAttachInfo,
                rhs: *const root::lldb::SBAttachInfo,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBAttachInfoD1Ev"]
            pub fn SBAttachInfo_SBAttachInfo_destructor(this: *mut root::lldb::SBAttachInfo);
        }
        impl SBAttachInfo {
            #[inline]
            pub unsafe fn GetProcessID(&mut self) -> root::lldb::pid_t {
                SBAttachInfo_GetProcessID(self)
            }
            #[inline]
            pub unsafe fn SetProcessID(&mut self, pid: root::lldb::pid_t) {
                SBAttachInfo_SetProcessID(self, pid)
            }
            #[inline]
            pub unsafe fn SetExecutable(&mut self, path: *const ::std::os::raw::c_char) {
                SBAttachInfo_SetExecutable(self, path)
            }
            #[inline]
            pub unsafe fn SetExecutable1(&mut self, exe_file: root::lldb::SBFileSpec) {
                SBAttachInfo_SetExecutable1(self, exe_file)
            }
            #[inline]
            pub unsafe fn GetWaitForLaunch(&mut self) -> bool {
                SBAttachInfo_GetWaitForLaunch(self)
            }
            #[inline]
            pub unsafe fn SetWaitForLaunch(&mut self, b: bool) {
                SBAttachInfo_SetWaitForLaunch(self, b)
            }
            #[inline]
            pub unsafe fn SetWaitForLaunch1(&mut self, b: bool, async_: bool) {
                SBAttachInfo_SetWaitForLaunch1(self, b, async_)
            }
            #[inline]
            pub unsafe fn GetIgnoreExisting(&mut self) -> bool {
                SBAttachInfo_GetIgnoreExisting(self)
            }
            #[inline]
            pub unsafe fn SetIgnoreExisting(&mut self, b: bool) {
                SBAttachInfo_SetIgnoreExisting(self, b)
            }
            #[inline]
            pub unsafe fn GetResumeCount(&mut self) -> u32 {
                SBAttachInfo_GetResumeCount(self)
            }
            #[inline]
            pub unsafe fn SetResumeCount(&mut self, c: u32) {
                SBAttachInfo_SetResumeCount(self, c)
            }
            #[inline]
            pub unsafe fn GetProcessPluginName(&mut self) -> *const ::std::os::raw::c_char {
                SBAttachInfo_GetProcessPluginName(self)
            }
            #[inline]
            pub unsafe fn SetProcessPluginName(
                &mut self,
                plugin_name: *const ::std::os::raw::c_char,
            ) {
                SBAttachInfo_SetProcessPluginName(self, plugin_name)
            }
            #[inline]
            pub unsafe fn GetUserID(&mut self) -> u32 {
                SBAttachInfo_GetUserID(self)
            }
            #[inline]
            pub unsafe fn GetGroupID(&mut self) -> u32 {
                SBAttachInfo_GetGroupID(self)
            }
            #[inline]
            pub unsafe fn UserIDIsValid(&mut self) -> bool {
                SBAttachInfo_UserIDIsValid(self)
            }
            #[inline]
            pub unsafe fn GroupIDIsValid(&mut self) -> bool {
                SBAttachInfo_GroupIDIsValid(self)
            }
            #[inline]
            pub unsafe fn SetUserID(&mut self, uid: u32) {
                SBAttachInfo_SetUserID(self, uid)
            }
            #[inline]
            pub unsafe fn SetGroupID(&mut self, gid: u32) {
                SBAttachInfo_SetGroupID(self, gid)
            }
            #[inline]
            pub unsafe fn GetEffectiveUserID(&mut self) -> u32 {
                SBAttachInfo_GetEffectiveUserID(self)
            }
            #[inline]
            pub unsafe fn GetEffectiveGroupID(&mut self) -> u32 {
                SBAttachInfo_GetEffectiveGroupID(self)
            }
            #[inline]
            pub unsafe fn EffectiveUserIDIsValid(&mut self) -> bool {
                SBAttachInfo_EffectiveUserIDIsValid(self)
            }
            #[inline]
            pub unsafe fn EffectiveGroupIDIsValid(&mut self) -> bool {
                SBAttachInfo_EffectiveGroupIDIsValid(self)
            }
            #[inline]
            pub unsafe fn SetEffectiveUserID(&mut self, uid: u32) {
                SBAttachInfo_SetEffectiveUserID(self, uid)
            }
            #[inline]
            pub unsafe fn SetEffectiveGroupID(&mut self, gid: u32) {
                SBAttachInfo_SetEffectiveGroupID(self, gid)
            }
            #[inline]
            pub unsafe fn GetParentProcessID(&mut self) -> root::lldb::pid_t {
                SBAttachInfo_GetParentProcessID(self)
            }
            #[inline]
            pub unsafe fn SetParentProcessID(&mut self, pid: root::lldb::pid_t) {
                SBAttachInfo_SetParentProcessID(self, pid)
            }
            #[inline]
            pub unsafe fn ParentProcessIDIsValid(&mut self) -> bool {
                SBAttachInfo_ParentProcessIDIsValid(self)
            }
            #[inline]
            pub unsafe fn GetListener(&mut self) -> root::lldb::SBListener {
                SBAttachInfo_GetListener(self)
            }
            #[inline]
            pub unsafe fn SetListener(&mut self, listener: *mut root::lldb::SBListener) {
                SBAttachInfo_SetListener(self, listener)
            }
            #[inline]
            pub unsafe fn GetShadowListener(&mut self) -> root::lldb::SBListener {
                SBAttachInfo_GetShadowListener(self)
            }
            #[inline]
            pub unsafe fn SetShadowListener(&mut self, listener: *mut root::lldb::SBListener) {
                SBAttachInfo_SetShadowListener(self, listener)
            }
            #[inline]
            pub unsafe fn GetScriptedProcessClassName(&self) -> *const ::std::os::raw::c_char {
                SBAttachInfo_GetScriptedProcessClassName(self)
            }
            #[inline]
            pub unsafe fn SetScriptedProcessClassName(
                &mut self,
                class_name: *const ::std::os::raw::c_char,
            ) {
                SBAttachInfo_SetScriptedProcessClassName(self, class_name)
            }
            #[inline]
            pub unsafe fn GetScriptedProcessDictionary(&self) -> root::lldb::SBStructuredData {
                SBAttachInfo_GetScriptedProcessDictionary(self)
            }
            #[inline]
            pub unsafe fn SetScriptedProcessDictionary(
                &mut self,
                dict: root::lldb::SBStructuredData,
            ) {
                SBAttachInfo_SetScriptedProcessDictionary(self, dict)
            }
            #[inline]
            pub unsafe fn ref_(&mut self) -> *mut root::lldb_private::ProcessAttachInfo {
                SBAttachInfo_ref(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAttachInfo_SBAttachInfo(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(pid: root::lldb::pid_t) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAttachInfo_SBAttachInfo1(__bindgen_tmp.as_mut_ptr(), pid);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(path: *const ::std::os::raw::c_char, wait_for: bool) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAttachInfo_SBAttachInfo2(__bindgen_tmp.as_mut_ptr(), path, wait_for);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(
                path: *const ::std::os::raw::c_char,
                wait_for: bool,
                async_: bool,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAttachInfo_SBAttachInfo3(__bindgen_tmp.as_mut_ptr(), path, wait_for, async_);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(rhs: *const root::lldb::SBAttachInfo) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAttachInfo_SBAttachInfo4(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBAttachInfo_SBAttachInfo_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBBreakpoint {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBBreakpoint5GetIDEv"]
            pub fn SBBreakpoint_GetID(
                this: *const root::lldb::SBBreakpoint,
            ) -> root::lldb::break_id_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBBreakpoint7IsValidEv"]
            pub fn SBBreakpoint_IsValid(this: *const root::lldb::SBBreakpoint) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint23ClearAllBreakpointSitesEv"]
            pub fn SBBreakpoint_ClearAllBreakpointSites(this: *mut root::lldb::SBBreakpoint);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBBreakpoint9GetTargetEv"]
            pub fn SBBreakpoint_GetTarget(
                this: *const root::lldb::SBBreakpoint,
            ) -> root::lldb::SBTarget;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint21FindLocationByAddressEm"]
            pub fn SBBreakpoint_FindLocationByAddress(
                this: *mut root::lldb::SBBreakpoint,
                vm_addr: root::lldb::addr_t,
            ) -> root::lldb::SBBreakpointLocation;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint23FindLocationIDByAddressEm"]
            pub fn SBBreakpoint_FindLocationIDByAddress(
                this: *mut root::lldb::SBBreakpoint,
                vm_addr: root::lldb::addr_t,
            ) -> root::lldb::break_id_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint16FindLocationByIDEi"]
            pub fn SBBreakpoint_FindLocationByID(
                this: *mut root::lldb::SBBreakpoint,
                bp_loc_id: root::lldb::break_id_t,
            ) -> root::lldb::SBBreakpointLocation;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint18GetLocationAtIndexEj"]
            pub fn SBBreakpoint_GetLocationAtIndex(
                this: *mut root::lldb::SBBreakpoint,
                index: u32,
            ) -> root::lldb::SBBreakpointLocation;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint10SetEnabledEb"]
            pub fn SBBreakpoint_SetEnabled(this: *mut root::lldb::SBBreakpoint, enable: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint9IsEnabledEv"]
            pub fn SBBreakpoint_IsEnabled(this: *mut root::lldb::SBBreakpoint) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint10SetOneShotEb"]
            pub fn SBBreakpoint_SetOneShot(this: *mut root::lldb::SBBreakpoint, one_shot: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBBreakpoint9IsOneShotEv"]
            pub fn SBBreakpoint_IsOneShot(this: *const root::lldb::SBBreakpoint) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint10IsInternalEv"]
            pub fn SBBreakpoint_IsInternal(this: *mut root::lldb::SBBreakpoint) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBBreakpoint11GetHitCountEv"]
            pub fn SBBreakpoint_GetHitCount(this: *const root::lldb::SBBreakpoint) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint14SetIgnoreCountEj"]
            pub fn SBBreakpoint_SetIgnoreCount(this: *mut root::lldb::SBBreakpoint, count: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBBreakpoint14GetIgnoreCountEv"]
            pub fn SBBreakpoint_GetIgnoreCount(this: *const root::lldb::SBBreakpoint) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint12SetConditionEPKc"]
            pub fn SBBreakpoint_SetCondition(
                this: *mut root::lldb::SBBreakpoint,
                condition: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint12GetConditionEv"]
            pub fn SBBreakpoint_GetCondition(
                this: *mut root::lldb::SBBreakpoint,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint15SetAutoContinueEb"]
            pub fn SBBreakpoint_SetAutoContinue(
                this: *mut root::lldb::SBBreakpoint,
                auto_continue: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint15GetAutoContinueEv"]
            pub fn SBBreakpoint_GetAutoContinue(this: *mut root::lldb::SBBreakpoint) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint11SetThreadIDEm"]
            pub fn SBBreakpoint_SetThreadID(
                this: *mut root::lldb::SBBreakpoint,
                sb_thread_id: root::lldb::tid_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint11GetThreadIDEv"]
            pub fn SBBreakpoint_GetThreadID(
                this: *mut root::lldb::SBBreakpoint,
            ) -> root::lldb::tid_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint14SetThreadIndexEj"]
            pub fn SBBreakpoint_SetThreadIndex(this: *mut root::lldb::SBBreakpoint, index: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBBreakpoint14GetThreadIndexEv"]
            pub fn SBBreakpoint_GetThreadIndex(this: *const root::lldb::SBBreakpoint) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint13SetThreadNameEPKc"]
            pub fn SBBreakpoint_SetThreadName(
                this: *mut root::lldb::SBBreakpoint,
                thread_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBBreakpoint13GetThreadNameEv"]
            pub fn SBBreakpoint_GetThreadName(
                this: *const root::lldb::SBBreakpoint,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint12SetQueueNameEPKc"]
            pub fn SBBreakpoint_SetQueueName(
                this: *mut root::lldb::SBBreakpoint,
                queue_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBBreakpoint12GetQueueNameEv"]
            pub fn SBBreakpoint_GetQueueName(
                this: *const root::lldb::SBBreakpoint,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint11SetCallbackEPFbPvRNS_9SBProcessERNS_8SBThreadERNS_20SBBreakpointLocationEES1_"]
            pub fn SBBreakpoint_SetCallback(
                this: *mut root::lldb::SBBreakpoint,
                callback: root::lldb::SBBreakpointHitCallback,
                baton: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint25SetScriptCallbackFunctionEPKc"]
            pub fn SBBreakpoint_SetScriptCallbackFunction(
                this: *mut root::lldb::SBBreakpoint,
                callback_function_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint25SetScriptCallbackFunctionEPKcRNS_16SBStructuredDataE"]
            pub fn SBBreakpoint_SetScriptCallbackFunction1(
                this: *mut root::lldb::SBBreakpoint,
                callback_function_name: *const ::std::os::raw::c_char,
                extra_args: *mut root::lldb::SBStructuredData,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint22SetCommandLineCommandsERNS_12SBStringListE"]
            pub fn SBBreakpoint_SetCommandLineCommands(
                this: *mut root::lldb::SBBreakpoint,
                commands: *mut root::lldb::SBStringList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint22GetCommandLineCommandsERNS_12SBStringListE"]
            pub fn SBBreakpoint_GetCommandLineCommands(
                this: *mut root::lldb::SBBreakpoint,
                commands: *mut root::lldb::SBStringList,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint21SetScriptCallbackBodyEPKc"]
            pub fn SBBreakpoint_SetScriptCallbackBody(
                this: *mut root::lldb::SBBreakpoint,
                script_body_text: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint7AddNameEPKc"]
            pub fn SBBreakpoint_AddName(
                this: *mut root::lldb::SBBreakpoint,
                new_name: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint24AddNameWithErrorHandlingEPKc"]
            pub fn SBBreakpoint_AddNameWithErrorHandling(
                this: *mut root::lldb::SBBreakpoint,
                new_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint10RemoveNameEPKc"]
            pub fn SBBreakpoint_RemoveName(
                this: *mut root::lldb::SBBreakpoint,
                name_to_remove: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint11MatchesNameEPKc"]
            pub fn SBBreakpoint_MatchesName(
                this: *mut root::lldb::SBBreakpoint,
                name: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint8GetNamesERNS_12SBStringListE"]
            pub fn SBBreakpoint_GetNames(
                this: *mut root::lldb::SBBreakpoint,
                names: *mut root::lldb::SBStringList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBBreakpoint23GetNumResolvedLocationsEv"]
            pub fn SBBreakpoint_GetNumResolvedLocations(
                this: *const root::lldb::SBBreakpoint,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBBreakpoint15GetNumLocationsEv"]
            pub fn SBBreakpoint_GetNumLocations(this: *const root::lldb::SBBreakpoint) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint14GetDescriptionERNS_8SBStreamE"]
            pub fn SBBreakpoint_GetDescription(
                this: *mut root::lldb::SBBreakpoint,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint14GetDescriptionERNS_8SBStreamEb"]
            pub fn SBBreakpoint_GetDescription1(
                this: *mut root::lldb::SBBreakpoint,
                description: *mut root::lldb::SBStream,
                include_locations: bool,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint22EventIsBreakpointEventERKNS_7SBEventE"]
            pub fn SBBreakpoint_EventIsBreakpointEvent(event: *const root::lldb::SBEvent) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint31GetBreakpointEventTypeFromEventERKNS_7SBEventE"]
            pub fn SBBreakpoint_GetBreakpointEventTypeFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::BreakpointEventType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint22GetBreakpointFromEventERKNS_7SBEventE"]
            pub fn SBBreakpoint_GetBreakpointFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint37GetBreakpointLocationAtIndexFromEventERKNS_7SBEventEj"]
            pub fn SBBreakpoint_GetBreakpointLocationAtIndexFromEvent(
                event: *const root::lldb::SBEvent,
                loc_idx: u32,
            ) -> root::lldb::SBBreakpointLocation;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint34GetNumBreakpointLocationsFromEventERKNS_7SBEventE"]
            pub fn SBBreakpoint_GetNumBreakpointLocationsFromEvent(
                event_sp: *const root::lldb::SBEvent,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBBreakpoint10IsHardwareEv"]
            pub fn SBBreakpoint_IsHardware(this: *const root::lldb::SBBreakpoint) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint11AddLocationERNS_9SBAddressE"]
            pub fn SBBreakpoint_AddLocation(
                this: *mut root::lldb::SBBreakpoint,
                address: *mut root::lldb::SBAddress,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpoint25SerializeToStructuredDataEv"]
            pub fn SBBreakpoint_SerializeToStructuredData(
                this: *mut root::lldb::SBBreakpoint,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpointC1Ev"]
            pub fn SBBreakpoint_SBBreakpoint(this: *mut root::lldb::SBBreakpoint);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpointC1ERKS0_"]
            pub fn SBBreakpoint_SBBreakpoint1(
                this: *mut root::lldb::SBBreakpoint,
                rhs: *const root::lldb::SBBreakpoint,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBBreakpointD1Ev"]
            pub fn SBBreakpoint_SBBreakpoint_destructor(this: *mut root::lldb::SBBreakpoint);
        }
        impl SBBreakpoint {
            #[inline]
            pub unsafe fn GetID(&self) -> root::lldb::break_id_t {
                SBBreakpoint_GetID(self)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBBreakpoint_IsValid(self)
            }
            #[inline]
            pub unsafe fn ClearAllBreakpointSites(&mut self) {
                SBBreakpoint_ClearAllBreakpointSites(self)
            }
            #[inline]
            pub unsafe fn GetTarget(&self) -> root::lldb::SBTarget {
                SBBreakpoint_GetTarget(self)
            }
            #[inline]
            pub unsafe fn FindLocationByAddress(
                &mut self,
                vm_addr: root::lldb::addr_t,
            ) -> root::lldb::SBBreakpointLocation {
                SBBreakpoint_FindLocationByAddress(self, vm_addr)
            }
            #[inline]
            pub unsafe fn FindLocationIDByAddress(
                &mut self,
                vm_addr: root::lldb::addr_t,
            ) -> root::lldb::break_id_t {
                SBBreakpoint_FindLocationIDByAddress(self, vm_addr)
            }
            #[inline]
            pub unsafe fn FindLocationByID(
                &mut self,
                bp_loc_id: root::lldb::break_id_t,
            ) -> root::lldb::SBBreakpointLocation {
                SBBreakpoint_FindLocationByID(self, bp_loc_id)
            }
            #[inline]
            pub unsafe fn GetLocationAtIndex(
                &mut self,
                index: u32,
            ) -> root::lldb::SBBreakpointLocation {
                SBBreakpoint_GetLocationAtIndex(self, index)
            }
            #[inline]
            pub unsafe fn SetEnabled(&mut self, enable: bool) {
                SBBreakpoint_SetEnabled(self, enable)
            }
            #[inline]
            pub unsafe fn IsEnabled(&mut self) -> bool {
                SBBreakpoint_IsEnabled(self)
            }
            #[inline]
            pub unsafe fn SetOneShot(&mut self, one_shot: bool) {
                SBBreakpoint_SetOneShot(self, one_shot)
            }
            #[inline]
            pub unsafe fn IsOneShot(&self) -> bool {
                SBBreakpoint_IsOneShot(self)
            }
            #[inline]
            pub unsafe fn IsInternal(&mut self) -> bool {
                SBBreakpoint_IsInternal(self)
            }
            #[inline]
            pub unsafe fn GetHitCount(&self) -> u32 {
                SBBreakpoint_GetHitCount(self)
            }
            #[inline]
            pub unsafe fn SetIgnoreCount(&mut self, count: u32) {
                SBBreakpoint_SetIgnoreCount(self, count)
            }
            #[inline]
            pub unsafe fn GetIgnoreCount(&self) -> u32 {
                SBBreakpoint_GetIgnoreCount(self)
            }
            #[inline]
            pub unsafe fn SetCondition(&mut self, condition: *const ::std::os::raw::c_char) {
                SBBreakpoint_SetCondition(self, condition)
            }
            #[inline]
            pub unsafe fn GetCondition(&mut self) -> *const ::std::os::raw::c_char {
                SBBreakpoint_GetCondition(self)
            }
            #[inline]
            pub unsafe fn SetAutoContinue(&mut self, auto_continue: bool) {
                SBBreakpoint_SetAutoContinue(self, auto_continue)
            }
            #[inline]
            pub unsafe fn GetAutoContinue(&mut self) -> bool {
                SBBreakpoint_GetAutoContinue(self)
            }
            #[inline]
            pub unsafe fn SetThreadID(&mut self, sb_thread_id: root::lldb::tid_t) {
                SBBreakpoint_SetThreadID(self, sb_thread_id)
            }
            #[inline]
            pub unsafe fn GetThreadID(&mut self) -> root::lldb::tid_t {
                SBBreakpoint_GetThreadID(self)
            }
            #[inline]
            pub unsafe fn SetThreadIndex(&mut self, index: u32) {
                SBBreakpoint_SetThreadIndex(self, index)
            }
            #[inline]
            pub unsafe fn GetThreadIndex(&self) -> u32 {
                SBBreakpoint_GetThreadIndex(self)
            }
            #[inline]
            pub unsafe fn SetThreadName(&mut self, thread_name: *const ::std::os::raw::c_char) {
                SBBreakpoint_SetThreadName(self, thread_name)
            }
            #[inline]
            pub unsafe fn GetThreadName(&self) -> *const ::std::os::raw::c_char {
                SBBreakpoint_GetThreadName(self)
            }
            #[inline]
            pub unsafe fn SetQueueName(&mut self, queue_name: *const ::std::os::raw::c_char) {
                SBBreakpoint_SetQueueName(self, queue_name)
            }
            #[inline]
            pub unsafe fn GetQueueName(&self) -> *const ::std::os::raw::c_char {
                SBBreakpoint_GetQueueName(self)
            }
            #[inline]
            pub unsafe fn SetCallback(
                &mut self,
                callback: root::lldb::SBBreakpointHitCallback,
                baton: *mut ::std::os::raw::c_void,
            ) {
                SBBreakpoint_SetCallback(self, callback, baton)
            }
            #[inline]
            pub unsafe fn SetScriptCallbackFunction(
                &mut self,
                callback_function_name: *const ::std::os::raw::c_char,
            ) {
                SBBreakpoint_SetScriptCallbackFunction(self, callback_function_name)
            }
            #[inline]
            pub unsafe fn SetScriptCallbackFunction1(
                &mut self,
                callback_function_name: *const ::std::os::raw::c_char,
                extra_args: *mut root::lldb::SBStructuredData,
            ) -> root::lldb::SBError {
                SBBreakpoint_SetScriptCallbackFunction1(self, callback_function_name, extra_args)
            }
            #[inline]
            pub unsafe fn SetCommandLineCommands(
                &mut self,
                commands: *mut root::lldb::SBStringList,
            ) {
                SBBreakpoint_SetCommandLineCommands(self, commands)
            }
            #[inline]
            pub unsafe fn GetCommandLineCommands(
                &mut self,
                commands: *mut root::lldb::SBStringList,
            ) -> bool {
                SBBreakpoint_GetCommandLineCommands(self, commands)
            }
            #[inline]
            pub unsafe fn SetScriptCallbackBody(
                &mut self,
                script_body_text: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError {
                SBBreakpoint_SetScriptCallbackBody(self, script_body_text)
            }
            #[inline]
            pub unsafe fn AddName(&mut self, new_name: *const ::std::os::raw::c_char) -> bool {
                SBBreakpoint_AddName(self, new_name)
            }
            #[inline]
            pub unsafe fn AddNameWithErrorHandling(
                &mut self,
                new_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError {
                SBBreakpoint_AddNameWithErrorHandling(self, new_name)
            }
            #[inline]
            pub unsafe fn RemoveName(&mut self, name_to_remove: *const ::std::os::raw::c_char) {
                SBBreakpoint_RemoveName(self, name_to_remove)
            }
            #[inline]
            pub unsafe fn MatchesName(&mut self, name: *const ::std::os::raw::c_char) -> bool {
                SBBreakpoint_MatchesName(self, name)
            }
            #[inline]
            pub unsafe fn GetNames(&mut self, names: *mut root::lldb::SBStringList) {
                SBBreakpoint_GetNames(self, names)
            }
            #[inline]
            pub unsafe fn GetNumResolvedLocations(&self) -> usize {
                SBBreakpoint_GetNumResolvedLocations(self)
            }
            #[inline]
            pub unsafe fn GetNumLocations(&self) -> usize {
                SBBreakpoint_GetNumLocations(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBBreakpoint_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn GetDescription1(
                &mut self,
                description: *mut root::lldb::SBStream,
                include_locations: bool,
            ) -> bool {
                SBBreakpoint_GetDescription1(self, description, include_locations)
            }
            #[inline]
            pub unsafe fn EventIsBreakpointEvent(event: *const root::lldb::SBEvent) -> bool {
                SBBreakpoint_EventIsBreakpointEvent(event)
            }
            #[inline]
            pub unsafe fn GetBreakpointEventTypeFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::BreakpointEventType {
                SBBreakpoint_GetBreakpointEventTypeFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetBreakpointFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBBreakpoint {
                SBBreakpoint_GetBreakpointFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetBreakpointLocationAtIndexFromEvent(
                event: *const root::lldb::SBEvent,
                loc_idx: u32,
            ) -> root::lldb::SBBreakpointLocation {
                SBBreakpoint_GetBreakpointLocationAtIndexFromEvent(event, loc_idx)
            }
            #[inline]
            pub unsafe fn GetNumBreakpointLocationsFromEvent(
                event_sp: *const root::lldb::SBEvent,
            ) -> u32 {
                SBBreakpoint_GetNumBreakpointLocationsFromEvent(event_sp)
            }
            #[inline]
            pub unsafe fn IsHardware(&self) -> bool {
                SBBreakpoint_IsHardware(self)
            }
            #[inline]
            pub unsafe fn AddLocation(
                &mut self,
                address: *mut root::lldb::SBAddress,
            ) -> root::lldb::SBError {
                SBBreakpoint_AddLocation(self, address)
            }
            #[inline]
            pub unsafe fn SerializeToStructuredData(&mut self) -> root::lldb::SBStructuredData {
                SBBreakpoint_SerializeToStructuredData(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBreakpoint_SBBreakpoint(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBBreakpoint) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBreakpoint_SBBreakpoint1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBBreakpoint_SBBreakpoint_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBBreakpointList {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBBreakpointList7GetSizeEv"]
            pub fn SBBreakpointList_GetSize(this: *const root::lldb::SBBreakpointList) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointList20GetBreakpointAtIndexEm"]
            pub fn SBBreakpointList_GetBreakpointAtIndex(
                this: *mut root::lldb::SBBreakpointList,
                idx: usize,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointList18FindBreakpointByIDEi"]
            pub fn SBBreakpointList_FindBreakpointByID(
                this: *mut root::lldb::SBBreakpointList,
                arg1: root::lldb::break_id_t,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointList6AppendERKNS_12SBBreakpointE"]
            pub fn SBBreakpointList_Append(
                this: *mut root::lldb::SBBreakpointList,
                sb_bkpt: *const root::lldb::SBBreakpoint,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointList14AppendIfUniqueERKNS_12SBBreakpointE"]
            pub fn SBBreakpointList_AppendIfUnique(
                this: *mut root::lldb::SBBreakpointList,
                sb_bkpt: *const root::lldb::SBBreakpoint,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointList10AppendByIDEi"]
            pub fn SBBreakpointList_AppendByID(
                this: *mut root::lldb::SBBreakpointList,
                id: root::lldb::break_id_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointList5ClearEv"]
            pub fn SBBreakpointList_Clear(this: *mut root::lldb::SBBreakpointList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointList22CopyToBreakpointIDListERN12lldb_private16BreakpointIDListE"]
            pub fn SBBreakpointList_CopyToBreakpointIDList(
                this: *mut root::lldb::SBBreakpointList,
                bp_id_list: *mut root::lldb_private::BreakpointIDList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointListC1ERNS_8SBTargetE"]
            pub fn SBBreakpointList_SBBreakpointList(
                this: *mut root::lldb::SBBreakpointList,
                target: *mut root::lldb::SBTarget,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointListD1Ev"]
            pub fn SBBreakpointList_SBBreakpointList_destructor(
                this: *mut root::lldb::SBBreakpointList,
            );
        }
        impl SBBreakpointList {
            #[inline]
            pub unsafe fn GetSize(&self) -> usize {
                SBBreakpointList_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetBreakpointAtIndex(&mut self, idx: usize) -> root::lldb::SBBreakpoint {
                SBBreakpointList_GetBreakpointAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn FindBreakpointByID(
                &mut self,
                arg1: root::lldb::break_id_t,
            ) -> root::lldb::SBBreakpoint {
                SBBreakpointList_FindBreakpointByID(self, arg1)
            }
            #[inline]
            pub unsafe fn Append(&mut self, sb_bkpt: *const root::lldb::SBBreakpoint) {
                SBBreakpointList_Append(self, sb_bkpt)
            }
            #[inline]
            pub unsafe fn AppendIfUnique(
                &mut self,
                sb_bkpt: *const root::lldb::SBBreakpoint,
            ) -> bool {
                SBBreakpointList_AppendIfUnique(self, sb_bkpt)
            }
            #[inline]
            pub unsafe fn AppendByID(&mut self, id: root::lldb::break_id_t) {
                SBBreakpointList_AppendByID(self, id)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBBreakpointList_Clear(self)
            }
            #[inline]
            pub unsafe fn CopyToBreakpointIDList(
                &mut self,
                bp_id_list: *mut root::lldb_private::BreakpointIDList,
            ) {
                SBBreakpointList_CopyToBreakpointIDList(self, bp_id_list)
            }
            #[inline]
            pub unsafe fn new(target: *mut root::lldb::SBTarget) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBreakpointList_SBBreakpointList(__bindgen_tmp.as_mut_ptr(), target);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBBreakpointList_SBBreakpointList_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBBroadcaster {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 3usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBBroadcaster7IsValidEv"]
            pub fn SBBroadcaster_IsValid(this: *const root::lldb::SBBroadcaster) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBBroadcaster5ClearEv"]
            pub fn SBBroadcaster_Clear(this: *mut root::lldb::SBBroadcaster);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBBroadcaster20BroadcastEventByTypeEjb"]
            pub fn SBBroadcaster_BroadcastEventByType(
                this: *mut root::lldb::SBBroadcaster,
                event_type: u32,
                unique: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBBroadcaster14BroadcastEventERKNS_7SBEventEb"]
            pub fn SBBroadcaster_BroadcastEvent(
                this: *mut root::lldb::SBBroadcaster,
                event: *const root::lldb::SBEvent,
                unique: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBBroadcaster26AddInitialEventsToListenerERKNS_10SBListenerEj"]
            pub fn SBBroadcaster_AddInitialEventsToListener(
                this: *mut root::lldb::SBBroadcaster,
                listener: *const root::lldb::SBListener,
                requested_events: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBBroadcaster11AddListenerERKNS_10SBListenerEj"]
            pub fn SBBroadcaster_AddListener(
                this: *mut root::lldb::SBBroadcaster,
                listener: *const root::lldb::SBListener,
                event_mask: u32,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBBroadcaster7GetNameEv"]
            pub fn SBBroadcaster_GetName(
                this: *const root::lldb::SBBroadcaster,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBBroadcaster21EventTypeHasListenersEj"]
            pub fn SBBroadcaster_EventTypeHasListeners(
                this: *mut root::lldb::SBBroadcaster,
                event_type: u32,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBBroadcaster14RemoveListenerERKNS_10SBListenerEj"]
            pub fn SBBroadcaster_RemoveListener(
                this: *mut root::lldb::SBBroadcaster,
                listener: *const root::lldb::SBListener,
                event_mask: u32,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBBroadcaster3getEv"]
            pub fn SBBroadcaster_get(
                this: *const root::lldb::SBBroadcaster,
            ) -> *mut root::lldb_private::Broadcaster;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBBroadcaster5resetEPN12lldb_private11BroadcasterEb"]
            pub fn SBBroadcaster_reset(
                this: *mut root::lldb::SBBroadcaster,
                broadcaster: *mut root::lldb_private::Broadcaster,
                owns: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBBroadcasterC1Ev"]
            pub fn SBBroadcaster_SBBroadcaster(this: *mut root::lldb::SBBroadcaster);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBBroadcasterC1EPKc"]
            pub fn SBBroadcaster_SBBroadcaster1(
                this: *mut root::lldb::SBBroadcaster,
                name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBBroadcasterC1ERKS0_"]
            pub fn SBBroadcaster_SBBroadcaster2(
                this: *mut root::lldb::SBBroadcaster,
                rhs: *const root::lldb::SBBroadcaster,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBBroadcasterC1EPN12lldb_private11BroadcasterEb"]
            pub fn SBBroadcaster_SBBroadcaster3(
                this: *mut root::lldb::SBBroadcaster,
                broadcaster: *mut root::lldb_private::Broadcaster,
                owns: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBBroadcasterD1Ev"]
            pub fn SBBroadcaster_SBBroadcaster_destructor(this: *mut root::lldb::SBBroadcaster);
        }
        impl SBBroadcaster {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBBroadcaster_IsValid(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBBroadcaster_Clear(self)
            }
            #[inline]
            pub unsafe fn BroadcastEventByType(&mut self, event_type: u32, unique: bool) {
                SBBroadcaster_BroadcastEventByType(self, event_type, unique)
            }
            #[inline]
            pub unsafe fn BroadcastEvent(
                &mut self,
                event: *const root::lldb::SBEvent,
                unique: bool,
            ) {
                SBBroadcaster_BroadcastEvent(self, event, unique)
            }
            #[inline]
            pub unsafe fn AddInitialEventsToListener(
                &mut self,
                listener: *const root::lldb::SBListener,
                requested_events: u32,
            ) {
                SBBroadcaster_AddInitialEventsToListener(self, listener, requested_events)
            }
            #[inline]
            pub unsafe fn AddListener(
                &mut self,
                listener: *const root::lldb::SBListener,
                event_mask: u32,
            ) -> u32 {
                SBBroadcaster_AddListener(self, listener, event_mask)
            }
            #[inline]
            pub unsafe fn GetName(&self) -> *const ::std::os::raw::c_char {
                SBBroadcaster_GetName(self)
            }
            #[inline]
            pub unsafe fn EventTypeHasListeners(&mut self, event_type: u32) -> bool {
                SBBroadcaster_EventTypeHasListeners(self, event_type)
            }
            #[inline]
            pub unsafe fn RemoveListener(
                &mut self,
                listener: *const root::lldb::SBListener,
                event_mask: u32,
            ) -> bool {
                SBBroadcaster_RemoveListener(self, listener, event_mask)
            }
            #[inline]
            pub unsafe fn get(&self) -> *mut root::lldb_private::Broadcaster {
                SBBroadcaster_get(self)
            }
            #[inline]
            pub unsafe fn reset(
                &mut self,
                broadcaster: *mut root::lldb_private::Broadcaster,
                owns: bool,
            ) {
                SBBroadcaster_reset(self, broadcaster, owns)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBroadcaster_SBBroadcaster(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(name: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBroadcaster_SBBroadcaster1(__bindgen_tmp.as_mut_ptr(), name);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(rhs: *const root::lldb::SBBroadcaster) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBroadcaster_SBBroadcaster2(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(
                broadcaster: *mut root::lldb_private::Broadcaster,
                owns: bool,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBroadcaster_SBBroadcaster3(__bindgen_tmp.as_mut_ptr(), broadcaster, owns);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBBroadcaster_SBBroadcaster_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBFileSpec {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBFileSpec7IsValidEv"]
            pub fn SBFileSpec_IsValid(this: *const root::lldb::SBFileSpec) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBFileSpec6ExistsEv"]
            pub fn SBFileSpec_Exists(this: *const root::lldb::SBFileSpec) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFileSpec25ResolveExecutableLocationEv"]
            pub fn SBFileSpec_ResolveExecutableLocation(this: *mut root::lldb::SBFileSpec) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBFileSpec11GetFilenameEv"]
            pub fn SBFileSpec_GetFilename(
                this: *const root::lldb::SBFileSpec,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBFileSpec12GetDirectoryEv"]
            pub fn SBFileSpec_GetDirectory(
                this: *const root::lldb::SBFileSpec,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFileSpec11SetFilenameEPKc"]
            pub fn SBFileSpec_SetFilename(
                this: *mut root::lldb::SBFileSpec,
                filename: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFileSpec12SetDirectoryEPKc"]
            pub fn SBFileSpec_SetDirectory(
                this: *mut root::lldb::SBFileSpec,
                directory: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBFileSpec7GetPathEPcm"]
            pub fn SBFileSpec_GetPath(
                this: *const root::lldb::SBFileSpec,
                dst_path: *mut ::std::os::raw::c_char,
                dst_len: usize,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFileSpec11ResolvePathEPKcPcm"]
            pub fn SBFileSpec_ResolvePath(
                src_path: *const ::std::os::raw::c_char,
                dst_path: *mut ::std::os::raw::c_char,
                dst_len: usize,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBFileSpec14GetDescriptionERNS_8SBStreamE"]
            pub fn SBFileSpec_GetDescription(
                this: *const root::lldb::SBFileSpec,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFileSpec19AppendPathComponentEPKc"]
            pub fn SBFileSpec_AppendPathComponent(
                this: *mut root::lldb::SBFileSpec,
                file_or_directory: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFileSpecC1Ev"]
            pub fn SBFileSpec_SBFileSpec(this: *mut root::lldb::SBFileSpec);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFileSpecC1ERKS0_"]
            pub fn SBFileSpec_SBFileSpec1(
                this: *mut root::lldb::SBFileSpec,
                rhs: *const root::lldb::SBFileSpec,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFileSpecC1EPKc"]
            pub fn SBFileSpec_SBFileSpec2(
                this: *mut root::lldb::SBFileSpec,
                path: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFileSpecC1EPKcb"]
            pub fn SBFileSpec_SBFileSpec3(
                this: *mut root::lldb::SBFileSpec,
                path: *const ::std::os::raw::c_char,
                resolve: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFileSpecD1Ev"]
            pub fn SBFileSpec_SBFileSpec_destructor(this: *mut root::lldb::SBFileSpec);
        }
        impl SBFileSpec {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBFileSpec_IsValid(self)
            }
            #[inline]
            pub unsafe fn Exists(&self) -> bool {
                SBFileSpec_Exists(self)
            }
            #[inline]
            pub unsafe fn ResolveExecutableLocation(&mut self) -> bool {
                SBFileSpec_ResolveExecutableLocation(self)
            }
            #[inline]
            pub unsafe fn GetFilename(&self) -> *const ::std::os::raw::c_char {
                SBFileSpec_GetFilename(self)
            }
            #[inline]
            pub unsafe fn GetDirectory(&self) -> *const ::std::os::raw::c_char {
                SBFileSpec_GetDirectory(self)
            }
            #[inline]
            pub unsafe fn SetFilename(&mut self, filename: *const ::std::os::raw::c_char) {
                SBFileSpec_SetFilename(self, filename)
            }
            #[inline]
            pub unsafe fn SetDirectory(&mut self, directory: *const ::std::os::raw::c_char) {
                SBFileSpec_SetDirectory(self, directory)
            }
            #[inline]
            pub unsafe fn GetPath(
                &self,
                dst_path: *mut ::std::os::raw::c_char,
                dst_len: usize,
            ) -> u32 {
                SBFileSpec_GetPath(self, dst_path, dst_len)
            }
            #[inline]
            pub unsafe fn ResolvePath(
                src_path: *const ::std::os::raw::c_char,
                dst_path: *mut ::std::os::raw::c_char,
                dst_len: usize,
            ) -> ::std::os::raw::c_int {
                SBFileSpec_ResolvePath(src_path, dst_path, dst_len)
            }
            #[inline]
            pub unsafe fn GetDescription(&self, description: *mut root::lldb::SBStream) -> bool {
                SBFileSpec_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn AppendPathComponent(
                &mut self,
                file_or_directory: *const ::std::os::raw::c_char,
            ) {
                SBFileSpec_AppendPathComponent(self, file_or_directory)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFileSpec_SBFileSpec(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBFileSpec) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFileSpec_SBFileSpec1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(path: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFileSpec_SBFileSpec2(__bindgen_tmp.as_mut_ptr(), path);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(path: *const ::std::os::raw::c_char, resolve: bool) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFileSpec_SBFileSpec3(__bindgen_tmp.as_mut_ptr(), path, resolve);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBFileSpec_SBFileSpec_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBFileSpecList {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb14SBFileSpecList7GetSizeEv"]
            pub fn SBFileSpecList_GetSize(this: *const root::lldb::SBFileSpecList) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb14SBFileSpecList14GetDescriptionERNS_8SBStreamE"]
            pub fn SBFileSpecList_GetDescription(
                this: *const root::lldb::SBFileSpecList,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBFileSpecList6AppendERKNS_10SBFileSpecE"]
            pub fn SBFileSpecList_Append(
                this: *mut root::lldb::SBFileSpecList,
                sb_file: *const root::lldb::SBFileSpec,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBFileSpecList14AppendIfUniqueERKNS_10SBFileSpecE"]
            pub fn SBFileSpecList_AppendIfUnique(
                this: *mut root::lldb::SBFileSpecList,
                sb_file: *const root::lldb::SBFileSpec,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBFileSpecList5ClearEv"]
            pub fn SBFileSpecList_Clear(this: *mut root::lldb::SBFileSpecList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBFileSpecList13FindFileIndexEjRKNS_10SBFileSpecEb"]
            pub fn SBFileSpecList_FindFileIndex(
                this: *mut root::lldb::SBFileSpecList,
                idx: u32,
                sb_file: *const root::lldb::SBFileSpec,
                full: bool,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb14SBFileSpecList18GetFileSpecAtIndexEj"]
            pub fn SBFileSpecList_GetFileSpecAtIndex(
                this: *const root::lldb::SBFileSpecList,
                idx: u32,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBFileSpecListC1Ev"]
            pub fn SBFileSpecList_SBFileSpecList(this: *mut root::lldb::SBFileSpecList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBFileSpecListC1ERKS0_"]
            pub fn SBFileSpecList_SBFileSpecList1(
                this: *mut root::lldb::SBFileSpecList,
                rhs: *const root::lldb::SBFileSpecList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBFileSpecListD1Ev"]
            pub fn SBFileSpecList_SBFileSpecList_destructor(this: *mut root::lldb::SBFileSpecList);
        }
        impl SBFileSpecList {
            #[inline]
            pub unsafe fn GetSize(&self) -> u32 {
                SBFileSpecList_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetDescription(&self, description: *mut root::lldb::SBStream) -> bool {
                SBFileSpecList_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn Append(&mut self, sb_file: *const root::lldb::SBFileSpec) {
                SBFileSpecList_Append(self, sb_file)
            }
            #[inline]
            pub unsafe fn AppendIfUnique(
                &mut self,
                sb_file: *const root::lldb::SBFileSpec,
            ) -> bool {
                SBFileSpecList_AppendIfUnique(self, sb_file)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBFileSpecList_Clear(self)
            }
            #[inline]
            pub unsafe fn FindFileIndex(
                &mut self,
                idx: u32,
                sb_file: *const root::lldb::SBFileSpec,
                full: bool,
            ) -> u32 {
                SBFileSpecList_FindFileIndex(self, idx, sb_file, full)
            }
            #[inline]
            pub unsafe fn GetFileSpecAtIndex(&self, idx: u32) -> root::lldb::SBFileSpec {
                SBFileSpecList_GetFileSpecAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFileSpecList_SBFileSpecList(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBFileSpecList) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFileSpecList_SBFileSpecList1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBFileSpecList_SBFileSpecList_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBLaunchInfo {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo12GetProcessIDEv"]
            pub fn SBLaunchInfo_GetProcessID(
                this: *mut root::lldb::SBLaunchInfo,
            ) -> root::lldb::pid_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo9GetUserIDEv"]
            pub fn SBLaunchInfo_GetUserID(this: *mut root::lldb::SBLaunchInfo) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo10GetGroupIDEv"]
            pub fn SBLaunchInfo_GetGroupID(this: *mut root::lldb::SBLaunchInfo) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo13UserIDIsValidEv"]
            pub fn SBLaunchInfo_UserIDIsValid(this: *mut root::lldb::SBLaunchInfo) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo14GroupIDIsValidEv"]
            pub fn SBLaunchInfo_GroupIDIsValid(this: *mut root::lldb::SBLaunchInfo) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo9SetUserIDEj"]
            pub fn SBLaunchInfo_SetUserID(this: *mut root::lldb::SBLaunchInfo, uid: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo10SetGroupIDEj"]
            pub fn SBLaunchInfo_SetGroupID(this: *mut root::lldb::SBLaunchInfo, gid: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo17GetExecutableFileEv"]
            pub fn SBLaunchInfo_GetExecutableFile(
                this: *mut root::lldb::SBLaunchInfo,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo17SetExecutableFileENS_10SBFileSpecEb"]
            pub fn SBLaunchInfo_SetExecutableFile(
                this: *mut root::lldb::SBLaunchInfo,
                exe_file: root::lldb::SBFileSpec,
                add_as_first_arg: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo11GetListenerEv"]
            pub fn SBLaunchInfo_GetListener(
                this: *mut root::lldb::SBLaunchInfo,
            ) -> root::lldb::SBListener;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo11SetListenerERNS_10SBListenerE"]
            pub fn SBLaunchInfo_SetListener(
                this: *mut root::lldb::SBLaunchInfo,
                listener: *mut root::lldb::SBListener,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo17GetShadowListenerEv"]
            pub fn SBLaunchInfo_GetShadowListener(
                this: *mut root::lldb::SBLaunchInfo,
            ) -> root::lldb::SBListener;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo17SetShadowListenerERNS_10SBListenerE"]
            pub fn SBLaunchInfo_SetShadowListener(
                this: *mut root::lldb::SBLaunchInfo,
                listener: *mut root::lldb::SBListener,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo15GetNumArgumentsEv"]
            pub fn SBLaunchInfo_GetNumArguments(this: *mut root::lldb::SBLaunchInfo) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo18GetArgumentAtIndexEj"]
            pub fn SBLaunchInfo_GetArgumentAtIndex(
                this: *mut root::lldb::SBLaunchInfo,
                idx: u32,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo12SetArgumentsEPPKcb"]
            pub fn SBLaunchInfo_SetArguments(
                this: *mut root::lldb::SBLaunchInfo,
                argv: *mut *const ::std::os::raw::c_char,
                append: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo24GetNumEnvironmentEntriesEv"]
            pub fn SBLaunchInfo_GetNumEnvironmentEntries(
                this: *mut root::lldb::SBLaunchInfo,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo26GetEnvironmentEntryAtIndexEj"]
            pub fn SBLaunchInfo_GetEnvironmentEntryAtIndex(
                this: *mut root::lldb::SBLaunchInfo,
                idx: u32,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo21SetEnvironmentEntriesEPPKcb"]
            pub fn SBLaunchInfo_SetEnvironmentEntries(
                this: *mut root::lldb::SBLaunchInfo,
                envp: *mut *const ::std::os::raw::c_char,
                append: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo14SetEnvironmentERKNS_13SBEnvironmentEb"]
            pub fn SBLaunchInfo_SetEnvironment(
                this: *mut root::lldb::SBLaunchInfo,
                env: *const root::lldb::SBEnvironment,
                append: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo14GetEnvironmentEv"]
            pub fn SBLaunchInfo_GetEnvironment(
                this: *mut root::lldb::SBLaunchInfo,
            ) -> root::lldb::SBEnvironment;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo5ClearEv"]
            pub fn SBLaunchInfo_Clear(this: *mut root::lldb::SBLaunchInfo);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBLaunchInfo19GetWorkingDirectoryEv"]
            pub fn SBLaunchInfo_GetWorkingDirectory(
                this: *const root::lldb::SBLaunchInfo,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo19SetWorkingDirectoryEPKc"]
            pub fn SBLaunchInfo_SetWorkingDirectory(
                this: *mut root::lldb::SBLaunchInfo,
                working_dir: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo14GetLaunchFlagsEv"]
            pub fn SBLaunchInfo_GetLaunchFlags(this: *mut root::lldb::SBLaunchInfo) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo14SetLaunchFlagsEj"]
            pub fn SBLaunchInfo_SetLaunchFlags(this: *mut root::lldb::SBLaunchInfo, flags: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo20GetProcessPluginNameEv"]
            pub fn SBLaunchInfo_GetProcessPluginName(
                this: *mut root::lldb::SBLaunchInfo,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo20SetProcessPluginNameEPKc"]
            pub fn SBLaunchInfo_SetProcessPluginName(
                this: *mut root::lldb::SBLaunchInfo,
                plugin_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo8GetShellEv"]
            pub fn SBLaunchInfo_GetShell(
                this: *mut root::lldb::SBLaunchInfo,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo8SetShellEPKc"]
            pub fn SBLaunchInfo_SetShell(
                this: *mut root::lldb::SBLaunchInfo,
                path: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo23GetShellExpandArgumentsEv"]
            pub fn SBLaunchInfo_GetShellExpandArguments(
                this: *mut root::lldb::SBLaunchInfo,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo23SetShellExpandArgumentsEb"]
            pub fn SBLaunchInfo_SetShellExpandArguments(
                this: *mut root::lldb::SBLaunchInfo,
                expand: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo14GetResumeCountEv"]
            pub fn SBLaunchInfo_GetResumeCount(this: *mut root::lldb::SBLaunchInfo) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo14SetResumeCountEj"]
            pub fn SBLaunchInfo_SetResumeCount(this: *mut root::lldb::SBLaunchInfo, c: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo18AddCloseFileActionEi"]
            pub fn SBLaunchInfo_AddCloseFileAction(
                this: *mut root::lldb::SBLaunchInfo,
                fd: ::std::os::raw::c_int,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo22AddDuplicateFileActionEii"]
            pub fn SBLaunchInfo_AddDuplicateFileAction(
                this: *mut root::lldb::SBLaunchInfo,
                fd: ::std::os::raw::c_int,
                dup_fd: ::std::os::raw::c_int,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo17AddOpenFileActionEiPKcbb"]
            pub fn SBLaunchInfo_AddOpenFileAction(
                this: *mut root::lldb::SBLaunchInfo,
                fd: ::std::os::raw::c_int,
                path: *const ::std::os::raw::c_char,
                read: bool,
                write: bool,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo21AddSuppressFileActionEibb"]
            pub fn SBLaunchInfo_AddSuppressFileAction(
                this: *mut root::lldb::SBLaunchInfo,
                fd: ::std::os::raw::c_int,
                read: bool,
                write: bool,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo18SetLaunchEventDataEPKc"]
            pub fn SBLaunchInfo_SetLaunchEventData(
                this: *mut root::lldb::SBLaunchInfo,
                data: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBLaunchInfo18GetLaunchEventDataEv"]
            pub fn SBLaunchInfo_GetLaunchEventData(
                this: *const root::lldb::SBLaunchInfo,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBLaunchInfo16GetDetachOnErrorEv"]
            pub fn SBLaunchInfo_GetDetachOnError(this: *const root::lldb::SBLaunchInfo) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo16SetDetachOnErrorEb"]
            pub fn SBLaunchInfo_SetDetachOnError(this: *mut root::lldb::SBLaunchInfo, enable: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBLaunchInfo27GetScriptedProcessClassNameEv"]
            pub fn SBLaunchInfo_GetScriptedProcessClassName(
                this: *const root::lldb::SBLaunchInfo,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo27SetScriptedProcessClassNameEPKc"]
            pub fn SBLaunchInfo_SetScriptedProcessClassName(
                this: *mut root::lldb::SBLaunchInfo,
                class_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBLaunchInfo28GetScriptedProcessDictionaryEv"]
            pub fn SBLaunchInfo_GetScriptedProcessDictionary(
                this: *const root::lldb::SBLaunchInfo,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo28SetScriptedProcessDictionaryENS_16SBStructuredDataE"]
            pub fn SBLaunchInfo_SetScriptedProcessDictionary(
                this: *mut root::lldb::SBLaunchInfo,
                dict: root::lldb::SBStructuredData,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBLaunchInfo3refEv"]
            pub fn SBLaunchInfo_ref(
                this: *const root::lldb::SBLaunchInfo,
            ) -> *const root::lldb_private::ProcessLaunchInfo;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfo7set_refERKN12lldb_private17ProcessLaunchInfoE"]
            pub fn SBLaunchInfo_set_ref(
                this: *mut root::lldb::SBLaunchInfo,
                info: *const root::lldb_private::ProcessLaunchInfo,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfoC1EPPKc"]
            pub fn SBLaunchInfo_SBLaunchInfo(
                this: *mut root::lldb::SBLaunchInfo,
                argv: *mut *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfoC1ERKS0_"]
            pub fn SBLaunchInfo_SBLaunchInfo1(
                this: *mut root::lldb::SBLaunchInfo,
                rhs: *const root::lldb::SBLaunchInfo,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBLaunchInfoD1Ev"]
            pub fn SBLaunchInfo_SBLaunchInfo_destructor(this: *mut root::lldb::SBLaunchInfo);
        }
        impl SBLaunchInfo {
            #[inline]
            pub unsafe fn GetProcessID(&mut self) -> root::lldb::pid_t {
                SBLaunchInfo_GetProcessID(self)
            }
            #[inline]
            pub unsafe fn GetUserID(&mut self) -> u32 {
                SBLaunchInfo_GetUserID(self)
            }
            #[inline]
            pub unsafe fn GetGroupID(&mut self) -> u32 {
                SBLaunchInfo_GetGroupID(self)
            }
            #[inline]
            pub unsafe fn UserIDIsValid(&mut self) -> bool {
                SBLaunchInfo_UserIDIsValid(self)
            }
            #[inline]
            pub unsafe fn GroupIDIsValid(&mut self) -> bool {
                SBLaunchInfo_GroupIDIsValid(self)
            }
            #[inline]
            pub unsafe fn SetUserID(&mut self, uid: u32) {
                SBLaunchInfo_SetUserID(self, uid)
            }
            #[inline]
            pub unsafe fn SetGroupID(&mut self, gid: u32) {
                SBLaunchInfo_SetGroupID(self, gid)
            }
            #[inline]
            pub unsafe fn GetExecutableFile(&mut self) -> root::lldb::SBFileSpec {
                SBLaunchInfo_GetExecutableFile(self)
            }
            #[inline]
            pub unsafe fn SetExecutableFile(
                &mut self,
                exe_file: root::lldb::SBFileSpec,
                add_as_first_arg: bool,
            ) {
                SBLaunchInfo_SetExecutableFile(self, exe_file, add_as_first_arg)
            }
            #[inline]
            pub unsafe fn GetListener(&mut self) -> root::lldb::SBListener {
                SBLaunchInfo_GetListener(self)
            }
            #[inline]
            pub unsafe fn SetListener(&mut self, listener: *mut root::lldb::SBListener) {
                SBLaunchInfo_SetListener(self, listener)
            }
            #[inline]
            pub unsafe fn GetShadowListener(&mut self) -> root::lldb::SBListener {
                SBLaunchInfo_GetShadowListener(self)
            }
            #[inline]
            pub unsafe fn SetShadowListener(&mut self, listener: *mut root::lldb::SBListener) {
                SBLaunchInfo_SetShadowListener(self, listener)
            }
            #[inline]
            pub unsafe fn GetNumArguments(&mut self) -> u32 {
                SBLaunchInfo_GetNumArguments(self)
            }
            #[inline]
            pub unsafe fn GetArgumentAtIndex(&mut self, idx: u32) -> *const ::std::os::raw::c_char {
                SBLaunchInfo_GetArgumentAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn SetArguments(
                &mut self,
                argv: *mut *const ::std::os::raw::c_char,
                append: bool,
            ) {
                SBLaunchInfo_SetArguments(self, argv, append)
            }
            #[inline]
            pub unsafe fn GetNumEnvironmentEntries(&mut self) -> u32 {
                SBLaunchInfo_GetNumEnvironmentEntries(self)
            }
            #[inline]
            pub unsafe fn GetEnvironmentEntryAtIndex(
                &mut self,
                idx: u32,
            ) -> *const ::std::os::raw::c_char {
                SBLaunchInfo_GetEnvironmentEntryAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn SetEnvironmentEntries(
                &mut self,
                envp: *mut *const ::std::os::raw::c_char,
                append: bool,
            ) {
                SBLaunchInfo_SetEnvironmentEntries(self, envp, append)
            }
            #[inline]
            pub unsafe fn SetEnvironment(
                &mut self,
                env: *const root::lldb::SBEnvironment,
                append: bool,
            ) {
                SBLaunchInfo_SetEnvironment(self, env, append)
            }
            #[inline]
            pub unsafe fn GetEnvironment(&mut self) -> root::lldb::SBEnvironment {
                SBLaunchInfo_GetEnvironment(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBLaunchInfo_Clear(self)
            }
            #[inline]
            pub unsafe fn GetWorkingDirectory(&self) -> *const ::std::os::raw::c_char {
                SBLaunchInfo_GetWorkingDirectory(self)
            }
            #[inline]
            pub unsafe fn SetWorkingDirectory(
                &mut self,
                working_dir: *const ::std::os::raw::c_char,
            ) {
                SBLaunchInfo_SetWorkingDirectory(self, working_dir)
            }
            #[inline]
            pub unsafe fn GetLaunchFlags(&mut self) -> u32 {
                SBLaunchInfo_GetLaunchFlags(self)
            }
            #[inline]
            pub unsafe fn SetLaunchFlags(&mut self, flags: u32) {
                SBLaunchInfo_SetLaunchFlags(self, flags)
            }
            #[inline]
            pub unsafe fn GetProcessPluginName(&mut self) -> *const ::std::os::raw::c_char {
                SBLaunchInfo_GetProcessPluginName(self)
            }
            #[inline]
            pub unsafe fn SetProcessPluginName(
                &mut self,
                plugin_name: *const ::std::os::raw::c_char,
            ) {
                SBLaunchInfo_SetProcessPluginName(self, plugin_name)
            }
            #[inline]
            pub unsafe fn GetShell(&mut self) -> *const ::std::os::raw::c_char {
                SBLaunchInfo_GetShell(self)
            }
            #[inline]
            pub unsafe fn SetShell(&mut self, path: *const ::std::os::raw::c_char) {
                SBLaunchInfo_SetShell(self, path)
            }
            #[inline]
            pub unsafe fn GetShellExpandArguments(&mut self) -> bool {
                SBLaunchInfo_GetShellExpandArguments(self)
            }
            #[inline]
            pub unsafe fn SetShellExpandArguments(&mut self, expand: bool) {
                SBLaunchInfo_SetShellExpandArguments(self, expand)
            }
            #[inline]
            pub unsafe fn GetResumeCount(&mut self) -> u32 {
                SBLaunchInfo_GetResumeCount(self)
            }
            #[inline]
            pub unsafe fn SetResumeCount(&mut self, c: u32) {
                SBLaunchInfo_SetResumeCount(self, c)
            }
            #[inline]
            pub unsafe fn AddCloseFileAction(&mut self, fd: ::std::os::raw::c_int) -> bool {
                SBLaunchInfo_AddCloseFileAction(self, fd)
            }
            #[inline]
            pub unsafe fn AddDuplicateFileAction(
                &mut self,
                fd: ::std::os::raw::c_int,
                dup_fd: ::std::os::raw::c_int,
            ) -> bool {
                SBLaunchInfo_AddDuplicateFileAction(self, fd, dup_fd)
            }
            #[inline]
            pub unsafe fn AddOpenFileAction(
                &mut self,
                fd: ::std::os::raw::c_int,
                path: *const ::std::os::raw::c_char,
                read: bool,
                write: bool,
            ) -> bool {
                SBLaunchInfo_AddOpenFileAction(self, fd, path, read, write)
            }
            #[inline]
            pub unsafe fn AddSuppressFileAction(
                &mut self,
                fd: ::std::os::raw::c_int,
                read: bool,
                write: bool,
            ) -> bool {
                SBLaunchInfo_AddSuppressFileAction(self, fd, read, write)
            }
            #[inline]
            pub unsafe fn SetLaunchEventData(&mut self, data: *const ::std::os::raw::c_char) {
                SBLaunchInfo_SetLaunchEventData(self, data)
            }
            #[inline]
            pub unsafe fn GetLaunchEventData(&self) -> *const ::std::os::raw::c_char {
                SBLaunchInfo_GetLaunchEventData(self)
            }
            #[inline]
            pub unsafe fn GetDetachOnError(&self) -> bool {
                SBLaunchInfo_GetDetachOnError(self)
            }
            #[inline]
            pub unsafe fn SetDetachOnError(&mut self, enable: bool) {
                SBLaunchInfo_SetDetachOnError(self, enable)
            }
            #[inline]
            pub unsafe fn GetScriptedProcessClassName(&self) -> *const ::std::os::raw::c_char {
                SBLaunchInfo_GetScriptedProcessClassName(self)
            }
            #[inline]
            pub unsafe fn SetScriptedProcessClassName(
                &mut self,
                class_name: *const ::std::os::raw::c_char,
            ) {
                SBLaunchInfo_SetScriptedProcessClassName(self, class_name)
            }
            #[inline]
            pub unsafe fn GetScriptedProcessDictionary(&self) -> root::lldb::SBStructuredData {
                SBLaunchInfo_GetScriptedProcessDictionary(self)
            }
            #[inline]
            pub unsafe fn SetScriptedProcessDictionary(
                &mut self,
                dict: root::lldb::SBStructuredData,
            ) {
                SBLaunchInfo_SetScriptedProcessDictionary(self, dict)
            }
            #[inline]
            pub unsafe fn ref_(&self) -> *const root::lldb_private::ProcessLaunchInfo {
                SBLaunchInfo_ref(self)
            }
            #[inline]
            pub unsafe fn set_ref(&mut self, info: *const root::lldb_private::ProcessLaunchInfo) {
                SBLaunchInfo_set_ref(self, info)
            }
            #[inline]
            pub unsafe fn new(argv: *mut *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBLaunchInfo_SBLaunchInfo(__bindgen_tmp.as_mut_ptr(), argv);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBLaunchInfo) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBLaunchInfo_SBLaunchInfo1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBLaunchInfo_SBLaunchInfo_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBStatisticsOptions {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBStatisticsOptions14SetSummaryOnlyEb"]
            pub fn SBStatisticsOptions_SetSummaryOnly(
                this: *mut root::lldb::SBStatisticsOptions,
                b: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBStatisticsOptions14GetSummaryOnlyEv"]
            pub fn SBStatisticsOptions_GetSummaryOnly(
                this: *mut root::lldb::SBStatisticsOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBStatisticsOptions17SetIncludeTargetsEb"]
            pub fn SBStatisticsOptions_SetIncludeTargets(
                this: *mut root::lldb::SBStatisticsOptions,
                b: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBStatisticsOptions17GetIncludeTargetsEv"]
            pub fn SBStatisticsOptions_GetIncludeTargets(
                this: *const root::lldb::SBStatisticsOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBStatisticsOptions17SetIncludeModulesEb"]
            pub fn SBStatisticsOptions_SetIncludeModules(
                this: *mut root::lldb::SBStatisticsOptions,
                b: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBStatisticsOptions17GetIncludeModulesEv"]
            pub fn SBStatisticsOptions_GetIncludeModules(
                this: *const root::lldb::SBStatisticsOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBStatisticsOptions20SetIncludeTranscriptEb"]
            pub fn SBStatisticsOptions_SetIncludeTranscript(
                this: *mut root::lldb::SBStatisticsOptions,
                b: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBStatisticsOptions20GetIncludeTranscriptEv"]
            pub fn SBStatisticsOptions_GetIncludeTranscript(
                this: *const root::lldb::SBStatisticsOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBStatisticsOptions30SetReportAllAvailableDebugInfoEb"]
            pub fn SBStatisticsOptions_SetReportAllAvailableDebugInfo(
                this: *mut root::lldb::SBStatisticsOptions,
                b: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBStatisticsOptions30GetReportAllAvailableDebugInfoEv"]
            pub fn SBStatisticsOptions_GetReportAllAvailableDebugInfo(
                this: *mut root::lldb::SBStatisticsOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBStatisticsOptions3refEv"]
            pub fn SBStatisticsOptions_ref(
                this: *const root::lldb::SBStatisticsOptions,
            ) -> *const root::lldb_private::StatisticsOptions;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBStatisticsOptionsC1Ev"]
            pub fn SBStatisticsOptions_SBStatisticsOptions(
                this: *mut root::lldb::SBStatisticsOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBStatisticsOptionsC1ERKS0_"]
            pub fn SBStatisticsOptions_SBStatisticsOptions1(
                this: *mut root::lldb::SBStatisticsOptions,
                rhs: *const root::lldb::SBStatisticsOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBStatisticsOptionsD1Ev"]
            pub fn SBStatisticsOptions_SBStatisticsOptions_destructor(
                this: *mut root::lldb::SBStatisticsOptions,
            );
        }
        impl SBStatisticsOptions {
            #[inline]
            pub unsafe fn SetSummaryOnly(&mut self, b: bool) {
                SBStatisticsOptions_SetSummaryOnly(self, b)
            }
            #[inline]
            pub unsafe fn GetSummaryOnly(&mut self) -> bool {
                SBStatisticsOptions_GetSummaryOnly(self)
            }
            #[inline]
            pub unsafe fn SetIncludeTargets(&mut self, b: bool) {
                SBStatisticsOptions_SetIncludeTargets(self, b)
            }
            #[inline]
            pub unsafe fn GetIncludeTargets(&self) -> bool {
                SBStatisticsOptions_GetIncludeTargets(self)
            }
            #[inline]
            pub unsafe fn SetIncludeModules(&mut self, b: bool) {
                SBStatisticsOptions_SetIncludeModules(self, b)
            }
            #[inline]
            pub unsafe fn GetIncludeModules(&self) -> bool {
                SBStatisticsOptions_GetIncludeModules(self)
            }
            #[inline]
            pub unsafe fn SetIncludeTranscript(&mut self, b: bool) {
                SBStatisticsOptions_SetIncludeTranscript(self, b)
            }
            #[inline]
            pub unsafe fn GetIncludeTranscript(&self) -> bool {
                SBStatisticsOptions_GetIncludeTranscript(self)
            }
            #[inline]
            pub unsafe fn SetReportAllAvailableDebugInfo(&mut self, b: bool) {
                SBStatisticsOptions_SetReportAllAvailableDebugInfo(self, b)
            }
            #[inline]
            pub unsafe fn GetReportAllAvailableDebugInfo(&mut self) -> bool {
                SBStatisticsOptions_GetReportAllAvailableDebugInfo(self)
            }
            #[inline]
            pub unsafe fn ref_(&self) -> *const root::lldb_private::StatisticsOptions {
                SBStatisticsOptions_ref(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBStatisticsOptions_SBStatisticsOptions(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBStatisticsOptions) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBStatisticsOptions_SBStatisticsOptions1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBStatisticsOptions_SBStatisticsOptions_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBSymbolContextList {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBSymbolContextList7IsValidEv"]
            pub fn SBSymbolContextList_IsValid(
                this: *const root::lldb::SBSymbolContextList,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBSymbolContextList7GetSizeEv"]
            pub fn SBSymbolContextList_GetSize(this: *const root::lldb::SBSymbolContextList)
                -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBSymbolContextList17GetContextAtIndexEj"]
            pub fn SBSymbolContextList_GetContextAtIndex(
                this: *mut root::lldb::SBSymbolContextList,
                idx: u32,
            ) -> root::lldb::SBSymbolContext;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBSymbolContextList14GetDescriptionERNS_8SBStreamE"]
            pub fn SBSymbolContextList_GetDescription(
                this: *mut root::lldb::SBSymbolContextList,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBSymbolContextList6AppendERNS_15SBSymbolContextE"]
            pub fn SBSymbolContextList_Append(
                this: *mut root::lldb::SBSymbolContextList,
                sc: *mut root::lldb::SBSymbolContext,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBSymbolContextList6AppendERS0_"]
            pub fn SBSymbolContextList_Append1(
                this: *mut root::lldb::SBSymbolContextList,
                sc_list: *mut root::lldb::SBSymbolContextList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBSymbolContextList5ClearEv"]
            pub fn SBSymbolContextList_Clear(this: *mut root::lldb::SBSymbolContextList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBSymbolContextListC1Ev"]
            pub fn SBSymbolContextList_SBSymbolContextList(
                this: *mut root::lldb::SBSymbolContextList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBSymbolContextListC1ERKS0_"]
            pub fn SBSymbolContextList_SBSymbolContextList1(
                this: *mut root::lldb::SBSymbolContextList,
                rhs: *const root::lldb::SBSymbolContextList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBSymbolContextListD1Ev"]
            pub fn SBSymbolContextList_SBSymbolContextList_destructor(
                this: *mut root::lldb::SBSymbolContextList,
            );
        }
        impl SBSymbolContextList {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBSymbolContextList_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetSize(&self) -> u32 {
                SBSymbolContextList_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetContextAtIndex(&mut self, idx: u32) -> root::lldb::SBSymbolContext {
                SBSymbolContextList_GetContextAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBSymbolContextList_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn Append(&mut self, sc: *mut root::lldb::SBSymbolContext) {
                SBSymbolContextList_Append(self, sc)
            }
            #[inline]
            pub unsafe fn Append1(&mut self, sc_list: *mut root::lldb::SBSymbolContextList) {
                SBSymbolContextList_Append1(self, sc_list)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBSymbolContextList_Clear(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBSymbolContextList_SBSymbolContextList(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBSymbolContextList) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBSymbolContextList_SBSymbolContextList1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBSymbolContextList_SBSymbolContextList_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTypeMember {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBTypeMember7IsValidEv"]
            pub fn SBTypeMember_IsValid(this: *const root::lldb::SBTypeMember) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeMember7GetNameEv"]
            pub fn SBTypeMember_GetName(
                this: *mut root::lldb::SBTypeMember,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeMember7GetTypeEv"]
            pub fn SBTypeMember_GetType(this: *mut root::lldb::SBTypeMember) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeMember16GetOffsetInBytesEv"]
            pub fn SBTypeMember_GetOffsetInBytes(this: *mut root::lldb::SBTypeMember) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeMember15GetOffsetInBitsEv"]
            pub fn SBTypeMember_GetOffsetInBits(this: *mut root::lldb::SBTypeMember) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeMember10IsBitfieldEv"]
            pub fn SBTypeMember_IsBitfield(this: *mut root::lldb::SBTypeMember) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeMember21GetBitfieldSizeInBitsEv"]
            pub fn SBTypeMember_GetBitfieldSizeInBits(this: *mut root::lldb::SBTypeMember) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeMember14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE"]
            pub fn SBTypeMember_GetDescription(
                this: *mut root::lldb::SBTypeMember,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeMember5resetEPN12lldb_private14TypeMemberImplE"]
            pub fn SBTypeMember_reset(
                this: *mut root::lldb::SBTypeMember,
                arg1: *mut root::lldb_private::TypeMemberImpl,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeMember3refEv"]
            pub fn SBTypeMember_ref(
                this: *mut root::lldb::SBTypeMember,
            ) -> *mut root::lldb_private::TypeMemberImpl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBTypeMember3refEv"]
            pub fn SBTypeMember_ref1(
                this: *const root::lldb::SBTypeMember,
            ) -> *const root::lldb_private::TypeMemberImpl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeMemberC1Ev"]
            pub fn SBTypeMember_SBTypeMember(this: *mut root::lldb::SBTypeMember);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeMemberC1ERKS0_"]
            pub fn SBTypeMember_SBTypeMember1(
                this: *mut root::lldb::SBTypeMember,
                rhs: *const root::lldb::SBTypeMember,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeMemberD1Ev"]
            pub fn SBTypeMember_SBTypeMember_destructor(this: *mut root::lldb::SBTypeMember);
        }
        impl SBTypeMember {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBTypeMember_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetName(&mut self) -> *const ::std::os::raw::c_char {
                SBTypeMember_GetName(self)
            }
            #[inline]
            pub unsafe fn GetType(&mut self) -> root::lldb::SBType {
                SBTypeMember_GetType(self)
            }
            #[inline]
            pub unsafe fn GetOffsetInBytes(&mut self) -> u64 {
                SBTypeMember_GetOffsetInBytes(self)
            }
            #[inline]
            pub unsafe fn GetOffsetInBits(&mut self) -> u64 {
                SBTypeMember_GetOffsetInBits(self)
            }
            #[inline]
            pub unsafe fn IsBitfield(&mut self) -> bool {
                SBTypeMember_IsBitfield(self)
            }
            #[inline]
            pub unsafe fn GetBitfieldSizeInBits(&mut self) -> u32 {
                SBTypeMember_GetBitfieldSizeInBits(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool {
                SBTypeMember_GetDescription(self, description, description_level)
            }
            #[inline]
            pub unsafe fn reset(&mut self, arg1: *mut root::lldb_private::TypeMemberImpl) {
                SBTypeMember_reset(self, arg1)
            }
            #[inline]
            pub unsafe fn ref_(&mut self) -> *mut root::lldb_private::TypeMemberImpl {
                SBTypeMember_ref(self)
            }
            #[inline]
            pub unsafe fn ref1(&self) -> *const root::lldb_private::TypeMemberImpl {
                SBTypeMember_ref1(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeMember_SBTypeMember(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBTypeMember) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeMember_SBTypeMember1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBTypeMember_SBTypeMember_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTypeMemberFunction {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb20SBTypeMemberFunction7IsValidEv"]
            pub fn SBTypeMemberFunction_IsValid(
                this: *const root::lldb::SBTypeMemberFunction,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeMemberFunction7GetNameEv"]
            pub fn SBTypeMemberFunction_GetName(
                this: *mut root::lldb::SBTypeMemberFunction,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeMemberFunction16GetDemangledNameEv"]
            pub fn SBTypeMemberFunction_GetDemangledName(
                this: *mut root::lldb::SBTypeMemberFunction,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeMemberFunction14GetMangledNameEv"]
            pub fn SBTypeMemberFunction_GetMangledName(
                this: *mut root::lldb::SBTypeMemberFunction,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeMemberFunction7GetTypeEv"]
            pub fn SBTypeMemberFunction_GetType(
                this: *mut root::lldb::SBTypeMemberFunction,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeMemberFunction13GetReturnTypeEv"]
            pub fn SBTypeMemberFunction_GetReturnType(
                this: *mut root::lldb::SBTypeMemberFunction,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeMemberFunction20GetNumberOfArgumentsEv"]
            pub fn SBTypeMemberFunction_GetNumberOfArguments(
                this: *mut root::lldb::SBTypeMemberFunction,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeMemberFunction22GetArgumentTypeAtIndexEj"]
            pub fn SBTypeMemberFunction_GetArgumentTypeAtIndex(
                this: *mut root::lldb::SBTypeMemberFunction,
                arg1: u32,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeMemberFunction7GetKindEv"]
            pub fn SBTypeMemberFunction_GetKind(
                this: *mut root::lldb::SBTypeMemberFunction,
            ) -> root::lldb::MemberFunctionKind;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeMemberFunction14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE"]
            pub fn SBTypeMemberFunction_GetDescription(
                this: *mut root::lldb::SBTypeMemberFunction,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeMemberFunction5resetEPN12lldb_private22TypeMemberFunctionImplE"]
            pub fn SBTypeMemberFunction_reset(
                this: *mut root::lldb::SBTypeMemberFunction,
                arg1: *mut root::lldb_private::TypeMemberFunctionImpl,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeMemberFunction3refEv"]
            pub fn SBTypeMemberFunction_ref(
                this: *mut root::lldb::SBTypeMemberFunction,
            ) -> *mut root::lldb_private::TypeMemberFunctionImpl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb20SBTypeMemberFunction3refEv"]
            pub fn SBTypeMemberFunction_ref1(
                this: *const root::lldb::SBTypeMemberFunction,
            ) -> *const root::lldb_private::TypeMemberFunctionImpl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeMemberFunctionC1Ev"]
            pub fn SBTypeMemberFunction_SBTypeMemberFunction(
                this: *mut root::lldb::SBTypeMemberFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeMemberFunctionC1ERKS0_"]
            pub fn SBTypeMemberFunction_SBTypeMemberFunction1(
                this: *mut root::lldb::SBTypeMemberFunction,
                rhs: *const root::lldb::SBTypeMemberFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeMemberFunctionD1Ev"]
            pub fn SBTypeMemberFunction_SBTypeMemberFunction_destructor(
                this: *mut root::lldb::SBTypeMemberFunction,
            );
        }
        impl SBTypeMemberFunction {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBTypeMemberFunction_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetName(&mut self) -> *const ::std::os::raw::c_char {
                SBTypeMemberFunction_GetName(self)
            }
            #[inline]
            pub unsafe fn GetDemangledName(&mut self) -> *const ::std::os::raw::c_char {
                SBTypeMemberFunction_GetDemangledName(self)
            }
            #[inline]
            pub unsafe fn GetMangledName(&mut self) -> *const ::std::os::raw::c_char {
                SBTypeMemberFunction_GetMangledName(self)
            }
            #[inline]
            pub unsafe fn GetType(&mut self) -> root::lldb::SBType {
                SBTypeMemberFunction_GetType(self)
            }
            #[inline]
            pub unsafe fn GetReturnType(&mut self) -> root::lldb::SBType {
                SBTypeMemberFunction_GetReturnType(self)
            }
            #[inline]
            pub unsafe fn GetNumberOfArguments(&mut self) -> u32 {
                SBTypeMemberFunction_GetNumberOfArguments(self)
            }
            #[inline]
            pub unsafe fn GetArgumentTypeAtIndex(&mut self, arg1: u32) -> root::lldb::SBType {
                SBTypeMemberFunction_GetArgumentTypeAtIndex(self, arg1)
            }
            #[inline]
            pub unsafe fn GetKind(&mut self) -> root::lldb::MemberFunctionKind {
                SBTypeMemberFunction_GetKind(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool {
                SBTypeMemberFunction_GetDescription(self, description, description_level)
            }
            #[inline]
            pub unsafe fn reset(&mut self, arg1: *mut root::lldb_private::TypeMemberFunctionImpl) {
                SBTypeMemberFunction_reset(self, arg1)
            }
            #[inline]
            pub unsafe fn ref_(&mut self) -> *mut root::lldb_private::TypeMemberFunctionImpl {
                SBTypeMemberFunction_ref(self)
            }
            #[inline]
            pub unsafe fn ref1(&self) -> *const root::lldb_private::TypeMemberFunctionImpl {
                SBTypeMemberFunction_ref1(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeMemberFunction_SBTypeMemberFunction(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBTypeMemberFunction) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeMemberFunction_SBTypeMemberFunction1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBTypeMemberFunction_SBTypeMemberFunction_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTypeStaticField {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb17SBTypeStaticField7IsValidEv"]
            pub fn SBTypeStaticField_IsValid(this: *const root::lldb::SBTypeStaticField) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBTypeStaticField7GetNameEv"]
            pub fn SBTypeStaticField_GetName(
                this: *mut root::lldb::SBTypeStaticField,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBTypeStaticField14GetMangledNameEv"]
            pub fn SBTypeStaticField_GetMangledName(
                this: *mut root::lldb::SBTypeStaticField,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBTypeStaticField7GetTypeEv"]
            pub fn SBTypeStaticField_GetType(
                this: *mut root::lldb::SBTypeStaticField,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBTypeStaticField16GetConstantValueENS_8SBTargetE"]
            pub fn SBTypeStaticField_GetConstantValue(
                this: *mut root::lldb::SBTypeStaticField,
                target: root::lldb::SBTarget,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBTypeStaticFieldC1Ev"]
            pub fn SBTypeStaticField_SBTypeStaticField(this: *mut root::lldb::SBTypeStaticField);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBTypeStaticFieldC1ERKS0_"]
            pub fn SBTypeStaticField_SBTypeStaticField1(
                this: *mut root::lldb::SBTypeStaticField,
                rhs: *const root::lldb::SBTypeStaticField,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBTypeStaticFieldC1EN12lldb_private12CompilerDeclE"]
            pub fn SBTypeStaticField_SBTypeStaticField2(
                this: *mut root::lldb::SBTypeStaticField,
                decl: root::lldb_private::CompilerDecl,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBTypeStaticFieldD1Ev"]
            pub fn SBTypeStaticField_SBTypeStaticField_destructor(
                this: *mut root::lldb::SBTypeStaticField,
            );
        }
        impl SBTypeStaticField {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBTypeStaticField_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetName(&mut self) -> *const ::std::os::raw::c_char {
                SBTypeStaticField_GetName(self)
            }
            #[inline]
            pub unsafe fn GetMangledName(&mut self) -> *const ::std::os::raw::c_char {
                SBTypeStaticField_GetMangledName(self)
            }
            #[inline]
            pub unsafe fn GetType(&mut self) -> root::lldb::SBType {
                SBTypeStaticField_GetType(self)
            }
            #[inline]
            pub unsafe fn GetConstantValue(
                &mut self,
                target: root::lldb::SBTarget,
            ) -> root::lldb::SBValue {
                SBTypeStaticField_GetConstantValue(self, target)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeStaticField_SBTypeStaticField(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBTypeStaticField) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeStaticField_SBTypeStaticField1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(decl: root::lldb_private::CompilerDecl) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeStaticField_SBTypeStaticField2(__bindgen_tmp.as_mut_ptr(), decl);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBTypeStaticField_SBTypeStaticField_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBType {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb6SBType7IsValidEv"]
            pub fn SBType_IsValid(this: *const root::lldb::SBType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType11GetByteSizeEv"]
            pub fn SBType_GetByteSize(this: *mut root::lldb::SBType) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType12GetByteAlignEv"]
            pub fn SBType_GetByteAlign(this: *mut root::lldb::SBType) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType13IsPointerTypeEv"]
            pub fn SBType_IsPointerType(this: *mut root::lldb::SBType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType15IsReferenceTypeEv"]
            pub fn SBType_IsReferenceType(this: *mut root::lldb::SBType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType14IsFunctionTypeEv"]
            pub fn SBType_IsFunctionType(this: *mut root::lldb::SBType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType18IsPolymorphicClassEv"]
            pub fn SBType_IsPolymorphicClass(this: *mut root::lldb::SBType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType11IsArrayTypeEv"]
            pub fn SBType_IsArrayType(this: *mut root::lldb::SBType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType12IsVectorTypeEv"]
            pub fn SBType_IsVectorType(this: *mut root::lldb::SBType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType13IsTypedefTypeEv"]
            pub fn SBType_IsTypedefType(this: *mut root::lldb::SBType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType15IsAnonymousTypeEv"]
            pub fn SBType_IsAnonymousType(this: *mut root::lldb::SBType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType23IsScopedEnumerationTypeEv"]
            pub fn SBType_IsScopedEnumerationType(this: *mut root::lldb::SBType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType15IsAggregateTypeEv"]
            pub fn SBType_IsAggregateType(this: *mut root::lldb::SBType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType14GetPointerTypeEv"]
            pub fn SBType_GetPointerType(this: *mut root::lldb::SBType) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType14GetPointeeTypeEv"]
            pub fn SBType_GetPointeeType(this: *mut root::lldb::SBType) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType16GetReferenceTypeEv"]
            pub fn SBType_GetReferenceType(this: *mut root::lldb::SBType) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType16GetTypedefedTypeEv"]
            pub fn SBType_GetTypedefedType(this: *mut root::lldb::SBType) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType19GetDereferencedTypeEv"]
            pub fn SBType_GetDereferencedType(this: *mut root::lldb::SBType) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType18GetUnqualifiedTypeEv"]
            pub fn SBType_GetUnqualifiedType(this: *mut root::lldb::SBType) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType19GetArrayElementTypeEv"]
            pub fn SBType_GetArrayElementType(this: *mut root::lldb::SBType) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType12GetArrayTypeEm"]
            pub fn SBType_GetArrayType(
                this: *mut root::lldb::SBType,
                size: u64,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType20GetVectorElementTypeEv"]
            pub fn SBType_GetVectorElementType(this: *mut root::lldb::SBType)
                -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType16GetCanonicalTypeEv"]
            pub fn SBType_GetCanonicalType(this: *mut root::lldb::SBType) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType25GetEnumerationIntegerTypeEv"]
            pub fn SBType_GetEnumerationIntegerType(
                this: *mut root::lldb::SBType,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType12GetBasicTypeEv"]
            pub fn SBType_GetBasicType(this: *mut root::lldb::SBType) -> root::lldb::BasicType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType12GetBasicTypeENS_9BasicTypeE"]
            pub fn SBType_GetBasicType1(
                this: *mut root::lldb::SBType,
                type_: root::lldb::BasicType,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType17GetNumberOfFieldsEv"]
            pub fn SBType_GetNumberOfFields(this: *mut root::lldb::SBType) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType28GetNumberOfDirectBaseClassesEv"]
            pub fn SBType_GetNumberOfDirectBaseClasses(this: *mut root::lldb::SBType) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType29GetNumberOfVirtualBaseClassesEv"]
            pub fn SBType_GetNumberOfVirtualBaseClasses(this: *mut root::lldb::SBType) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType15GetFieldAtIndexEj"]
            pub fn SBType_GetFieldAtIndex(
                this: *mut root::lldb::SBType,
                idx: u32,
            ) -> root::lldb::SBTypeMember;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType25GetDirectBaseClassAtIndexEj"]
            pub fn SBType_GetDirectBaseClassAtIndex(
                this: *mut root::lldb::SBType,
                idx: u32,
            ) -> root::lldb::SBTypeMember;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType26GetVirtualBaseClassAtIndexEj"]
            pub fn SBType_GetVirtualBaseClassAtIndex(
                this: *mut root::lldb::SBType,
                idx: u32,
            ) -> root::lldb::SBTypeMember;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType22GetStaticFieldWithNameEPKc"]
            pub fn SBType_GetStaticFieldWithName(
                this: *mut root::lldb::SBType,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTypeStaticField;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType14GetEnumMembersEv"]
            pub fn SBType_GetEnumMembers(
                this: *mut root::lldb::SBType,
            ) -> root::lldb::SBTypeEnumMemberList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType28GetNumberOfTemplateArgumentsEv"]
            pub fn SBType_GetNumberOfTemplateArguments(this: *mut root::lldb::SBType) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType23GetTemplateArgumentTypeEj"]
            pub fn SBType_GetTemplateArgumentType(
                this: *mut root::lldb::SBType,
                idx: u32,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType23GetTemplateArgumentKindEj"]
            pub fn SBType_GetTemplateArgumentKind(
                this: *mut root::lldb::SBType,
                idx: u32,
            ) -> root::lldb::TemplateArgumentKind;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType21GetFunctionReturnTypeEv"]
            pub fn SBType_GetFunctionReturnType(
                this: *mut root::lldb::SBType,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType24GetFunctionArgumentTypesEv"]
            pub fn SBType_GetFunctionArgumentTypes(
                this: *mut root::lldb::SBType,
            ) -> root::lldb::SBTypeList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType26GetNumberOfMemberFunctionsEv"]
            pub fn SBType_GetNumberOfMemberFunctions(this: *mut root::lldb::SBType) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType24GetMemberFunctionAtIndexEj"]
            pub fn SBType_GetMemberFunctionAtIndex(
                this: *mut root::lldb::SBType,
                idx: u32,
            ) -> root::lldb::SBTypeMemberFunction;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType9GetModuleEv"]
            pub fn SBType_GetModule(this: *mut root::lldb::SBType) -> root::lldb::SBModule;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType7GetNameEv"]
            pub fn SBType_GetName(this: *mut root::lldb::SBType) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType18GetDisplayTypeNameEv"]
            pub fn SBType_GetDisplayTypeName(
                this: *mut root::lldb::SBType,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType12GetTypeClassEv"]
            pub fn SBType_GetTypeClass(this: *mut root::lldb::SBType) -> root::lldb::TypeClass;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType14IsTypeCompleteEv"]
            pub fn SBType_IsTypeComplete(this: *mut root::lldb::SBType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType12GetTypeFlagsEv"]
            pub fn SBType_GetTypeFlags(this: *mut root::lldb::SBType) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE"]
            pub fn SBType_GetDescription(
                this: *mut root::lldb::SBType,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType20FindDirectNestedTypeEPKc"]
            pub fn SBType_FindDirectNestedType(
                this: *mut root::lldb::SBType,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType3refEv"]
            pub fn SBType_ref(this: *mut root::lldb::SBType) -> *mut root::lldb_private::TypeImpl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb6SBType3refEv"]
            pub fn SBType_ref1(
                this: *const root::lldb::SBType,
            ) -> *const root::lldb_private::TypeImpl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType5GetSPEv"]
            pub fn SBType_GetSP(this: *mut root::lldb::SBType) -> root::lldb::TypeImplSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBType5SetSPERKSt10shared_ptrIN12lldb_private8TypeImplEE"]
            pub fn SBType_SetSP(
                this: *mut root::lldb::SBType,
                type_impl_sp: *const root::lldb::TypeImplSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBTypeC1Ev"]
            pub fn SBType_SBType(this: *mut root::lldb::SBType);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBTypeC1ERKS0_"]
            pub fn SBType_SBType1(this: *mut root::lldb::SBType, rhs: *const root::lldb::SBType);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBTypeC1ERKN12lldb_private12CompilerTypeE"]
            pub fn SBType_SBType2(
                this: *mut root::lldb::SBType,
                arg1: *const root::lldb_private::CompilerType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBTypeC1ERKSt10shared_ptrIN12lldb_private4TypeEE"]
            pub fn SBType_SBType3(this: *mut root::lldb::SBType, arg1: *const root::lldb::TypeSP);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBTypeC1ERKSt10shared_ptrIN12lldb_private8TypeImplEE"]
            pub fn SBType_SBType4(
                this: *mut root::lldb::SBType,
                arg1: *const root::lldb::TypeImplSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBTypeD1Ev"]
            pub fn SBType_SBType_destructor(this: *mut root::lldb::SBType);
        }
        impl SBType {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBType_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetByteSize(&mut self) -> u64 {
                SBType_GetByteSize(self)
            }
            #[inline]
            pub unsafe fn GetByteAlign(&mut self) -> u64 {
                SBType_GetByteAlign(self)
            }
            #[inline]
            pub unsafe fn IsPointerType(&mut self) -> bool {
                SBType_IsPointerType(self)
            }
            #[inline]
            pub unsafe fn IsReferenceType(&mut self) -> bool {
                SBType_IsReferenceType(self)
            }
            #[inline]
            pub unsafe fn IsFunctionType(&mut self) -> bool {
                SBType_IsFunctionType(self)
            }
            #[inline]
            pub unsafe fn IsPolymorphicClass(&mut self) -> bool {
                SBType_IsPolymorphicClass(self)
            }
            #[inline]
            pub unsafe fn IsArrayType(&mut self) -> bool {
                SBType_IsArrayType(self)
            }
            #[inline]
            pub unsafe fn IsVectorType(&mut self) -> bool {
                SBType_IsVectorType(self)
            }
            #[inline]
            pub unsafe fn IsTypedefType(&mut self) -> bool {
                SBType_IsTypedefType(self)
            }
            #[inline]
            pub unsafe fn IsAnonymousType(&mut self) -> bool {
                SBType_IsAnonymousType(self)
            }
            #[inline]
            pub unsafe fn IsScopedEnumerationType(&mut self) -> bool {
                SBType_IsScopedEnumerationType(self)
            }
            #[inline]
            pub unsafe fn IsAggregateType(&mut self) -> bool {
                SBType_IsAggregateType(self)
            }
            #[inline]
            pub unsafe fn GetPointerType(&mut self) -> root::lldb::SBType {
                SBType_GetPointerType(self)
            }
            #[inline]
            pub unsafe fn GetPointeeType(&mut self) -> root::lldb::SBType {
                SBType_GetPointeeType(self)
            }
            #[inline]
            pub unsafe fn GetReferenceType(&mut self) -> root::lldb::SBType {
                SBType_GetReferenceType(self)
            }
            #[inline]
            pub unsafe fn GetTypedefedType(&mut self) -> root::lldb::SBType {
                SBType_GetTypedefedType(self)
            }
            #[inline]
            pub unsafe fn GetDereferencedType(&mut self) -> root::lldb::SBType {
                SBType_GetDereferencedType(self)
            }
            #[inline]
            pub unsafe fn GetUnqualifiedType(&mut self) -> root::lldb::SBType {
                SBType_GetUnqualifiedType(self)
            }
            #[inline]
            pub unsafe fn GetArrayElementType(&mut self) -> root::lldb::SBType {
                SBType_GetArrayElementType(self)
            }
            #[inline]
            pub unsafe fn GetArrayType(&mut self, size: u64) -> root::lldb::SBType {
                SBType_GetArrayType(self, size)
            }
            #[inline]
            pub unsafe fn GetVectorElementType(&mut self) -> root::lldb::SBType {
                SBType_GetVectorElementType(self)
            }
            #[inline]
            pub unsafe fn GetCanonicalType(&mut self) -> root::lldb::SBType {
                SBType_GetCanonicalType(self)
            }
            #[inline]
            pub unsafe fn GetEnumerationIntegerType(&mut self) -> root::lldb::SBType {
                SBType_GetEnumerationIntegerType(self)
            }
            #[inline]
            pub unsafe fn GetBasicType(&mut self) -> root::lldb::BasicType {
                SBType_GetBasicType(self)
            }
            #[inline]
            pub unsafe fn GetBasicType1(
                &mut self,
                type_: root::lldb::BasicType,
            ) -> root::lldb::SBType {
                SBType_GetBasicType1(self, type_)
            }
            #[inline]
            pub unsafe fn GetNumberOfFields(&mut self) -> u32 {
                SBType_GetNumberOfFields(self)
            }
            #[inline]
            pub unsafe fn GetNumberOfDirectBaseClasses(&mut self) -> u32 {
                SBType_GetNumberOfDirectBaseClasses(self)
            }
            #[inline]
            pub unsafe fn GetNumberOfVirtualBaseClasses(&mut self) -> u32 {
                SBType_GetNumberOfVirtualBaseClasses(self)
            }
            #[inline]
            pub unsafe fn GetFieldAtIndex(&mut self, idx: u32) -> root::lldb::SBTypeMember {
                SBType_GetFieldAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetDirectBaseClassAtIndex(
                &mut self,
                idx: u32,
            ) -> root::lldb::SBTypeMember {
                SBType_GetDirectBaseClassAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetVirtualBaseClassAtIndex(
                &mut self,
                idx: u32,
            ) -> root::lldb::SBTypeMember {
                SBType_GetVirtualBaseClassAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetStaticFieldWithName(
                &mut self,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTypeStaticField {
                SBType_GetStaticFieldWithName(self, name)
            }
            #[inline]
            pub unsafe fn GetEnumMembers(&mut self) -> root::lldb::SBTypeEnumMemberList {
                SBType_GetEnumMembers(self)
            }
            #[inline]
            pub unsafe fn GetNumberOfTemplateArguments(&mut self) -> u32 {
                SBType_GetNumberOfTemplateArguments(self)
            }
            #[inline]
            pub unsafe fn GetTemplateArgumentType(&mut self, idx: u32) -> root::lldb::SBType {
                SBType_GetTemplateArgumentType(self, idx)
            }
            #[inline]
            pub unsafe fn GetTemplateArgumentKind(
                &mut self,
                idx: u32,
            ) -> root::lldb::TemplateArgumentKind {
                SBType_GetTemplateArgumentKind(self, idx)
            }
            #[inline]
            pub unsafe fn GetFunctionReturnType(&mut self) -> root::lldb::SBType {
                SBType_GetFunctionReturnType(self)
            }
            #[inline]
            pub unsafe fn GetFunctionArgumentTypes(&mut self) -> root::lldb::SBTypeList {
                SBType_GetFunctionArgumentTypes(self)
            }
            #[inline]
            pub unsafe fn GetNumberOfMemberFunctions(&mut self) -> u32 {
                SBType_GetNumberOfMemberFunctions(self)
            }
            #[inline]
            pub unsafe fn GetMemberFunctionAtIndex(
                &mut self,
                idx: u32,
            ) -> root::lldb::SBTypeMemberFunction {
                SBType_GetMemberFunctionAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetModule(&mut self) -> root::lldb::SBModule {
                SBType_GetModule(self)
            }
            #[inline]
            pub unsafe fn GetName(&mut self) -> *const ::std::os::raw::c_char {
                SBType_GetName(self)
            }
            #[inline]
            pub unsafe fn GetDisplayTypeName(&mut self) -> *const ::std::os::raw::c_char {
                SBType_GetDisplayTypeName(self)
            }
            #[inline]
            pub unsafe fn GetTypeClass(&mut self) -> root::lldb::TypeClass {
                SBType_GetTypeClass(self)
            }
            #[inline]
            pub unsafe fn IsTypeComplete(&mut self) -> bool {
                SBType_IsTypeComplete(self)
            }
            #[inline]
            pub unsafe fn GetTypeFlags(&mut self) -> u32 {
                SBType_GetTypeFlags(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool {
                SBType_GetDescription(self, description, description_level)
            }
            #[inline]
            pub unsafe fn FindDirectNestedType(
                &mut self,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBType {
                SBType_FindDirectNestedType(self, name)
            }
            #[inline]
            pub unsafe fn ref_(&mut self) -> *mut root::lldb_private::TypeImpl {
                SBType_ref(self)
            }
            #[inline]
            pub unsafe fn ref1(&self) -> *const root::lldb_private::TypeImpl {
                SBType_ref1(self)
            }
            #[inline]
            pub unsafe fn GetSP(&mut self) -> root::lldb::TypeImplSP {
                SBType_GetSP(self)
            }
            #[inline]
            pub unsafe fn SetSP(&mut self, type_impl_sp: *const root::lldb::TypeImplSP) {
                SBType_SetSP(self, type_impl_sp)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBType_SBType(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBType) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBType_SBType1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(arg1: *const root::lldb_private::CompilerType) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBType_SBType2(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(arg1: *const root::lldb::TypeSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBType_SBType3(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(arg1: *const root::lldb::TypeImplSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBType_SBType4(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBType_SBType_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTypeList {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBTypeList7IsValidEv"]
            pub fn SBTypeList_IsValid(this: *mut root::lldb::SBTypeList) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBTypeList6AppendENS_6SBTypeE"]
            pub fn SBTypeList_Append(this: *mut root::lldb::SBTypeList, type_: root::lldb::SBType);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBTypeList14GetTypeAtIndexEj"]
            pub fn SBTypeList_GetTypeAtIndex(
                this: *mut root::lldb::SBTypeList,
                index: u32,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBTypeList7GetSizeEv"]
            pub fn SBTypeList_GetSize(this: *mut root::lldb::SBTypeList) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBTypeListC1Ev"]
            pub fn SBTypeList_SBTypeList(this: *mut root::lldb::SBTypeList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBTypeListC1ERKS0_"]
            pub fn SBTypeList_SBTypeList1(
                this: *mut root::lldb::SBTypeList,
                rhs: *const root::lldb::SBTypeList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBTypeListD1Ev"]
            pub fn SBTypeList_SBTypeList_destructor(this: *mut root::lldb::SBTypeList);
        }
        impl SBTypeList {
            #[inline]
            pub unsafe fn IsValid(&mut self) -> bool {
                SBTypeList_IsValid(self)
            }
            #[inline]
            pub unsafe fn Append(&mut self, type_: root::lldb::SBType) {
                SBTypeList_Append(self, type_)
            }
            #[inline]
            pub unsafe fn GetTypeAtIndex(&mut self, index: u32) -> root::lldb::SBType {
                SBTypeList_GetTypeAtIndex(self, index)
            }
            #[inline]
            pub unsafe fn GetSize(&mut self) -> u32 {
                SBTypeList_GetSize(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeList_SBTypeList(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBTypeList) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeList_SBTypeList1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBTypeList_SBTypeList_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBValue {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        pub type SBValue_ValueImplSP = [u64; 2usize];
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue7IsValidEv"]
            pub fn SBValue_IsValid(this: *mut root::lldb::SBValue) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue5ClearEv"]
            pub fn SBValue_Clear(this: *mut root::lldb::SBValue);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue8GetErrorEv"]
            pub fn SBValue_GetError(this: *mut root::lldb::SBValue) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue5GetIDEv"]
            pub fn SBValue_GetID(this: *mut root::lldb::SBValue) -> root::lldb::user_id_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue7GetNameEv"]
            pub fn SBValue_GetName(this: *mut root::lldb::SBValue)
                -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue11GetTypeNameEv"]
            pub fn SBValue_GetTypeName(
                this: *mut root::lldb::SBValue,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue18GetDisplayTypeNameEv"]
            pub fn SBValue_GetDisplayTypeName(
                this: *mut root::lldb::SBValue,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue11GetByteSizeEv"]
            pub fn SBValue_GetByteSize(this: *mut root::lldb::SBValue) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue9IsInScopeEv"]
            pub fn SBValue_IsInScope(this: *mut root::lldb::SBValue) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue9GetFormatEv"]
            pub fn SBValue_GetFormat(this: *mut root::lldb::SBValue) -> root::lldb::Format;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue9SetFormatENS_6FormatE"]
            pub fn SBValue_SetFormat(this: *mut root::lldb::SBValue, format: root::lldb::Format);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue8GetValueEv"]
            pub fn SBValue_GetValue(
                this: *mut root::lldb::SBValue,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue16GetValueAsSignedERNS_7SBErrorEl"]
            pub fn SBValue_GetValueAsSigned(
                this: *mut root::lldb::SBValue,
                error: *mut root::lldb::SBError,
                fail_value: i64,
            ) -> i64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue18GetValueAsUnsignedERNS_7SBErrorEm"]
            pub fn SBValue_GetValueAsUnsigned(
                this: *mut root::lldb::SBValue,
                error: *mut root::lldb::SBError,
                fail_value: u64,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue16GetValueAsSignedEl"]
            pub fn SBValue_GetValueAsSigned1(
                this: *mut root::lldb::SBValue,
                fail_value: i64,
            ) -> i64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue18GetValueAsUnsignedEm"]
            pub fn SBValue_GetValueAsUnsigned1(
                this: *mut root::lldb::SBValue,
                fail_value: u64,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue17GetValueAsAddressEv"]
            pub fn SBValue_GetValueAsAddress(this: *mut root::lldb::SBValue) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue12GetValueTypeEv"]
            pub fn SBValue_GetValueType(this: *mut root::lldb::SBValue) -> root::lldb::ValueType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue17GetValueDidChangeEv"]
            pub fn SBValue_GetValueDidChange(this: *mut root::lldb::SBValue) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue10GetSummaryEv"]
            pub fn SBValue_GetSummary(
                this: *mut root::lldb::SBValue,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue10GetSummaryERNS_8SBStreamERNS_20SBTypeSummaryOptionsE"]
            pub fn SBValue_GetSummary1(
                this: *mut root::lldb::SBValue,
                stream: *mut root::lldb::SBStream,
                options: *mut root::lldb::SBTypeSummaryOptions,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue20GetObjectDescriptionEv"]
            pub fn SBValue_GetObjectDescription(
                this: *mut root::lldb::SBValue,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue15GetDynamicValueENS_16DynamicValueTypeE"]
            pub fn SBValue_GetDynamicValue(
                this: *mut root::lldb::SBValue,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue14GetStaticValueEv"]
            pub fn SBValue_GetStaticValue(this: *mut root::lldb::SBValue) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue20GetNonSyntheticValueEv"]
            pub fn SBValue_GetNonSyntheticValue(
                this: *mut root::lldb::SBValue,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue17GetSyntheticValueEv"]
            pub fn SBValue_GetSyntheticValue(this: *mut root::lldb::SBValue)
                -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue21GetPreferDynamicValueEv"]
            pub fn SBValue_GetPreferDynamicValue(
                this: *mut root::lldb::SBValue,
            ) -> root::lldb::DynamicValueType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue21SetPreferDynamicValueENS_16DynamicValueTypeE"]
            pub fn SBValue_SetPreferDynamicValue(
                this: *mut root::lldb::SBValue,
                use_dynamic: root::lldb::DynamicValueType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue23GetPreferSyntheticValueEv"]
            pub fn SBValue_GetPreferSyntheticValue(this: *mut root::lldb::SBValue) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue23SetPreferSyntheticValueEb"]
            pub fn SBValue_SetPreferSyntheticValue(
                this: *mut root::lldb::SBValue,
                use_synthetic: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue9IsDynamicEv"]
            pub fn SBValue_IsDynamic(this: *mut root::lldb::SBValue) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue11IsSyntheticEv"]
            pub fn SBValue_IsSynthetic(this: *mut root::lldb::SBValue) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue28IsSyntheticChildrenGeneratedEv"]
            pub fn SBValue_IsSyntheticChildrenGenerated(this: *mut root::lldb::SBValue) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue29SetSyntheticChildrenGeneratedEb"]
            pub fn SBValue_SetSyntheticChildrenGenerated(
                this: *mut root::lldb::SBValue,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue11GetLocationEv"]
            pub fn SBValue_GetLocation(
                this: *mut root::lldb::SBValue,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue19SetValueFromCStringEPKc"]
            pub fn SBValue_SetValueFromCString(
                this: *mut root::lldb::SBValue,
                value_str: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue19SetValueFromCStringEPKcRNS_7SBErrorE"]
            pub fn SBValue_SetValueFromCString1(
                this: *mut root::lldb::SBValue,
                value_str: *const ::std::os::raw::c_char,
                error: *mut root::lldb::SBError,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue13GetTypeFormatEv"]
            pub fn SBValue_GetTypeFormat(
                this: *mut root::lldb::SBValue,
            ) -> root::lldb::SBTypeFormat;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue14GetTypeSummaryEv"]
            pub fn SBValue_GetTypeSummary(
                this: *mut root::lldb::SBValue,
            ) -> root::lldb::SBTypeSummary;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue13GetTypeFilterEv"]
            pub fn SBValue_GetTypeFilter(
                this: *mut root::lldb::SBValue,
            ) -> root::lldb::SBTypeFilter;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue16GetTypeSyntheticEv"]
            pub fn SBValue_GetTypeSynthetic(
                this: *mut root::lldb::SBValue,
            ) -> root::lldb::SBTypeSynthetic;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue15GetChildAtIndexEj"]
            pub fn SBValue_GetChildAtIndex(
                this: *mut root::lldb::SBValue,
                idx: u32,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue19CreateChildAtOffsetEPKcjNS_6SBTypeE"]
            pub fn SBValue_CreateChildAtOffset(
                this: *mut root::lldb::SBValue,
                name: *const ::std::os::raw::c_char,
                offset: u32,
                type_: root::lldb::SBType,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue4CastENS_6SBTypeE"]
            pub fn SBValue_Cast(
                this: *mut root::lldb::SBValue,
                type_: root::lldb::SBType,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue25CreateValueFromExpressionEPKcS2_"]
            pub fn SBValue_CreateValueFromExpression(
                this: *mut root::lldb::SBValue,
                name: *const ::std::os::raw::c_char,
                expression: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue25CreateValueFromExpressionEPKcS2_RNS_19SBExpressionOptionsE"]
            pub fn SBValue_CreateValueFromExpression1(
                this: *mut root::lldb::SBValue,
                name: *const ::std::os::raw::c_char,
                expression: *const ::std::os::raw::c_char,
                options: *mut root::lldb::SBExpressionOptions,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue22CreateValueFromAddressEPKcmNS_6SBTypeE"]
            pub fn SBValue_CreateValueFromAddress(
                this: *mut root::lldb::SBValue,
                name: *const ::std::os::raw::c_char,
                address: root::lldb::addr_t,
                type_: root::lldb::SBType,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue19CreateValueFromDataEPKcNS_6SBDataENS_6SBTypeE"]
            pub fn SBValue_CreateValueFromData(
                this: *mut root::lldb::SBValue,
                name: *const ::std::os::raw::c_char,
                data: root::lldb::SBData,
                type_: root::lldb::SBType,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue15GetChildAtIndexEjNS_16DynamicValueTypeEb"]
            pub fn SBValue_GetChildAtIndex1(
                this: *mut root::lldb::SBValue,
                idx: u32,
                use_dynamic: root::lldb::DynamicValueType,
                can_create_synthetic: bool,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue23GetIndexOfChildWithNameEPKc"]
            pub fn SBValue_GetIndexOfChildWithName(
                this: *mut root::lldb::SBValue,
                name: *const ::std::os::raw::c_char,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue22GetChildMemberWithNameEPKc"]
            pub fn SBValue_GetChildMemberWithName(
                this: *mut root::lldb::SBValue,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue22GetChildMemberWithNameEPKcNS_16DynamicValueTypeE"]
            pub fn SBValue_GetChildMemberWithName1(
                this: *mut root::lldb::SBValue,
                name: *const ::std::os::raw::c_char,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue25GetValueForExpressionPathEPKc"]
            pub fn SBValue_GetValueForExpressionPath(
                this: *mut root::lldb::SBValue,
                expr_path: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue9AddressOfEv"]
            pub fn SBValue_AddressOf(this: *mut root::lldb::SBValue) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue14GetLoadAddressEv"]
            pub fn SBValue_GetLoadAddress(this: *mut root::lldb::SBValue) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue10GetAddressEv"]
            pub fn SBValue_GetAddress(this: *mut root::lldb::SBValue) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue14GetPointeeDataEjj"]
            pub fn SBValue_GetPointeeData(
                this: *mut root::lldb::SBValue,
                item_idx: u32,
                item_count: u32,
            ) -> root::lldb::SBData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue7GetDataEv"]
            pub fn SBValue_GetData(this: *mut root::lldb::SBValue) -> root::lldb::SBData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue7SetDataERNS_6SBDataERNS_7SBErrorE"]
            pub fn SBValue_SetData(
                this: *mut root::lldb::SBValue,
                data: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue5CloneEPKc"]
            pub fn SBValue_Clone(
                this: *mut root::lldb::SBValue,
                new_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue14GetDeclarationEv"]
            pub fn SBValue_GetDeclaration(
                this: *mut root::lldb::SBValue,
            ) -> root::lldb::SBDeclaration;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue17MightHaveChildrenEv"]
            pub fn SBValue_MightHaveChildren(this: *mut root::lldb::SBValue) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue21IsRuntimeSupportValueEv"]
            pub fn SBValue_IsRuntimeSupportValue(this: *mut root::lldb::SBValue) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue14GetNumChildrenEv"]
            pub fn SBValue_GetNumChildren(this: *mut root::lldb::SBValue) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue14GetNumChildrenEj"]
            pub fn SBValue_GetNumChildren1(this: *mut root::lldb::SBValue, max: u32) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue13GetOpaqueTypeEv"]
            pub fn SBValue_GetOpaqueType(
                this: *mut root::lldb::SBValue,
            ) -> *mut ::std::os::raw::c_void;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue9GetTargetEv"]
            pub fn SBValue_GetTarget(this: *mut root::lldb::SBValue) -> root::lldb::SBTarget;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue10GetProcessEv"]
            pub fn SBValue_GetProcess(this: *mut root::lldb::SBValue) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue9GetThreadEv"]
            pub fn SBValue_GetThread(this: *mut root::lldb::SBValue) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue8GetFrameEv"]
            pub fn SBValue_GetFrame(this: *mut root::lldb::SBValue) -> root::lldb::SBFrame;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue11DereferenceEv"]
            pub fn SBValue_Dereference(this: *mut root::lldb::SBValue) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue17TypeIsPointerTypeEv"]
            pub fn SBValue_TypeIsPointerType(this: *mut root::lldb::SBValue) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue7GetTypeEv"]
            pub fn SBValue_GetType(this: *mut root::lldb::SBValue) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue7PersistEv"]
            pub fn SBValue_Persist(this: *mut root::lldb::SBValue) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue14GetDescriptionERNS_8SBStreamE"]
            pub fn SBValue_GetDescription(
                this: *mut root::lldb::SBValue,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue17GetExpressionPathERNS_8SBStreamE"]
            pub fn SBValue_GetExpressionPath(
                this: *mut root::lldb::SBValue,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue17GetExpressionPathERNS_8SBStreamEb"]
            pub fn SBValue_GetExpressionPath1(
                this: *mut root::lldb::SBValue,
                description: *mut root::lldb::SBStream,
                qualify_cxx_base_classes: bool,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBValue18EvaluateExpressionEPKc"]
            pub fn SBValue_EvaluateExpression(
                this: *const root::lldb::SBValue,
                expr: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBValue18EvaluateExpressionEPKcRKNS_19SBExpressionOptionsE"]
            pub fn SBValue_EvaluateExpression1(
                this: *const root::lldb::SBValue,
                expr: *const ::std::os::raw::c_char,
                options: *const root::lldb::SBExpressionOptions,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBValue18EvaluateExpressionEPKcRKNS_19SBExpressionOptionsES2_"]
            pub fn SBValue_EvaluateExpression2(
                this: *const root::lldb::SBValue,
                expr: *const ::std::os::raw::c_char,
                options: *const root::lldb::SBExpressionOptions,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue5WatchEbbbRNS_7SBErrorE"]
            pub fn SBValue_Watch(
                this: *mut root::lldb::SBValue,
                resolve_location: bool,
                read: bool,
                write: bool,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBWatchpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue5WatchEbbb"]
            pub fn SBValue_Watch1(
                this: *mut root::lldb::SBValue,
                resolve_location: bool,
                read: bool,
                write: bool,
            ) -> root::lldb::SBWatchpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue12WatchPointeeEbbbRNS_7SBErrorE"]
            pub fn SBValue_WatchPointee(
                this: *mut root::lldb::SBValue,
                resolve_location: bool,
                read: bool,
                write: bool,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBWatchpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue9GetVTableEv"]
            pub fn SBValue_GetVTable(this: *mut root::lldb::SBValue) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBValue5GetSPEv"]
            pub fn SBValue_GetSP(this: *const root::lldb::SBValue) -> root::lldb::ValueObjectSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBValue5GetSPER11ValueLocker"]
            pub fn SBValue_GetSP1(
                this: *const root::lldb::SBValue,
                value_locker: *mut root::ValueLocker,
            ) -> root::lldb::ValueObjectSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue5SetSPERKSt10shared_ptrIN12lldb_private11ValueObjectEE"]
            pub fn SBValue_SetSP(
                this: *mut root::lldb::SBValue,
                sp: *const root::lldb::ValueObjectSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue5SetSPERKSt10shared_ptrIN12lldb_private11ValueObjectEEb"]
            pub fn SBValue_SetSP1(
                this: *mut root::lldb::SBValue,
                sp: *const root::lldb::ValueObjectSP,
                use_synthetic: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue5SetSPERKSt10shared_ptrIN12lldb_private11ValueObjectEENS_16DynamicValueTypeE"]
            pub fn SBValue_SetSP2(
                this: *mut root::lldb::SBValue,
                sp: *const root::lldb::ValueObjectSP,
                use_dynamic: root::lldb::DynamicValueType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue5SetSPERKSt10shared_ptrIN12lldb_private11ValueObjectEENS_16DynamicValueTypeEb"]
            pub fn SBValue_SetSP3(
                this: *mut root::lldb::SBValue,
                sp: *const root::lldb::ValueObjectSP,
                use_dynamic: root::lldb::DynamicValueType,
                use_synthetic: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValue5SetSPERKSt10shared_ptrIN12lldb_private11ValueObjectEENS_16DynamicValueTypeEbPKc"]
            pub fn SBValue_SetSP4(
                this: *mut root::lldb::SBValue,
                sp: *const root::lldb::ValueObjectSP,
                use_dynamic: root::lldb::DynamicValueType,
                use_synthetic: bool,
                name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValueC1Ev"]
            pub fn SBValue_SBValue(this: *mut root::lldb::SBValue);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValueC1ERKS0_"]
            pub fn SBValue_SBValue1(
                this: *mut root::lldb::SBValue,
                rhs: *const root::lldb::SBValue,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValueC1ERKSt10shared_ptrIN12lldb_private11ValueObjectEE"]
            pub fn SBValue_SBValue2(
                this: *mut root::lldb::SBValue,
                value_sp: *const root::lldb::ValueObjectSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBValueD1Ev"]
            pub fn SBValue_SBValue_destructor(this: *mut root::lldb::SBValue);
        }
        impl SBValue {
            #[inline]
            pub unsafe fn IsValid(&mut self) -> bool {
                SBValue_IsValid(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBValue_Clear(self)
            }
            #[inline]
            pub unsafe fn GetError(&mut self) -> root::lldb::SBError {
                SBValue_GetError(self)
            }
            #[inline]
            pub unsafe fn GetID(&mut self) -> root::lldb::user_id_t {
                SBValue_GetID(self)
            }
            #[inline]
            pub unsafe fn GetName(&mut self) -> *const ::std::os::raw::c_char {
                SBValue_GetName(self)
            }
            #[inline]
            pub unsafe fn GetTypeName(&mut self) -> *const ::std::os::raw::c_char {
                SBValue_GetTypeName(self)
            }
            #[inline]
            pub unsafe fn GetDisplayTypeName(&mut self) -> *const ::std::os::raw::c_char {
                SBValue_GetDisplayTypeName(self)
            }
            #[inline]
            pub unsafe fn GetByteSize(&mut self) -> usize {
                SBValue_GetByteSize(self)
            }
            #[inline]
            pub unsafe fn IsInScope(&mut self) -> bool {
                SBValue_IsInScope(self)
            }
            #[inline]
            pub unsafe fn GetFormat(&mut self) -> root::lldb::Format {
                SBValue_GetFormat(self)
            }
            #[inline]
            pub unsafe fn SetFormat(&mut self, format: root::lldb::Format) {
                SBValue_SetFormat(self, format)
            }
            #[inline]
            pub unsafe fn GetValue(&mut self) -> *const ::std::os::raw::c_char {
                SBValue_GetValue(self)
            }
            #[inline]
            pub unsafe fn GetValueAsSigned(
                &mut self,
                error: *mut root::lldb::SBError,
                fail_value: i64,
            ) -> i64 {
                SBValue_GetValueAsSigned(self, error, fail_value)
            }
            #[inline]
            pub unsafe fn GetValueAsUnsigned(
                &mut self,
                error: *mut root::lldb::SBError,
                fail_value: u64,
            ) -> u64 {
                SBValue_GetValueAsUnsigned(self, error, fail_value)
            }
            #[inline]
            pub unsafe fn GetValueAsSigned1(&mut self, fail_value: i64) -> i64 {
                SBValue_GetValueAsSigned1(self, fail_value)
            }
            #[inline]
            pub unsafe fn GetValueAsUnsigned1(&mut self, fail_value: u64) -> u64 {
                SBValue_GetValueAsUnsigned1(self, fail_value)
            }
            #[inline]
            pub unsafe fn GetValueAsAddress(&mut self) -> root::lldb::addr_t {
                SBValue_GetValueAsAddress(self)
            }
            #[inline]
            pub unsafe fn GetValueType(&mut self) -> root::lldb::ValueType {
                SBValue_GetValueType(self)
            }
            #[inline]
            pub unsafe fn GetValueDidChange(&mut self) -> bool {
                SBValue_GetValueDidChange(self)
            }
            #[inline]
            pub unsafe fn GetSummary(&mut self) -> *const ::std::os::raw::c_char {
                SBValue_GetSummary(self)
            }
            #[inline]
            pub unsafe fn GetSummary1(
                &mut self,
                stream: *mut root::lldb::SBStream,
                options: *mut root::lldb::SBTypeSummaryOptions,
            ) -> *const ::std::os::raw::c_char {
                SBValue_GetSummary1(self, stream, options)
            }
            #[inline]
            pub unsafe fn GetObjectDescription(&mut self) -> *const ::std::os::raw::c_char {
                SBValue_GetObjectDescription(self)
            }
            #[inline]
            pub unsafe fn GetDynamicValue(
                &mut self,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValue {
                SBValue_GetDynamicValue(self, use_dynamic)
            }
            #[inline]
            pub unsafe fn GetStaticValue(&mut self) -> root::lldb::SBValue {
                SBValue_GetStaticValue(self)
            }
            #[inline]
            pub unsafe fn GetNonSyntheticValue(&mut self) -> root::lldb::SBValue {
                SBValue_GetNonSyntheticValue(self)
            }
            #[inline]
            pub unsafe fn GetSyntheticValue(&mut self) -> root::lldb::SBValue {
                SBValue_GetSyntheticValue(self)
            }
            #[inline]
            pub unsafe fn GetPreferDynamicValue(&mut self) -> root::lldb::DynamicValueType {
                SBValue_GetPreferDynamicValue(self)
            }
            #[inline]
            pub unsafe fn SetPreferDynamicValue(
                &mut self,
                use_dynamic: root::lldb::DynamicValueType,
            ) {
                SBValue_SetPreferDynamicValue(self, use_dynamic)
            }
            #[inline]
            pub unsafe fn GetPreferSyntheticValue(&mut self) -> bool {
                SBValue_GetPreferSyntheticValue(self)
            }
            #[inline]
            pub unsafe fn SetPreferSyntheticValue(&mut self, use_synthetic: bool) {
                SBValue_SetPreferSyntheticValue(self, use_synthetic)
            }
            #[inline]
            pub unsafe fn IsDynamic(&mut self) -> bool {
                SBValue_IsDynamic(self)
            }
            #[inline]
            pub unsafe fn IsSynthetic(&mut self) -> bool {
                SBValue_IsSynthetic(self)
            }
            #[inline]
            pub unsafe fn IsSyntheticChildrenGenerated(&mut self) -> bool {
                SBValue_IsSyntheticChildrenGenerated(self)
            }
            #[inline]
            pub unsafe fn SetSyntheticChildrenGenerated(&mut self, arg1: bool) {
                SBValue_SetSyntheticChildrenGenerated(self, arg1)
            }
            #[inline]
            pub unsafe fn GetLocation(&mut self) -> *const ::std::os::raw::c_char {
                SBValue_GetLocation(self)
            }
            #[inline]
            pub unsafe fn SetValueFromCString(
                &mut self,
                value_str: *const ::std::os::raw::c_char,
            ) -> bool {
                SBValue_SetValueFromCString(self, value_str)
            }
            #[inline]
            pub unsafe fn SetValueFromCString1(
                &mut self,
                value_str: *const ::std::os::raw::c_char,
                error: *mut root::lldb::SBError,
            ) -> bool {
                SBValue_SetValueFromCString1(self, value_str, error)
            }
            #[inline]
            pub unsafe fn GetTypeFormat(&mut self) -> root::lldb::SBTypeFormat {
                SBValue_GetTypeFormat(self)
            }
            #[inline]
            pub unsafe fn GetTypeSummary(&mut self) -> root::lldb::SBTypeSummary {
                SBValue_GetTypeSummary(self)
            }
            #[inline]
            pub unsafe fn GetTypeFilter(&mut self) -> root::lldb::SBTypeFilter {
                SBValue_GetTypeFilter(self)
            }
            #[inline]
            pub unsafe fn GetTypeSynthetic(&mut self) -> root::lldb::SBTypeSynthetic {
                SBValue_GetTypeSynthetic(self)
            }
            #[inline]
            pub unsafe fn GetChildAtIndex(&mut self, idx: u32) -> root::lldb::SBValue {
                SBValue_GetChildAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn CreateChildAtOffset(
                &mut self,
                name: *const ::std::os::raw::c_char,
                offset: u32,
                type_: root::lldb::SBType,
            ) -> root::lldb::SBValue {
                SBValue_CreateChildAtOffset(self, name, offset, type_)
            }
            #[inline]
            pub unsafe fn Cast(&mut self, type_: root::lldb::SBType) -> root::lldb::SBValue {
                SBValue_Cast(self, type_)
            }
            #[inline]
            pub unsafe fn CreateValueFromExpression(
                &mut self,
                name: *const ::std::os::raw::c_char,
                expression: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBValue_CreateValueFromExpression(self, name, expression)
            }
            #[inline]
            pub unsafe fn CreateValueFromExpression1(
                &mut self,
                name: *const ::std::os::raw::c_char,
                expression: *const ::std::os::raw::c_char,
                options: *mut root::lldb::SBExpressionOptions,
            ) -> root::lldb::SBValue {
                SBValue_CreateValueFromExpression1(self, name, expression, options)
            }
            #[inline]
            pub unsafe fn CreateValueFromAddress(
                &mut self,
                name: *const ::std::os::raw::c_char,
                address: root::lldb::addr_t,
                type_: root::lldb::SBType,
            ) -> root::lldb::SBValue {
                SBValue_CreateValueFromAddress(self, name, address, type_)
            }
            #[inline]
            pub unsafe fn CreateValueFromData(
                &mut self,
                name: *const ::std::os::raw::c_char,
                data: root::lldb::SBData,
                type_: root::lldb::SBType,
            ) -> root::lldb::SBValue {
                SBValue_CreateValueFromData(self, name, data, type_)
            }
            #[inline]
            pub unsafe fn GetChildAtIndex1(
                &mut self,
                idx: u32,
                use_dynamic: root::lldb::DynamicValueType,
                can_create_synthetic: bool,
            ) -> root::lldb::SBValue {
                SBValue_GetChildAtIndex1(self, idx, use_dynamic, can_create_synthetic)
            }
            #[inline]
            pub unsafe fn GetIndexOfChildWithName(
                &mut self,
                name: *const ::std::os::raw::c_char,
            ) -> u32 {
                SBValue_GetIndexOfChildWithName(self, name)
            }
            #[inline]
            pub unsafe fn GetChildMemberWithName(
                &mut self,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBValue_GetChildMemberWithName(self, name)
            }
            #[inline]
            pub unsafe fn GetChildMemberWithName1(
                &mut self,
                name: *const ::std::os::raw::c_char,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValue {
                SBValue_GetChildMemberWithName1(self, name, use_dynamic)
            }
            #[inline]
            pub unsafe fn GetValueForExpressionPath(
                &mut self,
                expr_path: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBValue_GetValueForExpressionPath(self, expr_path)
            }
            #[inline]
            pub unsafe fn AddressOf(&mut self) -> root::lldb::SBValue {
                SBValue_AddressOf(self)
            }
            #[inline]
            pub unsafe fn GetLoadAddress(&mut self) -> root::lldb::addr_t {
                SBValue_GetLoadAddress(self)
            }
            #[inline]
            pub unsafe fn GetAddress(&mut self) -> root::lldb::SBAddress {
                SBValue_GetAddress(self)
            }
            #[inline]
            pub unsafe fn GetPointeeData(
                &mut self,
                item_idx: u32,
                item_count: u32,
            ) -> root::lldb::SBData {
                SBValue_GetPointeeData(self, item_idx, item_count)
            }
            #[inline]
            pub unsafe fn GetData(&mut self) -> root::lldb::SBData {
                SBValue_GetData(self)
            }
            #[inline]
            pub unsafe fn SetData(
                &mut self,
                data: *mut root::lldb::SBData,
                error: *mut root::lldb::SBError,
            ) -> bool {
                SBValue_SetData(self, data, error)
            }
            #[inline]
            pub unsafe fn Clone(
                &mut self,
                new_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBValue_Clone(self, new_name)
            }
            #[inline]
            pub unsafe fn GetDeclaration(&mut self) -> root::lldb::SBDeclaration {
                SBValue_GetDeclaration(self)
            }
            #[inline]
            pub unsafe fn MightHaveChildren(&mut self) -> bool {
                SBValue_MightHaveChildren(self)
            }
            #[inline]
            pub unsafe fn IsRuntimeSupportValue(&mut self) -> bool {
                SBValue_IsRuntimeSupportValue(self)
            }
            #[inline]
            pub unsafe fn GetNumChildren(&mut self) -> u32 {
                SBValue_GetNumChildren(self)
            }
            #[inline]
            pub unsafe fn GetNumChildren1(&mut self, max: u32) -> u32 {
                SBValue_GetNumChildren1(self, max)
            }
            #[inline]
            pub unsafe fn GetOpaqueType(&mut self) -> *mut ::std::os::raw::c_void {
                SBValue_GetOpaqueType(self)
            }
            #[inline]
            pub unsafe fn GetTarget(&mut self) -> root::lldb::SBTarget {
                SBValue_GetTarget(self)
            }
            #[inline]
            pub unsafe fn GetProcess(&mut self) -> root::lldb::SBProcess {
                SBValue_GetProcess(self)
            }
            #[inline]
            pub unsafe fn GetThread(&mut self) -> root::lldb::SBThread {
                SBValue_GetThread(self)
            }
            #[inline]
            pub unsafe fn GetFrame(&mut self) -> root::lldb::SBFrame {
                SBValue_GetFrame(self)
            }
            #[inline]
            pub unsafe fn Dereference(&mut self) -> root::lldb::SBValue {
                SBValue_Dereference(self)
            }
            #[inline]
            pub unsafe fn TypeIsPointerType(&mut self) -> bool {
                SBValue_TypeIsPointerType(self)
            }
            #[inline]
            pub unsafe fn GetType(&mut self) -> root::lldb::SBType {
                SBValue_GetType(self)
            }
            #[inline]
            pub unsafe fn Persist(&mut self) -> root::lldb::SBValue {
                SBValue_Persist(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBValue_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn GetExpressionPath(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBValue_GetExpressionPath(self, description)
            }
            #[inline]
            pub unsafe fn GetExpressionPath1(
                &mut self,
                description: *mut root::lldb::SBStream,
                qualify_cxx_base_classes: bool,
            ) -> bool {
                SBValue_GetExpressionPath1(self, description, qualify_cxx_base_classes)
            }
            #[inline]
            pub unsafe fn EvaluateExpression(
                &self,
                expr: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBValue_EvaluateExpression(self, expr)
            }
            #[inline]
            pub unsafe fn EvaluateExpression1(
                &self,
                expr: *const ::std::os::raw::c_char,
                options: *const root::lldb::SBExpressionOptions,
            ) -> root::lldb::SBValue {
                SBValue_EvaluateExpression1(self, expr, options)
            }
            #[inline]
            pub unsafe fn EvaluateExpression2(
                &self,
                expr: *const ::std::os::raw::c_char,
                options: *const root::lldb::SBExpressionOptions,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBValue_EvaluateExpression2(self, expr, options, name)
            }
            #[inline]
            pub unsafe fn Watch(
                &mut self,
                resolve_location: bool,
                read: bool,
                write: bool,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBWatchpoint {
                SBValue_Watch(self, resolve_location, read, write, error)
            }
            #[inline]
            pub unsafe fn Watch1(
                &mut self,
                resolve_location: bool,
                read: bool,
                write: bool,
            ) -> root::lldb::SBWatchpoint {
                SBValue_Watch1(self, resolve_location, read, write)
            }
            #[inline]
            pub unsafe fn WatchPointee(
                &mut self,
                resolve_location: bool,
                read: bool,
                write: bool,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBWatchpoint {
                SBValue_WatchPointee(self, resolve_location, read, write, error)
            }
            #[inline]
            pub unsafe fn GetVTable(&mut self) -> root::lldb::SBValue {
                SBValue_GetVTable(self)
            }
            #[inline]
            pub unsafe fn GetSP(&self) -> root::lldb::ValueObjectSP {
                SBValue_GetSP(self)
            }
            #[inline]
            pub unsafe fn GetSP1(
                &self,
                value_locker: *mut root::ValueLocker,
            ) -> root::lldb::ValueObjectSP {
                SBValue_GetSP1(self, value_locker)
            }
            #[inline]
            pub unsafe fn SetSP(&mut self, sp: *const root::lldb::ValueObjectSP) {
                SBValue_SetSP(self, sp)
            }
            #[inline]
            pub unsafe fn SetSP1(
                &mut self,
                sp: *const root::lldb::ValueObjectSP,
                use_synthetic: bool,
            ) {
                SBValue_SetSP1(self, sp, use_synthetic)
            }
            #[inline]
            pub unsafe fn SetSP2(
                &mut self,
                sp: *const root::lldb::ValueObjectSP,
                use_dynamic: root::lldb::DynamicValueType,
            ) {
                SBValue_SetSP2(self, sp, use_dynamic)
            }
            #[inline]
            pub unsafe fn SetSP3(
                &mut self,
                sp: *const root::lldb::ValueObjectSP,
                use_dynamic: root::lldb::DynamicValueType,
                use_synthetic: bool,
            ) {
                SBValue_SetSP3(self, sp, use_dynamic, use_synthetic)
            }
            #[inline]
            pub unsafe fn SetSP4(
                &mut self,
                sp: *const root::lldb::ValueObjectSP,
                use_dynamic: root::lldb::DynamicValueType,
                use_synthetic: bool,
                name: *const ::std::os::raw::c_char,
            ) {
                SBValue_SetSP4(self, sp, use_dynamic, use_synthetic, name)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBValue_SBValue(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBValue) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBValue_SBValue1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(value_sp: *const root::lldb::ValueObjectSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBValue_SBValue2(__bindgen_tmp.as_mut_ptr(), value_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBValue_SBValue_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBWatchpoint {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBWatchpoint7IsValidEv"]
            pub fn SBWatchpoint_IsValid(this: *const root::lldb::SBWatchpoint) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint8GetErrorEv"]
            pub fn SBWatchpoint_GetError(
                this: *mut root::lldb::SBWatchpoint,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint5GetIDEv"]
            pub fn SBWatchpoint_GetID(
                this: *mut root::lldb::SBWatchpoint,
            ) -> root::lldb::watch_id_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint16GetHardwareIndexEv"]
            pub fn SBWatchpoint_GetHardwareIndex(this: *mut root::lldb::SBWatchpoint) -> i32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint15GetWatchAddressEv"]
            pub fn SBWatchpoint_GetWatchAddress(
                this: *mut root::lldb::SBWatchpoint,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint12GetWatchSizeEv"]
            pub fn SBWatchpoint_GetWatchSize(this: *mut root::lldb::SBWatchpoint) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint10SetEnabledEb"]
            pub fn SBWatchpoint_SetEnabled(this: *mut root::lldb::SBWatchpoint, enabled: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint9IsEnabledEv"]
            pub fn SBWatchpoint_IsEnabled(this: *mut root::lldb::SBWatchpoint) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint11GetHitCountEv"]
            pub fn SBWatchpoint_GetHitCount(this: *mut root::lldb::SBWatchpoint) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint14GetIgnoreCountEv"]
            pub fn SBWatchpoint_GetIgnoreCount(this: *mut root::lldb::SBWatchpoint) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint14SetIgnoreCountEj"]
            pub fn SBWatchpoint_SetIgnoreCount(this: *mut root::lldb::SBWatchpoint, n: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint12GetConditionEv"]
            pub fn SBWatchpoint_GetCondition(
                this: *mut root::lldb::SBWatchpoint,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint12SetConditionEPKc"]
            pub fn SBWatchpoint_SetCondition(
                this: *mut root::lldb::SBWatchpoint,
                condition: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE"]
            pub fn SBWatchpoint_GetDescription(
                this: *mut root::lldb::SBWatchpoint,
                description: *mut root::lldb::SBStream,
                level: root::lldb::DescriptionLevel,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint5ClearEv"]
            pub fn SBWatchpoint_Clear(this: *mut root::lldb::SBWatchpoint);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint22EventIsWatchpointEventERKNS_7SBEventE"]
            pub fn SBWatchpoint_EventIsWatchpointEvent(event: *const root::lldb::SBEvent) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint31GetWatchpointEventTypeFromEventERKNS_7SBEventE"]
            pub fn SBWatchpoint_GetWatchpointEventTypeFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::WatchpointEventType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint22GetWatchpointFromEventERKNS_7SBEventE"]
            pub fn SBWatchpoint_GetWatchpointFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBWatchpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint7GetTypeEv"]
            pub fn SBWatchpoint_GetType(this: *mut root::lldb::SBWatchpoint) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint17GetWatchValueKindEv"]
            pub fn SBWatchpoint_GetWatchValueKind(
                this: *mut root::lldb::SBWatchpoint,
            ) -> root::lldb::WatchpointValueKind;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint12GetWatchSpecEv"]
            pub fn SBWatchpoint_GetWatchSpec(
                this: *mut root::lldb::SBWatchpoint,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint15IsWatchingReadsEv"]
            pub fn SBWatchpoint_IsWatchingReads(this: *mut root::lldb::SBWatchpoint) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint16IsWatchingWritesEv"]
            pub fn SBWatchpoint_IsWatchingWrites(this: *mut root::lldb::SBWatchpoint) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBWatchpoint5GetSPEv"]
            pub fn SBWatchpoint_GetSP(
                this: *const root::lldb::SBWatchpoint,
            ) -> root::lldb::WatchpointSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpoint5SetSPERKSt10shared_ptrIN12lldb_private10WatchpointEE"]
            pub fn SBWatchpoint_SetSP(
                this: *mut root::lldb::SBWatchpoint,
                sp: *const root::lldb::WatchpointSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpointC1Ev"]
            pub fn SBWatchpoint_SBWatchpoint(this: *mut root::lldb::SBWatchpoint);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpointC1ERKS0_"]
            pub fn SBWatchpoint_SBWatchpoint1(
                this: *mut root::lldb::SBWatchpoint,
                rhs: *const root::lldb::SBWatchpoint,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpointC1ERKSt10shared_ptrIN12lldb_private10WatchpointEE"]
            pub fn SBWatchpoint_SBWatchpoint2(
                this: *mut root::lldb::SBWatchpoint,
                wp_sp: *const root::lldb::WatchpointSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBWatchpointD1Ev"]
            pub fn SBWatchpoint_SBWatchpoint_destructor(this: *mut root::lldb::SBWatchpoint);
        }
        impl SBWatchpoint {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBWatchpoint_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetError(&mut self) -> root::lldb::SBError {
                SBWatchpoint_GetError(self)
            }
            #[inline]
            pub unsafe fn GetID(&mut self) -> root::lldb::watch_id_t {
                SBWatchpoint_GetID(self)
            }
            #[inline]
            pub unsafe fn GetHardwareIndex(&mut self) -> i32 {
                SBWatchpoint_GetHardwareIndex(self)
            }
            #[inline]
            pub unsafe fn GetWatchAddress(&mut self) -> root::lldb::addr_t {
                SBWatchpoint_GetWatchAddress(self)
            }
            #[inline]
            pub unsafe fn GetWatchSize(&mut self) -> usize {
                SBWatchpoint_GetWatchSize(self)
            }
            #[inline]
            pub unsafe fn SetEnabled(&mut self, enabled: bool) {
                SBWatchpoint_SetEnabled(self, enabled)
            }
            #[inline]
            pub unsafe fn IsEnabled(&mut self) -> bool {
                SBWatchpoint_IsEnabled(self)
            }
            #[inline]
            pub unsafe fn GetHitCount(&mut self) -> u32 {
                SBWatchpoint_GetHitCount(self)
            }
            #[inline]
            pub unsafe fn GetIgnoreCount(&mut self) -> u32 {
                SBWatchpoint_GetIgnoreCount(self)
            }
            #[inline]
            pub unsafe fn SetIgnoreCount(&mut self, n: u32) {
                SBWatchpoint_SetIgnoreCount(self, n)
            }
            #[inline]
            pub unsafe fn GetCondition(&mut self) -> *const ::std::os::raw::c_char {
                SBWatchpoint_GetCondition(self)
            }
            #[inline]
            pub unsafe fn SetCondition(&mut self, condition: *const ::std::os::raw::c_char) {
                SBWatchpoint_SetCondition(self, condition)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                level: root::lldb::DescriptionLevel,
            ) -> bool {
                SBWatchpoint_GetDescription(self, description, level)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBWatchpoint_Clear(self)
            }
            #[inline]
            pub unsafe fn EventIsWatchpointEvent(event: *const root::lldb::SBEvent) -> bool {
                SBWatchpoint_EventIsWatchpointEvent(event)
            }
            #[inline]
            pub unsafe fn GetWatchpointEventTypeFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::WatchpointEventType {
                SBWatchpoint_GetWatchpointEventTypeFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetWatchpointFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBWatchpoint {
                SBWatchpoint_GetWatchpointFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetType(&mut self) -> root::lldb::SBType {
                SBWatchpoint_GetType(self)
            }
            #[inline]
            pub unsafe fn GetWatchValueKind(&mut self) -> root::lldb::WatchpointValueKind {
                SBWatchpoint_GetWatchValueKind(self)
            }
            #[inline]
            pub unsafe fn GetWatchSpec(&mut self) -> *const ::std::os::raw::c_char {
                SBWatchpoint_GetWatchSpec(self)
            }
            #[inline]
            pub unsafe fn IsWatchingReads(&mut self) -> bool {
                SBWatchpoint_IsWatchingReads(self)
            }
            #[inline]
            pub unsafe fn IsWatchingWrites(&mut self) -> bool {
                SBWatchpoint_IsWatchingWrites(self)
            }
            #[inline]
            pub unsafe fn GetSP(&self) -> root::lldb::WatchpointSP {
                SBWatchpoint_GetSP(self)
            }
            #[inline]
            pub unsafe fn SetSP(&mut self, sp: *const root::lldb::WatchpointSP) {
                SBWatchpoint_SetSP(self, sp)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBWatchpoint_SBWatchpoint(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBWatchpoint) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBWatchpoint_SBWatchpoint1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(wp_sp: *const root::lldb::WatchpointSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBWatchpoint_SBWatchpoint2(__bindgen_tmp.as_mut_ptr(), wp_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBWatchpoint_SBWatchpoint_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBWatchpointOptions {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBWatchpointOptions21SetWatchpointTypeReadEb"]
            pub fn SBWatchpointOptions_SetWatchpointTypeRead(
                this: *mut root::lldb::SBWatchpointOptions,
                read: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBWatchpointOptions21GetWatchpointTypeReadEv"]
            pub fn SBWatchpointOptions_GetWatchpointTypeRead(
                this: *const root::lldb::SBWatchpointOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBWatchpointOptions22SetWatchpointTypeWriteENS_19WatchpointWriteTypeE"]
            pub fn SBWatchpointOptions_SetWatchpointTypeWrite(
                this: *mut root::lldb::SBWatchpointOptions,
                write_type: root::lldb::WatchpointWriteType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBWatchpointOptions22GetWatchpointTypeWriteEv"]
            pub fn SBWatchpointOptions_GetWatchpointTypeWrite(
                this: *const root::lldb::SBWatchpointOptions,
            ) -> root::lldb::WatchpointWriteType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBWatchpointOptionsC1Ev"]
            pub fn SBWatchpointOptions_SBWatchpointOptions(
                this: *mut root::lldb::SBWatchpointOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBWatchpointOptionsC1ERKS0_"]
            pub fn SBWatchpointOptions_SBWatchpointOptions1(
                this: *mut root::lldb::SBWatchpointOptions,
                rhs: *const root::lldb::SBWatchpointOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBWatchpointOptionsD1Ev"]
            pub fn SBWatchpointOptions_SBWatchpointOptions_destructor(
                this: *mut root::lldb::SBWatchpointOptions,
            );
        }
        impl SBWatchpointOptions {
            #[inline]
            pub unsafe fn SetWatchpointTypeRead(&mut self, read: bool) {
                SBWatchpointOptions_SetWatchpointTypeRead(self, read)
            }
            #[inline]
            pub unsafe fn GetWatchpointTypeRead(&self) -> bool {
                SBWatchpointOptions_GetWatchpointTypeRead(self)
            }
            #[inline]
            pub unsafe fn SetWatchpointTypeWrite(
                &mut self,
                write_type: root::lldb::WatchpointWriteType,
            ) {
                SBWatchpointOptions_SetWatchpointTypeWrite(self, write_type)
            }
            #[inline]
            pub unsafe fn GetWatchpointTypeWrite(&self) -> root::lldb::WatchpointWriteType {
                SBWatchpointOptions_GetWatchpointTypeWrite(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBWatchpointOptions_SBWatchpointOptions(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBWatchpointOptions) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBWatchpointOptions_SBWatchpointOptions1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBWatchpointOptions_SBWatchpointOptions_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTarget {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        pub const SBTarget_eBroadcastBitBreakpointChanged: root::lldb::SBTarget__bindgen_ty_1 = 1;
        pub const SBTarget_eBroadcastBitModulesLoaded: root::lldb::SBTarget__bindgen_ty_1 = 2;
        pub const SBTarget_eBroadcastBitModulesUnloaded: root::lldb::SBTarget__bindgen_ty_1 = 4;
        pub const SBTarget_eBroadcastBitWatchpointChanged: root::lldb::SBTarget__bindgen_ty_1 = 8;
        pub const SBTarget_eBroadcastBitSymbolsLoaded: root::lldb::SBTarget__bindgen_ty_1 = 16;
        pub const SBTarget_eBroadcastBitSymbolsChanged: root::lldb::SBTarget__bindgen_ty_1 = 32;
        pub type SBTarget__bindgen_ty_1 = ::std::os::raw::c_uint;
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBTarget7IsValidEv"]
            pub fn SBTarget_IsValid(this: *const root::lldb::SBTarget) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget18EventIsTargetEventERKNS_7SBEventE"]
            pub fn SBTarget_EventIsTargetEvent(event: *const root::lldb::SBEvent) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget18GetTargetFromEventERKNS_7SBEventE"]
            pub fn SBTarget_GetTargetFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBTarget;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget22GetNumModulesFromEventERKNS_7SBEventE"]
            pub fn SBTarget_GetNumModulesFromEvent(event: *const root::lldb::SBEvent) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget25GetModuleAtIndexFromEventEjRKNS_7SBEventE"]
            pub fn SBTarget_GetModuleAtIndexFromEvent(
                idx: u32,
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBModule;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget23GetBroadcasterClassNameEv"]
            pub fn SBTarget_GetBroadcasterClassName() -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget10GetProcessEv"]
            pub fn SBTarget_GetProcess(this: *mut root::lldb::SBTarget) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget18SetCollectingStatsEb"]
            pub fn SBTarget_SetCollectingStats(this: *mut root::lldb::SBTarget, v: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget18GetCollectingStatsEv"]
            pub fn SBTarget_GetCollectingStats(this: *mut root::lldb::SBTarget) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget13GetStatisticsEv"]
            pub fn SBTarget_GetStatistics(
                this: *mut root::lldb::SBTarget,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget13GetStatisticsENS_19SBStatisticsOptionsE"]
            pub fn SBTarget_GetStatistics1(
                this: *mut root::lldb::SBTarget,
                options: root::lldb::SBStatisticsOptions,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget11GetPlatformEv"]
            pub fn SBTarget_GetPlatform(this: *mut root::lldb::SBTarget) -> root::lldb::SBPlatform;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget14GetEnvironmentEv"]
            pub fn SBTarget_GetEnvironment(
                this: *mut root::lldb::SBTarget,
            ) -> root::lldb::SBEnvironment;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget7InstallEv"]
            pub fn SBTarget_Install(this: *mut root::lldb::SBTarget) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget6LaunchERNS_10SBListenerEPPKcS5_S4_S4_S4_S4_jbRNS_7SBErrorE"]
            pub fn SBTarget_Launch(
                this: *mut root::lldb::SBTarget,
                listener: *mut root::lldb::SBListener,
                argv: *mut *const ::std::os::raw::c_char,
                envp: *mut *const ::std::os::raw::c_char,
                stdin_path: *const ::std::os::raw::c_char,
                stdout_path: *const ::std::os::raw::c_char,
                stderr_path: *const ::std::os::raw::c_char,
                working_directory: *const ::std::os::raw::c_char,
                launch_flags: u32,
                stop_at_entry: bool,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget8LoadCoreEPKc"]
            pub fn SBTarget_LoadCore(
                this: *mut root::lldb::SBTarget,
                core_file: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget8LoadCoreEPKcRNS_7SBErrorE"]
            pub fn SBTarget_LoadCore1(
                this: *mut root::lldb::SBTarget,
                core_file: *const ::std::os::raw::c_char,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget12LaunchSimpleEPPKcS3_S2_"]
            pub fn SBTarget_LaunchSimple(
                this: *mut root::lldb::SBTarget,
                argv: *mut *const ::std::os::raw::c_char,
                envp: *mut *const ::std::os::raw::c_char,
                working_directory: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget6LaunchERNS_12SBLaunchInfoERNS_7SBErrorE"]
            pub fn SBTarget_Launch1(
                this: *mut root::lldb::SBTarget,
                launch_info: *mut root::lldb::SBLaunchInfo,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget6AttachERNS_12SBAttachInfoERNS_7SBErrorE"]
            pub fn SBTarget_Attach(
                this: *mut root::lldb::SBTarget,
                attach_info: *mut root::lldb::SBAttachInfo,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget21AttachToProcessWithIDERNS_10SBListenerEmRNS_7SBErrorE"]
            pub fn SBTarget_AttachToProcessWithID(
                this: *mut root::lldb::SBTarget,
                listener: *mut root::lldb::SBListener,
                pid: root::lldb::pid_t,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget23AttachToProcessWithNameERNS_10SBListenerEPKcbRNS_7SBErrorE"]
            pub fn SBTarget_AttachToProcessWithName(
                this: *mut root::lldb::SBTarget,
                listener: *mut root::lldb::SBListener,
                name: *const ::std::os::raw::c_char,
                wait_for: bool,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget13ConnectRemoteERNS_10SBListenerEPKcS4_RNS_7SBErrorE"]
            pub fn SBTarget_ConnectRemote(
                this: *mut root::lldb::SBTarget,
                listener: *mut root::lldb::SBListener,
                url: *const ::std::os::raw::c_char,
                plugin_name: *const ::std::os::raw::c_char,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget13GetExecutableEv"]
            pub fn SBTarget_GetExecutable(
                this: *mut root::lldb::SBTarget,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget21AppendImageSearchPathEPKcS2_RNS_7SBErrorE"]
            pub fn SBTarget_AppendImageSearchPath(
                this: *mut root::lldb::SBTarget,
                from: *const ::std::os::raw::c_char,
                to: *const ::std::os::raw::c_char,
                error: *mut root::lldb::SBError,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget9AddModuleERNS_8SBModuleE"]
            pub fn SBTarget_AddModule(
                this: *mut root::lldb::SBTarget,
                module: *mut root::lldb::SBModule,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget9AddModuleEPKcS2_S2_"]
            pub fn SBTarget_AddModule1(
                this: *mut root::lldb::SBTarget,
                path: *const ::std::os::raw::c_char,
                triple: *const ::std::os::raw::c_char,
                uuid: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBModule;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget9AddModuleEPKcS2_S2_S2_"]
            pub fn SBTarget_AddModule2(
                this: *mut root::lldb::SBTarget,
                path: *const ::std::os::raw::c_char,
                triple: *const ::std::os::raw::c_char,
                uuid_cstr: *const ::std::os::raw::c_char,
                symfile: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBModule;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget9AddModuleERKNS_12SBModuleSpecE"]
            pub fn SBTarget_AddModule3(
                this: *mut root::lldb::SBTarget,
                module_spec: *const root::lldb::SBModuleSpec,
            ) -> root::lldb::SBModule;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBTarget13GetNumModulesEv"]
            pub fn SBTarget_GetNumModules(this: *const root::lldb::SBTarget) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget16GetModuleAtIndexEj"]
            pub fn SBTarget_GetModuleAtIndex(
                this: *mut root::lldb::SBTarget,
                idx: u32,
            ) -> root::lldb::SBModule;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget12RemoveModuleENS_8SBModuleE"]
            pub fn SBTarget_RemoveModule(
                this: *mut root::lldb::SBTarget,
                module: root::lldb::SBModule,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBTarget11GetDebuggerEv"]
            pub fn SBTarget_GetDebugger(
                this: *const root::lldb::SBTarget,
            ) -> root::lldb::SBDebugger;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget10FindModuleERKNS_10SBFileSpecE"]
            pub fn SBTarget_FindModule(
                this: *mut root::lldb::SBTarget,
                file_spec: *const root::lldb::SBFileSpec,
            ) -> root::lldb::SBModule;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget16FindCompileUnitsERKNS_10SBFileSpecE"]
            pub fn SBTarget_FindCompileUnits(
                this: *mut root::lldb::SBTarget,
                sb_file_spec: *const root::lldb::SBFileSpec,
            ) -> root::lldb::SBSymbolContextList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget12GetByteOrderEv"]
            pub fn SBTarget_GetByteOrder(this: *mut root::lldb::SBTarget) -> root::lldb::ByteOrder;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget18GetAddressByteSizeEv"]
            pub fn SBTarget_GetAddressByteSize(this: *mut root::lldb::SBTarget) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget9GetTripleEv"]
            pub fn SBTarget_GetTriple(
                this: *mut root::lldb::SBTarget,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget10GetABINameEv"]
            pub fn SBTarget_GetABIName(
                this: *mut root::lldb::SBTarget,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBTarget8GetLabelEv"]
            pub fn SBTarget_GetLabel(
                this: *const root::lldb::SBTarget,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget8SetLabelEPKc"]
            pub fn SBTarget_SetLabel(
                this: *mut root::lldb::SBTarget,
                label: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget15GetDataByteSizeEv"]
            pub fn SBTarget_GetDataByteSize(this: *mut root::lldb::SBTarget) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget15GetCodeByteSizeEv"]
            pub fn SBTarget_GetCodeByteSize(this: *mut root::lldb::SBTarget) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBTarget35GetMaximumNumberOfChildrenToDisplayEv"]
            pub fn SBTarget_GetMaximumNumberOfChildrenToDisplay(
                this: *const root::lldb::SBTarget,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget21SetSectionLoadAddressENS_9SBSectionEm"]
            pub fn SBTarget_SetSectionLoadAddress(
                this: *mut root::lldb::SBTarget,
                section: root::lldb::SBSection,
                section_base_addr: root::lldb::addr_t,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget23ClearSectionLoadAddressENS_9SBSectionE"]
            pub fn SBTarget_ClearSectionLoadAddress(
                this: *mut root::lldb::SBTarget,
                section: root::lldb::SBSection,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget20SetModuleLoadAddressENS_8SBModuleEl"]
            pub fn SBTarget_SetModuleLoadAddress(
                this: *mut root::lldb::SBTarget,
                module: root::lldb::SBModule,
                sections_offset: i64,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget20SetModuleLoadAddressENS_8SBModuleEm"]
            pub fn SBTarget_SetModuleLoadAddress1(
                this: *mut root::lldb::SBTarget,
                module: root::lldb::SBModule,
                sections_offset: u64,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget22ClearModuleLoadAddressENS_8SBModuleE"]
            pub fn SBTarget_ClearModuleLoadAddress(
                this: *mut root::lldb::SBTarget,
                module: root::lldb::SBModule,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget13FindFunctionsEPKcj"]
            pub fn SBTarget_FindFunctions(
                this: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
                name_type_mask: u32,
            ) -> root::lldb::SBSymbolContextList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget19FindGlobalVariablesEPKcj"]
            pub fn SBTarget_FindGlobalVariables(
                this: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
                max_matches: u32,
            ) -> root::lldb::SBValueList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget23FindFirstGlobalVariableEPKc"]
            pub fn SBTarget_FindFirstGlobalVariable(
                this: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget19FindGlobalVariablesEPKcjNS_9MatchTypeE"]
            pub fn SBTarget_FindGlobalVariables1(
                this: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
                max_matches: u32,
                matchtype: root::lldb::MatchType,
            ) -> root::lldb::SBValueList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget19FindGlobalFunctionsEPKcjNS_9MatchTypeE"]
            pub fn SBTarget_FindGlobalFunctions(
                this: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
                max_matches: u32,
                matchtype: root::lldb::MatchType,
            ) -> root::lldb::SBSymbolContextList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget5ClearEv"]
            pub fn SBTarget_Clear(this: *mut root::lldb::SBTarget);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget18ResolveFileAddressEm"]
            pub fn SBTarget_ResolveFileAddress(
                this: *mut root::lldb::SBTarget,
                file_addr: root::lldb::addr_t,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget18ResolveLoadAddressEm"]
            pub fn SBTarget_ResolveLoadAddress(
                this: *mut root::lldb::SBTarget,
                vm_addr: root::lldb::addr_t,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget22ResolvePastLoadAddressEjm"]
            pub fn SBTarget_ResolvePastLoadAddress(
                this: *mut root::lldb::SBTarget,
                stop_id: u32,
                vm_addr: root::lldb::addr_t,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget30ResolveSymbolContextForAddressERKNS_9SBAddressEj"]
            pub fn SBTarget_ResolveSymbolContextForAddress(
                this: *mut root::lldb::SBTarget,
                addr: *const root::lldb::SBAddress,
                resolve_scope: u32,
            ) -> root::lldb::SBSymbolContext;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget10ReadMemoryENS_9SBAddressEPvmRNS_7SBErrorE"]
            pub fn SBTarget_ReadMemory(
                this: *mut root::lldb::SBTarget,
                addr: root::lldb::SBAddress,
                buf: *mut ::std::os::raw::c_void,
                size: usize,
                error: *mut root::lldb::SBError,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget26BreakpointCreateByLocationEPKcj"]
            pub fn SBTarget_BreakpointCreateByLocation(
                this: *mut root::lldb::SBTarget,
                file: *const ::std::os::raw::c_char,
                line: u32,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget26BreakpointCreateByLocationERKNS_10SBFileSpecEj"]
            pub fn SBTarget_BreakpointCreateByLocation1(
                this: *mut root::lldb::SBTarget,
                file_spec: *const root::lldb::SBFileSpec,
                line: u32,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget26BreakpointCreateByLocationERKNS_10SBFileSpecEjm"]
            pub fn SBTarget_BreakpointCreateByLocation2(
                this: *mut root::lldb::SBTarget,
                file_spec: *const root::lldb::SBFileSpec,
                line: u32,
                offset: root::lldb::addr_t,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget26BreakpointCreateByLocationERKNS_10SBFileSpecEjmRNS_14SBFileSpecListE"]
            pub fn SBTarget_BreakpointCreateByLocation3(
                this: *mut root::lldb::SBTarget,
                file_spec: *const root::lldb::SBFileSpec,
                line: u32,
                offset: root::lldb::addr_t,
                module_list: *mut root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget26BreakpointCreateByLocationERKNS_10SBFileSpecEjjmRNS_14SBFileSpecListE"]
            pub fn SBTarget_BreakpointCreateByLocation4(
                this: *mut root::lldb::SBTarget,
                file_spec: *const root::lldb::SBFileSpec,
                line: u32,
                column: u32,
                offset: root::lldb::addr_t,
                module_list: *mut root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget26BreakpointCreateByLocationERKNS_10SBFileSpecEjjmRNS_14SBFileSpecListEb"]
            pub fn SBTarget_BreakpointCreateByLocation5(
                this: *mut root::lldb::SBTarget,
                file_spec: *const root::lldb::SBFileSpec,
                line: u32,
                column: u32,
                offset: root::lldb::addr_t,
                module_list: *mut root::lldb::SBFileSpecList,
                move_to_nearest_code: bool,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget22BreakpointCreateByNameEPKcS2_"]
            pub fn SBTarget_BreakpointCreateByName(
                this: *mut root::lldb::SBTarget,
                symbol_name: *const ::std::os::raw::c_char,
                module_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget22BreakpointCreateByNameEPKcRKNS_14SBFileSpecListES5_"]
            pub fn SBTarget_BreakpointCreateByName1(
                this: *mut root::lldb::SBTarget,
                symbol_name: *const ::std::os::raw::c_char,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget22BreakpointCreateByNameEPKcjRKNS_14SBFileSpecListES5_"]
            pub fn SBTarget_BreakpointCreateByName2(
                this: *mut root::lldb::SBTarget,
                symbol_name: *const ::std::os::raw::c_char,
                name_type_mask: u32,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget22BreakpointCreateByNameEPKcjNS_12LanguageTypeERKNS_14SBFileSpecListES6_"]
            pub fn SBTarget_BreakpointCreateByName3(
                this: *mut root::lldb::SBTarget,
                symbol_name: *const ::std::os::raw::c_char,
                name_type_mask: u32,
                symbol_language: root::lldb::LanguageType,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget23BreakpointCreateByNamesEPPKcjjRKNS_14SBFileSpecListES6_"]
            pub fn SBTarget_BreakpointCreateByNames(
                this: *mut root::lldb::SBTarget,
                symbol_name: *mut *const ::std::os::raw::c_char,
                num_names: u32,
                name_type_mask: u32,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget23BreakpointCreateByNamesEPPKcjjNS_12LanguageTypeERKNS_14SBFileSpecListES7_"]
            pub fn SBTarget_BreakpointCreateByNames1(
                this: *mut root::lldb::SBTarget,
                symbol_name: *mut *const ::std::os::raw::c_char,
                num_names: u32,
                name_type_mask: u32,
                symbol_language: root::lldb::LanguageType,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget23BreakpointCreateByNamesEPPKcjjNS_12LanguageTypeEmRKNS_14SBFileSpecListES7_"]
            pub fn SBTarget_BreakpointCreateByNames2(
                this: *mut root::lldb::SBTarget,
                symbol_name: *mut *const ::std::os::raw::c_char,
                num_names: u32,
                name_type_mask: u32,
                symbol_language: root::lldb::LanguageType,
                offset: root::lldb::addr_t,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget23BreakpointCreateByRegexEPKcS2_"]
            pub fn SBTarget_BreakpointCreateByRegex(
                this: *mut root::lldb::SBTarget,
                symbol_name_regex: *const ::std::os::raw::c_char,
                module_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget23BreakpointCreateByRegexEPKcRKNS_14SBFileSpecListES5_"]
            pub fn SBTarget_BreakpointCreateByRegex1(
                this: *mut root::lldb::SBTarget,
                symbol_name_regex: *const ::std::os::raw::c_char,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget23BreakpointCreateByRegexEPKcNS_12LanguageTypeERKNS_14SBFileSpecListES6_"]
            pub fn SBTarget_BreakpointCreateByRegex2(
                this: *mut root::lldb::SBTarget,
                symbol_name_regex: *const ::std::os::raw::c_char,
                symbol_language: root::lldb::LanguageType,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget29BreakpointCreateBySourceRegexEPKcRKNS_10SBFileSpecES2_"]
            pub fn SBTarget_BreakpointCreateBySourceRegex(
                this: *mut root::lldb::SBTarget,
                source_regex: *const ::std::os::raw::c_char,
                source_file: *const root::lldb::SBFileSpec,
                module_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget29BreakpointCreateBySourceRegexEPKcRKNS_14SBFileSpecListES5_"]
            pub fn SBTarget_BreakpointCreateBySourceRegex1(
                this: *mut root::lldb::SBTarget,
                source_regex: *const ::std::os::raw::c_char,
                module_list: *const root::lldb::SBFileSpecList,
                source_file: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget29BreakpointCreateBySourceRegexEPKcRKNS_14SBFileSpecListES5_RKNS_12SBStringListE"]
            pub fn SBTarget_BreakpointCreateBySourceRegex2(
                this: *mut root::lldb::SBTarget,
                source_regex: *const ::std::os::raw::c_char,
                module_list: *const root::lldb::SBFileSpecList,
                source_file: *const root::lldb::SBFileSpecList,
                func_names: *const root::lldb::SBStringList,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget28BreakpointCreateForExceptionENS_12LanguageTypeEbb"]
            pub fn SBTarget_BreakpointCreateForException(
                this: *mut root::lldb::SBTarget,
                language: root::lldb::LanguageType,
                catch_bp: bool,
                throw_bp: bool,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget25BreakpointCreateByAddressEm"]
            pub fn SBTarget_BreakpointCreateByAddress(
                this: *mut root::lldb::SBTarget,
                address: root::lldb::addr_t,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget27BreakpointCreateBySBAddressERNS_9SBAddressE"]
            pub fn SBTarget_BreakpointCreateBySBAddress(
                this: *mut root::lldb::SBTarget,
                address: *mut root::lldb::SBAddress,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget26BreakpointCreateFromScriptEPKcRNS_16SBStructuredDataERKNS_14SBFileSpecListES7_b"]
            pub fn SBTarget_BreakpointCreateFromScript(
                this: *mut root::lldb::SBTarget,
                class_name: *const ::std::os::raw::c_char,
                extra_args: *mut root::lldb::SBStructuredData,
                module_list: *const root::lldb::SBFileSpecList,
                file_list: *const root::lldb::SBFileSpecList,
                request_hardware: bool,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget25BreakpointsCreateFromFileERNS_10SBFileSpecERNS_16SBBreakpointListE"]
            pub fn SBTarget_BreakpointsCreateFromFile(
                this: *mut root::lldb::SBTarget,
                source_file: *mut root::lldb::SBFileSpec,
                new_bps: *mut root::lldb::SBBreakpointList,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget25BreakpointsCreateFromFileERNS_10SBFileSpecERNS_12SBStringListERNS_16SBBreakpointListE"]
            pub fn SBTarget_BreakpointsCreateFromFile1(
                this: *mut root::lldb::SBTarget,
                source_file: *mut root::lldb::SBFileSpec,
                matching_names: *mut root::lldb::SBStringList,
                new_bps: *mut root::lldb::SBBreakpointList,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget22BreakpointsWriteToFileERNS_10SBFileSpecE"]
            pub fn SBTarget_BreakpointsWriteToFile(
                this: *mut root::lldb::SBTarget,
                dest_file: *mut root::lldb::SBFileSpec,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget22BreakpointsWriteToFileERNS_10SBFileSpecERNS_16SBBreakpointListEb"]
            pub fn SBTarget_BreakpointsWriteToFile1(
                this: *mut root::lldb::SBTarget,
                dest_file: *mut root::lldb::SBFileSpec,
                bkpt_list: *mut root::lldb::SBBreakpointList,
                append: bool,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBTarget17GetNumBreakpointsEv"]
            pub fn SBTarget_GetNumBreakpoints(this: *const root::lldb::SBTarget) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBTarget20GetBreakpointAtIndexEj"]
            pub fn SBTarget_GetBreakpointAtIndex(
                this: *const root::lldb::SBTarget,
                idx: u32,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget16BreakpointDeleteEi"]
            pub fn SBTarget_BreakpointDelete(
                this: *mut root::lldb::SBTarget,
                break_id: root::lldb::break_id_t,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget18FindBreakpointByIDEi"]
            pub fn SBTarget_FindBreakpointByID(
                this: *mut root::lldb::SBTarget,
                break_id: root::lldb::break_id_t,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget21FindBreakpointsByNameEPKcRNS_16SBBreakpointListE"]
            pub fn SBTarget_FindBreakpointsByName(
                this: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
                bkpt_list: *mut root::lldb::SBBreakpointList,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget18GetBreakpointNamesERNS_12SBStringListE"]
            pub fn SBTarget_GetBreakpointNames(
                this: *mut root::lldb::SBTarget,
                names: *mut root::lldb::SBStringList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget20DeleteBreakpointNameEPKc"]
            pub fn SBTarget_DeleteBreakpointName(
                this: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget20EnableAllBreakpointsEv"]
            pub fn SBTarget_EnableAllBreakpoints(this: *mut root::lldb::SBTarget) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget21DisableAllBreakpointsEv"]
            pub fn SBTarget_DisableAllBreakpoints(this: *mut root::lldb::SBTarget) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget20DeleteAllBreakpointsEv"]
            pub fn SBTarget_DeleteAllBreakpoints(this: *mut root::lldb::SBTarget) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBTarget17GetNumWatchpointsEv"]
            pub fn SBTarget_GetNumWatchpoints(this: *const root::lldb::SBTarget) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBTarget20GetWatchpointAtIndexEj"]
            pub fn SBTarget_GetWatchpointAtIndex(
                this: *const root::lldb::SBTarget,
                idx: u32,
            ) -> root::lldb::SBWatchpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget16DeleteWatchpointEi"]
            pub fn SBTarget_DeleteWatchpoint(
                this: *mut root::lldb::SBTarget,
                watch_id: root::lldb::watch_id_t,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget18FindWatchpointByIDEi"]
            pub fn SBTarget_FindWatchpointByID(
                this: *mut root::lldb::SBTarget,
                watch_id: root::lldb::watch_id_t,
            ) -> root::lldb::SBWatchpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget12WatchAddressEmmbbRNS_7SBErrorE"]
            pub fn SBTarget_WatchAddress(
                this: *mut root::lldb::SBTarget,
                addr: root::lldb::addr_t,
                size: usize,
                read: bool,
                modify: bool,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBWatchpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget25WatchpointCreateByAddressEmmNS_19SBWatchpointOptionsERNS_7SBErrorE"]
            pub fn SBTarget_WatchpointCreateByAddress(
                this: *mut root::lldb::SBTarget,
                addr: root::lldb::addr_t,
                size: usize,
                options: root::lldb::SBWatchpointOptions,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBWatchpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget20EnableAllWatchpointsEv"]
            pub fn SBTarget_EnableAllWatchpoints(this: *mut root::lldb::SBTarget) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget21DisableAllWatchpointsEv"]
            pub fn SBTarget_DisableAllWatchpoints(this: *mut root::lldb::SBTarget) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget20DeleteAllWatchpointsEv"]
            pub fn SBTarget_DeleteAllWatchpoints(this: *mut root::lldb::SBTarget) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBTarget14GetBroadcasterEv"]
            pub fn SBTarget_GetBroadcaster(
                this: *const root::lldb::SBTarget,
            ) -> root::lldb::SBBroadcaster;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget13FindFirstTypeEPKc"]
            pub fn SBTarget_FindFirstType(
                this: *mut root::lldb::SBTarget,
                type_: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget9FindTypesEPKc"]
            pub fn SBTarget_FindTypes(
                this: *mut root::lldb::SBTarget,
                type_: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTypeList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget12GetBasicTypeENS_9BasicTypeE"]
            pub fn SBTarget_GetBasicType(
                this: *mut root::lldb::SBTarget,
                type_: root::lldb::BasicType,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget22CreateValueFromAddressEPKcNS_9SBAddressENS_6SBTypeE"]
            pub fn SBTarget_CreateValueFromAddress(
                this: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
                addr: root::lldb::SBAddress,
                type_: root::lldb::SBType,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget19CreateValueFromDataEPKcNS_6SBDataENS_6SBTypeE"]
            pub fn SBTarget_CreateValueFromData(
                this: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
                data: root::lldb::SBData,
                type_: root::lldb::SBType,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget25CreateValueFromExpressionEPKcS2_"]
            pub fn SBTarget_CreateValueFromExpression(
                this: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
                expr: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget16GetSourceManagerEv"]
            pub fn SBTarget_GetSourceManager(
                this: *mut root::lldb::SBTarget,
            ) -> root::lldb::SBSourceManager;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget16ReadInstructionsENS_9SBAddressEj"]
            pub fn SBTarget_ReadInstructions(
                this: *mut root::lldb::SBTarget,
                base_addr: root::lldb::SBAddress,
                count: u32,
            ) -> root::lldb::SBInstructionList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget16ReadInstructionsENS_9SBAddressEjPKc"]
            pub fn SBTarget_ReadInstructions1(
                this: *mut root::lldb::SBTarget,
                base_addr: root::lldb::SBAddress,
                count: u32,
                flavor_string: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBInstructionList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget16ReadInstructionsENS_9SBAddressES1_PKc"]
            pub fn SBTarget_ReadInstructions2(
                this: *mut root::lldb::SBTarget,
                start_addr: root::lldb::SBAddress,
                end_addr: root::lldb::SBAddress,
                flavor_string: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBInstructionList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget15GetInstructionsENS_9SBAddressEPKvm"]
            pub fn SBTarget_GetInstructions(
                this: *mut root::lldb::SBTarget,
                base_addr: root::lldb::SBAddress,
                buf: *const ::std::os::raw::c_void,
                size: usize,
            ) -> root::lldb::SBInstructionList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget25GetInstructionsWithFlavorENS_9SBAddressEPKcPKvm"]
            pub fn SBTarget_GetInstructionsWithFlavor(
                this: *mut root::lldb::SBTarget,
                base_addr: root::lldb::SBAddress,
                flavor_string: *const ::std::os::raw::c_char,
                buf: *const ::std::os::raw::c_void,
                size: usize,
            ) -> root::lldb::SBInstructionList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget15GetInstructionsEmPKvm"]
            pub fn SBTarget_GetInstructions1(
                this: *mut root::lldb::SBTarget,
                base_addr: root::lldb::addr_t,
                buf: *const ::std::os::raw::c_void,
                size: usize,
            ) -> root::lldb::SBInstructionList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget25GetInstructionsWithFlavorEmPKcPKvm"]
            pub fn SBTarget_GetInstructionsWithFlavor1(
                this: *mut root::lldb::SBTarget,
                base_addr: root::lldb::addr_t,
                flavor_string: *const ::std::os::raw::c_char,
                buf: *const ::std::os::raw::c_void,
                size: usize,
            ) -> root::lldb::SBInstructionList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget11FindSymbolsEPKcNS_10SymbolTypeE"]
            pub fn SBTarget_FindSymbols(
                this: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
                type_: root::lldb::SymbolType,
            ) -> root::lldb::SBSymbolContextList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE"]
            pub fn SBTarget_GetDescription(
                this: *mut root::lldb::SBTarget,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget18EvaluateExpressionEPKc"]
            pub fn SBTarget_EvaluateExpression(
                this: *mut root::lldb::SBTarget,
                expr: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget18EvaluateExpressionEPKcRKNS_19SBExpressionOptionsE"]
            pub fn SBTarget_EvaluateExpression1(
                this: *mut root::lldb::SBTarget,
                expr: *const ::std::os::raw::c_char,
                options: *const root::lldb::SBExpressionOptions,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget19GetStackRedZoneSizeEv"]
            pub fn SBTarget_GetStackRedZoneSize(
                this: *mut root::lldb::SBTarget,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBTarget8IsLoadedERKNS_8SBModuleE"]
            pub fn SBTarget_IsLoaded(
                this: *const root::lldb::SBTarget,
                module: *const root::lldb::SBModule,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBTarget13GetLaunchInfoEv"]
            pub fn SBTarget_GetLaunchInfo(
                this: *const root::lldb::SBTarget,
            ) -> root::lldb::SBLaunchInfo;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget13SetLaunchInfoERKNS_12SBLaunchInfoE"]
            pub fn SBTarget_SetLaunchInfo(
                this: *mut root::lldb::SBTarget,
                launch_info: *const root::lldb::SBLaunchInfo,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget8GetTraceEv"]
            pub fn SBTarget_GetTrace(this: *mut root::lldb::SBTarget) -> root::lldb::SBTrace;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget11CreateTraceERNS_7SBErrorE"]
            pub fn SBTarget_CreateTrace(
                this: *mut root::lldb::SBTarget,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBTrace;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBTarget5GetSPEv"]
            pub fn SBTarget_GetSP(this: *const root::lldb::SBTarget) -> root::lldb::TargetSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTarget5SetSPERKSt10shared_ptrIN12lldb_private6TargetEE"]
            pub fn SBTarget_SetSP(
                this: *mut root::lldb::SBTarget,
                target_sp: *const root::lldb::TargetSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTargetC1Ev"]
            pub fn SBTarget_SBTarget(this: *mut root::lldb::SBTarget);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTargetC1ERKS0_"]
            pub fn SBTarget_SBTarget1(
                this: *mut root::lldb::SBTarget,
                rhs: *const root::lldb::SBTarget,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTargetC1ERKSt10shared_ptrIN12lldb_private6TargetEE"]
            pub fn SBTarget_SBTarget2(
                this: *mut root::lldb::SBTarget,
                target_sp: *const root::lldb::TargetSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBTargetD1Ev"]
            pub fn SBTarget_SBTarget_destructor(this: *mut root::lldb::SBTarget);
        }
        impl SBTarget {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBTarget_IsValid(self)
            }
            #[inline]
            pub unsafe fn EventIsTargetEvent(event: *const root::lldb::SBEvent) -> bool {
                SBTarget_EventIsTargetEvent(event)
            }
            #[inline]
            pub unsafe fn GetTargetFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBTarget {
                SBTarget_GetTargetFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetNumModulesFromEvent(event: *const root::lldb::SBEvent) -> u32 {
                SBTarget_GetNumModulesFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetModuleAtIndexFromEvent(
                idx: u32,
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBModule {
                SBTarget_GetModuleAtIndexFromEvent(idx, event)
            }
            #[inline]
            pub unsafe fn GetBroadcasterClassName() -> *const ::std::os::raw::c_char {
                SBTarget_GetBroadcasterClassName()
            }
            #[inline]
            pub unsafe fn GetProcess(&mut self) -> root::lldb::SBProcess {
                SBTarget_GetProcess(self)
            }
            #[inline]
            pub unsafe fn SetCollectingStats(&mut self, v: bool) {
                SBTarget_SetCollectingStats(self, v)
            }
            #[inline]
            pub unsafe fn GetCollectingStats(&mut self) -> bool {
                SBTarget_GetCollectingStats(self)
            }
            #[inline]
            pub unsafe fn GetStatistics(&mut self) -> root::lldb::SBStructuredData {
                SBTarget_GetStatistics(self)
            }
            #[inline]
            pub unsafe fn GetStatistics1(
                &mut self,
                options: root::lldb::SBStatisticsOptions,
            ) -> root::lldb::SBStructuredData {
                SBTarget_GetStatistics1(self, options)
            }
            #[inline]
            pub unsafe fn GetPlatform(&mut self) -> root::lldb::SBPlatform {
                SBTarget_GetPlatform(self)
            }
            #[inline]
            pub unsafe fn GetEnvironment(&mut self) -> root::lldb::SBEnvironment {
                SBTarget_GetEnvironment(self)
            }
            #[inline]
            pub unsafe fn Install(&mut self) -> root::lldb::SBError {
                SBTarget_Install(self)
            }
            #[inline]
            pub unsafe fn Launch(
                &mut self,
                listener: *mut root::lldb::SBListener,
                argv: *mut *const ::std::os::raw::c_char,
                envp: *mut *const ::std::os::raw::c_char,
                stdin_path: *const ::std::os::raw::c_char,
                stdout_path: *const ::std::os::raw::c_char,
                stderr_path: *const ::std::os::raw::c_char,
                working_directory: *const ::std::os::raw::c_char,
                launch_flags: u32,
                stop_at_entry: bool,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess {
                SBTarget_Launch(
                    self,
                    listener,
                    argv,
                    envp,
                    stdin_path,
                    stdout_path,
                    stderr_path,
                    working_directory,
                    launch_flags,
                    stop_at_entry,
                    error,
                )
            }
            #[inline]
            pub unsafe fn LoadCore(
                &mut self,
                core_file: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBProcess {
                SBTarget_LoadCore(self, core_file)
            }
            #[inline]
            pub unsafe fn LoadCore1(
                &mut self,
                core_file: *const ::std::os::raw::c_char,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess {
                SBTarget_LoadCore1(self, core_file, error)
            }
            #[inline]
            pub unsafe fn LaunchSimple(
                &mut self,
                argv: *mut *const ::std::os::raw::c_char,
                envp: *mut *const ::std::os::raw::c_char,
                working_directory: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBProcess {
                SBTarget_LaunchSimple(self, argv, envp, working_directory)
            }
            #[inline]
            pub unsafe fn Launch1(
                &mut self,
                launch_info: *mut root::lldb::SBLaunchInfo,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess {
                SBTarget_Launch1(self, launch_info, error)
            }
            #[inline]
            pub unsafe fn Attach(
                &mut self,
                attach_info: *mut root::lldb::SBAttachInfo,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess {
                SBTarget_Attach(self, attach_info, error)
            }
            #[inline]
            pub unsafe fn AttachToProcessWithID(
                &mut self,
                listener: *mut root::lldb::SBListener,
                pid: root::lldb::pid_t,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess {
                SBTarget_AttachToProcessWithID(self, listener, pid, error)
            }
            #[inline]
            pub unsafe fn AttachToProcessWithName(
                &mut self,
                listener: *mut root::lldb::SBListener,
                name: *const ::std::os::raw::c_char,
                wait_for: bool,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess {
                SBTarget_AttachToProcessWithName(self, listener, name, wait_for, error)
            }
            #[inline]
            pub unsafe fn ConnectRemote(
                &mut self,
                listener: *mut root::lldb::SBListener,
                url: *const ::std::os::raw::c_char,
                plugin_name: *const ::std::os::raw::c_char,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess {
                SBTarget_ConnectRemote(self, listener, url, plugin_name, error)
            }
            #[inline]
            pub unsafe fn GetExecutable(&mut self) -> root::lldb::SBFileSpec {
                SBTarget_GetExecutable(self)
            }
            #[inline]
            pub unsafe fn AppendImageSearchPath(
                &mut self,
                from: *const ::std::os::raw::c_char,
                to: *const ::std::os::raw::c_char,
                error: *mut root::lldb::SBError,
            ) {
                SBTarget_AppendImageSearchPath(self, from, to, error)
            }
            #[inline]
            pub unsafe fn AddModule(&mut self, module: *mut root::lldb::SBModule) -> bool {
                SBTarget_AddModule(self, module)
            }
            #[inline]
            pub unsafe fn AddModule1(
                &mut self,
                path: *const ::std::os::raw::c_char,
                triple: *const ::std::os::raw::c_char,
                uuid: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBModule {
                SBTarget_AddModule1(self, path, triple, uuid)
            }
            #[inline]
            pub unsafe fn AddModule2(
                &mut self,
                path: *const ::std::os::raw::c_char,
                triple: *const ::std::os::raw::c_char,
                uuid_cstr: *const ::std::os::raw::c_char,
                symfile: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBModule {
                SBTarget_AddModule2(self, path, triple, uuid_cstr, symfile)
            }
            #[inline]
            pub unsafe fn AddModule3(
                &mut self,
                module_spec: *const root::lldb::SBModuleSpec,
            ) -> root::lldb::SBModule {
                SBTarget_AddModule3(self, module_spec)
            }
            #[inline]
            pub unsafe fn GetNumModules(&self) -> u32 {
                SBTarget_GetNumModules(self)
            }
            #[inline]
            pub unsafe fn GetModuleAtIndex(&mut self, idx: u32) -> root::lldb::SBModule {
                SBTarget_GetModuleAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn RemoveModule(&mut self, module: root::lldb::SBModule) -> bool {
                SBTarget_RemoveModule(self, module)
            }
            #[inline]
            pub unsafe fn GetDebugger(&self) -> root::lldb::SBDebugger {
                SBTarget_GetDebugger(self)
            }
            #[inline]
            pub unsafe fn FindModule(
                &mut self,
                file_spec: *const root::lldb::SBFileSpec,
            ) -> root::lldb::SBModule {
                SBTarget_FindModule(self, file_spec)
            }
            #[inline]
            pub unsafe fn FindCompileUnits(
                &mut self,
                sb_file_spec: *const root::lldb::SBFileSpec,
            ) -> root::lldb::SBSymbolContextList {
                SBTarget_FindCompileUnits(self, sb_file_spec)
            }
            #[inline]
            pub unsafe fn GetByteOrder(&mut self) -> root::lldb::ByteOrder {
                SBTarget_GetByteOrder(self)
            }
            #[inline]
            pub unsafe fn GetAddressByteSize(&mut self) -> u32 {
                SBTarget_GetAddressByteSize(self)
            }
            #[inline]
            pub unsafe fn GetTriple(&mut self) -> *const ::std::os::raw::c_char {
                SBTarget_GetTriple(self)
            }
            #[inline]
            pub unsafe fn GetABIName(&mut self) -> *const ::std::os::raw::c_char {
                SBTarget_GetABIName(self)
            }
            #[inline]
            pub unsafe fn GetLabel(&self) -> *const ::std::os::raw::c_char {
                SBTarget_GetLabel(self)
            }
            #[inline]
            pub unsafe fn SetLabel(
                &mut self,
                label: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError {
                SBTarget_SetLabel(self, label)
            }
            #[inline]
            pub unsafe fn GetDataByteSize(&mut self) -> u32 {
                SBTarget_GetDataByteSize(self)
            }
            #[inline]
            pub unsafe fn GetCodeByteSize(&mut self) -> u32 {
                SBTarget_GetCodeByteSize(self)
            }
            #[inline]
            pub unsafe fn GetMaximumNumberOfChildrenToDisplay(&self) -> u32 {
                SBTarget_GetMaximumNumberOfChildrenToDisplay(self)
            }
            #[inline]
            pub unsafe fn SetSectionLoadAddress(
                &mut self,
                section: root::lldb::SBSection,
                section_base_addr: root::lldb::addr_t,
            ) -> root::lldb::SBError {
                SBTarget_SetSectionLoadAddress(self, section, section_base_addr)
            }
            #[inline]
            pub unsafe fn ClearSectionLoadAddress(
                &mut self,
                section: root::lldb::SBSection,
            ) -> root::lldb::SBError {
                SBTarget_ClearSectionLoadAddress(self, section)
            }
            #[inline]
            pub unsafe fn SetModuleLoadAddress(
                &mut self,
                module: root::lldb::SBModule,
                sections_offset: i64,
            ) -> root::lldb::SBError {
                SBTarget_SetModuleLoadAddress(self, module, sections_offset)
            }
            #[inline]
            pub unsafe fn SetModuleLoadAddress1(
                &mut self,
                module: root::lldb::SBModule,
                sections_offset: u64,
            ) -> root::lldb::SBError {
                SBTarget_SetModuleLoadAddress1(self, module, sections_offset)
            }
            #[inline]
            pub unsafe fn ClearModuleLoadAddress(
                &mut self,
                module: root::lldb::SBModule,
            ) -> root::lldb::SBError {
                SBTarget_ClearModuleLoadAddress(self, module)
            }
            #[inline]
            pub unsafe fn FindFunctions(
                &mut self,
                name: *const ::std::os::raw::c_char,
                name_type_mask: u32,
            ) -> root::lldb::SBSymbolContextList {
                SBTarget_FindFunctions(self, name, name_type_mask)
            }
            #[inline]
            pub unsafe fn FindGlobalVariables(
                &mut self,
                name: *const ::std::os::raw::c_char,
                max_matches: u32,
            ) -> root::lldb::SBValueList {
                SBTarget_FindGlobalVariables(self, name, max_matches)
            }
            #[inline]
            pub unsafe fn FindFirstGlobalVariable(
                &mut self,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBTarget_FindFirstGlobalVariable(self, name)
            }
            #[inline]
            pub unsafe fn FindGlobalVariables1(
                &mut self,
                name: *const ::std::os::raw::c_char,
                max_matches: u32,
                matchtype: root::lldb::MatchType,
            ) -> root::lldb::SBValueList {
                SBTarget_FindGlobalVariables1(self, name, max_matches, matchtype)
            }
            #[inline]
            pub unsafe fn FindGlobalFunctions(
                &mut self,
                name: *const ::std::os::raw::c_char,
                max_matches: u32,
                matchtype: root::lldb::MatchType,
            ) -> root::lldb::SBSymbolContextList {
                SBTarget_FindGlobalFunctions(self, name, max_matches, matchtype)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBTarget_Clear(self)
            }
            #[inline]
            pub unsafe fn ResolveFileAddress(
                &mut self,
                file_addr: root::lldb::addr_t,
            ) -> root::lldb::SBAddress {
                SBTarget_ResolveFileAddress(self, file_addr)
            }
            #[inline]
            pub unsafe fn ResolveLoadAddress(
                &mut self,
                vm_addr: root::lldb::addr_t,
            ) -> root::lldb::SBAddress {
                SBTarget_ResolveLoadAddress(self, vm_addr)
            }
            #[inline]
            pub unsafe fn ResolvePastLoadAddress(
                &mut self,
                stop_id: u32,
                vm_addr: root::lldb::addr_t,
            ) -> root::lldb::SBAddress {
                SBTarget_ResolvePastLoadAddress(self, stop_id, vm_addr)
            }
            #[inline]
            pub unsafe fn ResolveSymbolContextForAddress(
                &mut self,
                addr: *const root::lldb::SBAddress,
                resolve_scope: u32,
            ) -> root::lldb::SBSymbolContext {
                SBTarget_ResolveSymbolContextForAddress(self, addr, resolve_scope)
            }
            #[inline]
            pub unsafe fn ReadMemory(
                &mut self,
                addr: root::lldb::SBAddress,
                buf: *mut ::std::os::raw::c_void,
                size: usize,
                error: *mut root::lldb::SBError,
            ) -> usize {
                SBTarget_ReadMemory(self, addr, buf, size, error)
            }
            #[inline]
            pub unsafe fn BreakpointCreateByLocation(
                &mut self,
                file: *const ::std::os::raw::c_char,
                line: u32,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByLocation(self, file, line)
            }
            #[inline]
            pub unsafe fn BreakpointCreateByLocation1(
                &mut self,
                file_spec: *const root::lldb::SBFileSpec,
                line: u32,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByLocation1(self, file_spec, line)
            }
            #[inline]
            pub unsafe fn BreakpointCreateByLocation2(
                &mut self,
                file_spec: *const root::lldb::SBFileSpec,
                line: u32,
                offset: root::lldb::addr_t,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByLocation2(self, file_spec, line, offset)
            }
            #[inline]
            pub unsafe fn BreakpointCreateByLocation3(
                &mut self,
                file_spec: *const root::lldb::SBFileSpec,
                line: u32,
                offset: root::lldb::addr_t,
                module_list: *mut root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByLocation3(self, file_spec, line, offset, module_list)
            }
            #[inline]
            pub unsafe fn BreakpointCreateByLocation4(
                &mut self,
                file_spec: *const root::lldb::SBFileSpec,
                line: u32,
                column: u32,
                offset: root::lldb::addr_t,
                module_list: *mut root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByLocation4(
                    self,
                    file_spec,
                    line,
                    column,
                    offset,
                    module_list,
                )
            }
            #[inline]
            pub unsafe fn BreakpointCreateByLocation5(
                &mut self,
                file_spec: *const root::lldb::SBFileSpec,
                line: u32,
                column: u32,
                offset: root::lldb::addr_t,
                module_list: *mut root::lldb::SBFileSpecList,
                move_to_nearest_code: bool,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByLocation5(
                    self,
                    file_spec,
                    line,
                    column,
                    offset,
                    module_list,
                    move_to_nearest_code,
                )
            }
            #[inline]
            pub unsafe fn BreakpointCreateByName(
                &mut self,
                symbol_name: *const ::std::os::raw::c_char,
                module_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByName(self, symbol_name, module_name)
            }
            #[inline]
            pub unsafe fn BreakpointCreateByName1(
                &mut self,
                symbol_name: *const ::std::os::raw::c_char,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByName1(self, symbol_name, module_list, comp_unit_list)
            }
            #[inline]
            pub unsafe fn BreakpointCreateByName2(
                &mut self,
                symbol_name: *const ::std::os::raw::c_char,
                name_type_mask: u32,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByName2(
                    self,
                    symbol_name,
                    name_type_mask,
                    module_list,
                    comp_unit_list,
                )
            }
            #[inline]
            pub unsafe fn BreakpointCreateByName3(
                &mut self,
                symbol_name: *const ::std::os::raw::c_char,
                name_type_mask: u32,
                symbol_language: root::lldb::LanguageType,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByName3(
                    self,
                    symbol_name,
                    name_type_mask,
                    symbol_language,
                    module_list,
                    comp_unit_list,
                )
            }
            #[inline]
            pub unsafe fn BreakpointCreateByNames(
                &mut self,
                symbol_name: *mut *const ::std::os::raw::c_char,
                num_names: u32,
                name_type_mask: u32,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByNames(
                    self,
                    symbol_name,
                    num_names,
                    name_type_mask,
                    module_list,
                    comp_unit_list,
                )
            }
            #[inline]
            pub unsafe fn BreakpointCreateByNames1(
                &mut self,
                symbol_name: *mut *const ::std::os::raw::c_char,
                num_names: u32,
                name_type_mask: u32,
                symbol_language: root::lldb::LanguageType,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByNames1(
                    self,
                    symbol_name,
                    num_names,
                    name_type_mask,
                    symbol_language,
                    module_list,
                    comp_unit_list,
                )
            }
            #[inline]
            pub unsafe fn BreakpointCreateByNames2(
                &mut self,
                symbol_name: *mut *const ::std::os::raw::c_char,
                num_names: u32,
                name_type_mask: u32,
                symbol_language: root::lldb::LanguageType,
                offset: root::lldb::addr_t,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByNames2(
                    self,
                    symbol_name,
                    num_names,
                    name_type_mask,
                    symbol_language,
                    offset,
                    module_list,
                    comp_unit_list,
                )
            }
            #[inline]
            pub unsafe fn BreakpointCreateByRegex(
                &mut self,
                symbol_name_regex: *const ::std::os::raw::c_char,
                module_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByRegex(self, symbol_name_regex, module_name)
            }
            #[inline]
            pub unsafe fn BreakpointCreateByRegex1(
                &mut self,
                symbol_name_regex: *const ::std::os::raw::c_char,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByRegex1(
                    self,
                    symbol_name_regex,
                    module_list,
                    comp_unit_list,
                )
            }
            #[inline]
            pub unsafe fn BreakpointCreateByRegex2(
                &mut self,
                symbol_name_regex: *const ::std::os::raw::c_char,
                symbol_language: root::lldb::LanguageType,
                module_list: *const root::lldb::SBFileSpecList,
                comp_unit_list: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByRegex2(
                    self,
                    symbol_name_regex,
                    symbol_language,
                    module_list,
                    comp_unit_list,
                )
            }
            #[inline]
            pub unsafe fn BreakpointCreateBySourceRegex(
                &mut self,
                source_regex: *const ::std::os::raw::c_char,
                source_file: *const root::lldb::SBFileSpec,
                module_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateBySourceRegex(self, source_regex, source_file, module_name)
            }
            #[inline]
            pub unsafe fn BreakpointCreateBySourceRegex1(
                &mut self,
                source_regex: *const ::std::os::raw::c_char,
                module_list: *const root::lldb::SBFileSpecList,
                source_file: *const root::lldb::SBFileSpecList,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateBySourceRegex1(
                    self,
                    source_regex,
                    module_list,
                    source_file,
                )
            }
            #[inline]
            pub unsafe fn BreakpointCreateBySourceRegex2(
                &mut self,
                source_regex: *const ::std::os::raw::c_char,
                module_list: *const root::lldb::SBFileSpecList,
                source_file: *const root::lldb::SBFileSpecList,
                func_names: *const root::lldb::SBStringList,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateBySourceRegex2(
                    self,
                    source_regex,
                    module_list,
                    source_file,
                    func_names,
                )
            }
            #[inline]
            pub unsafe fn BreakpointCreateForException(
                &mut self,
                language: root::lldb::LanguageType,
                catch_bp: bool,
                throw_bp: bool,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateForException(self, language, catch_bp, throw_bp)
            }
            #[inline]
            pub unsafe fn BreakpointCreateByAddress(
                &mut self,
                address: root::lldb::addr_t,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateByAddress(self, address)
            }
            #[inline]
            pub unsafe fn BreakpointCreateBySBAddress(
                &mut self,
                address: *mut root::lldb::SBAddress,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateBySBAddress(self, address)
            }
            #[inline]
            pub unsafe fn BreakpointCreateFromScript(
                &mut self,
                class_name: *const ::std::os::raw::c_char,
                extra_args: *mut root::lldb::SBStructuredData,
                module_list: *const root::lldb::SBFileSpecList,
                file_list: *const root::lldb::SBFileSpecList,
                request_hardware: bool,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_BreakpointCreateFromScript(
                    self,
                    class_name,
                    extra_args,
                    module_list,
                    file_list,
                    request_hardware,
                )
            }
            #[inline]
            pub unsafe fn BreakpointsCreateFromFile(
                &mut self,
                source_file: *mut root::lldb::SBFileSpec,
                new_bps: *mut root::lldb::SBBreakpointList,
            ) -> root::lldb::SBError {
                SBTarget_BreakpointsCreateFromFile(self, source_file, new_bps)
            }
            #[inline]
            pub unsafe fn BreakpointsCreateFromFile1(
                &mut self,
                source_file: *mut root::lldb::SBFileSpec,
                matching_names: *mut root::lldb::SBStringList,
                new_bps: *mut root::lldb::SBBreakpointList,
            ) -> root::lldb::SBError {
                SBTarget_BreakpointsCreateFromFile1(self, source_file, matching_names, new_bps)
            }
            #[inline]
            pub unsafe fn BreakpointsWriteToFile(
                &mut self,
                dest_file: *mut root::lldb::SBFileSpec,
            ) -> root::lldb::SBError {
                SBTarget_BreakpointsWriteToFile(self, dest_file)
            }
            #[inline]
            pub unsafe fn BreakpointsWriteToFile1(
                &mut self,
                dest_file: *mut root::lldb::SBFileSpec,
                bkpt_list: *mut root::lldb::SBBreakpointList,
                append: bool,
            ) -> root::lldb::SBError {
                SBTarget_BreakpointsWriteToFile1(self, dest_file, bkpt_list, append)
            }
            #[inline]
            pub unsafe fn GetNumBreakpoints(&self) -> u32 {
                SBTarget_GetNumBreakpoints(self)
            }
            #[inline]
            pub unsafe fn GetBreakpointAtIndex(&self, idx: u32) -> root::lldb::SBBreakpoint {
                SBTarget_GetBreakpointAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn BreakpointDelete(&mut self, break_id: root::lldb::break_id_t) -> bool {
                SBTarget_BreakpointDelete(self, break_id)
            }
            #[inline]
            pub unsafe fn FindBreakpointByID(
                &mut self,
                break_id: root::lldb::break_id_t,
            ) -> root::lldb::SBBreakpoint {
                SBTarget_FindBreakpointByID(self, break_id)
            }
            #[inline]
            pub unsafe fn FindBreakpointsByName(
                &mut self,
                name: *const ::std::os::raw::c_char,
                bkpt_list: *mut root::lldb::SBBreakpointList,
            ) -> bool {
                SBTarget_FindBreakpointsByName(self, name, bkpt_list)
            }
            #[inline]
            pub unsafe fn GetBreakpointNames(&mut self, names: *mut root::lldb::SBStringList) {
                SBTarget_GetBreakpointNames(self, names)
            }
            #[inline]
            pub unsafe fn DeleteBreakpointName(&mut self, name: *const ::std::os::raw::c_char) {
                SBTarget_DeleteBreakpointName(self, name)
            }
            #[inline]
            pub unsafe fn EnableAllBreakpoints(&mut self) -> bool {
                SBTarget_EnableAllBreakpoints(self)
            }
            #[inline]
            pub unsafe fn DisableAllBreakpoints(&mut self) -> bool {
                SBTarget_DisableAllBreakpoints(self)
            }
            #[inline]
            pub unsafe fn DeleteAllBreakpoints(&mut self) -> bool {
                SBTarget_DeleteAllBreakpoints(self)
            }
            #[inline]
            pub unsafe fn GetNumWatchpoints(&self) -> u32 {
                SBTarget_GetNumWatchpoints(self)
            }
            #[inline]
            pub unsafe fn GetWatchpointAtIndex(&self, idx: u32) -> root::lldb::SBWatchpoint {
                SBTarget_GetWatchpointAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn DeleteWatchpoint(&mut self, watch_id: root::lldb::watch_id_t) -> bool {
                SBTarget_DeleteWatchpoint(self, watch_id)
            }
            #[inline]
            pub unsafe fn FindWatchpointByID(
                &mut self,
                watch_id: root::lldb::watch_id_t,
            ) -> root::lldb::SBWatchpoint {
                SBTarget_FindWatchpointByID(self, watch_id)
            }
            #[inline]
            pub unsafe fn WatchAddress(
                &mut self,
                addr: root::lldb::addr_t,
                size: usize,
                read: bool,
                modify: bool,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBWatchpoint {
                SBTarget_WatchAddress(self, addr, size, read, modify, error)
            }
            #[inline]
            pub unsafe fn WatchpointCreateByAddress(
                &mut self,
                addr: root::lldb::addr_t,
                size: usize,
                options: root::lldb::SBWatchpointOptions,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBWatchpoint {
                SBTarget_WatchpointCreateByAddress(self, addr, size, options, error)
            }
            #[inline]
            pub unsafe fn EnableAllWatchpoints(&mut self) -> bool {
                SBTarget_EnableAllWatchpoints(self)
            }
            #[inline]
            pub unsafe fn DisableAllWatchpoints(&mut self) -> bool {
                SBTarget_DisableAllWatchpoints(self)
            }
            #[inline]
            pub unsafe fn DeleteAllWatchpoints(&mut self) -> bool {
                SBTarget_DeleteAllWatchpoints(self)
            }
            #[inline]
            pub unsafe fn GetBroadcaster(&self) -> root::lldb::SBBroadcaster {
                SBTarget_GetBroadcaster(self)
            }
            #[inline]
            pub unsafe fn FindFirstType(
                &mut self,
                type_: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBType {
                SBTarget_FindFirstType(self, type_)
            }
            #[inline]
            pub unsafe fn FindTypes(
                &mut self,
                type_: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTypeList {
                SBTarget_FindTypes(self, type_)
            }
            #[inline]
            pub unsafe fn GetBasicType(
                &mut self,
                type_: root::lldb::BasicType,
            ) -> root::lldb::SBType {
                SBTarget_GetBasicType(self, type_)
            }
            #[inline]
            pub unsafe fn CreateValueFromAddress(
                &mut self,
                name: *const ::std::os::raw::c_char,
                addr: root::lldb::SBAddress,
                type_: root::lldb::SBType,
            ) -> root::lldb::SBValue {
                SBTarget_CreateValueFromAddress(self, name, addr, type_)
            }
            #[inline]
            pub unsafe fn CreateValueFromData(
                &mut self,
                name: *const ::std::os::raw::c_char,
                data: root::lldb::SBData,
                type_: root::lldb::SBType,
            ) -> root::lldb::SBValue {
                SBTarget_CreateValueFromData(self, name, data, type_)
            }
            #[inline]
            pub unsafe fn CreateValueFromExpression(
                &mut self,
                name: *const ::std::os::raw::c_char,
                expr: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBTarget_CreateValueFromExpression(self, name, expr)
            }
            #[inline]
            pub unsafe fn GetSourceManager(&mut self) -> root::lldb::SBSourceManager {
                SBTarget_GetSourceManager(self)
            }
            #[inline]
            pub unsafe fn ReadInstructions(
                &mut self,
                base_addr: root::lldb::SBAddress,
                count: u32,
            ) -> root::lldb::SBInstructionList {
                SBTarget_ReadInstructions(self, base_addr, count)
            }
            #[inline]
            pub unsafe fn ReadInstructions1(
                &mut self,
                base_addr: root::lldb::SBAddress,
                count: u32,
                flavor_string: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBInstructionList {
                SBTarget_ReadInstructions1(self, base_addr, count, flavor_string)
            }
            #[inline]
            pub unsafe fn ReadInstructions2(
                &mut self,
                start_addr: root::lldb::SBAddress,
                end_addr: root::lldb::SBAddress,
                flavor_string: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBInstructionList {
                SBTarget_ReadInstructions2(self, start_addr, end_addr, flavor_string)
            }
            #[inline]
            pub unsafe fn GetInstructions(
                &mut self,
                base_addr: root::lldb::SBAddress,
                buf: *const ::std::os::raw::c_void,
                size: usize,
            ) -> root::lldb::SBInstructionList {
                SBTarget_GetInstructions(self, base_addr, buf, size)
            }
            #[inline]
            pub unsafe fn GetInstructionsWithFlavor(
                &mut self,
                base_addr: root::lldb::SBAddress,
                flavor_string: *const ::std::os::raw::c_char,
                buf: *const ::std::os::raw::c_void,
                size: usize,
            ) -> root::lldb::SBInstructionList {
                SBTarget_GetInstructionsWithFlavor(self, base_addr, flavor_string, buf, size)
            }
            #[inline]
            pub unsafe fn GetInstructions1(
                &mut self,
                base_addr: root::lldb::addr_t,
                buf: *const ::std::os::raw::c_void,
                size: usize,
            ) -> root::lldb::SBInstructionList {
                SBTarget_GetInstructions1(self, base_addr, buf, size)
            }
            #[inline]
            pub unsafe fn GetInstructionsWithFlavor1(
                &mut self,
                base_addr: root::lldb::addr_t,
                flavor_string: *const ::std::os::raw::c_char,
                buf: *const ::std::os::raw::c_void,
                size: usize,
            ) -> root::lldb::SBInstructionList {
                SBTarget_GetInstructionsWithFlavor1(self, base_addr, flavor_string, buf, size)
            }
            #[inline]
            pub unsafe fn FindSymbols(
                &mut self,
                name: *const ::std::os::raw::c_char,
                type_: root::lldb::SymbolType,
            ) -> root::lldb::SBSymbolContextList {
                SBTarget_FindSymbols(self, name, type_)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool {
                SBTarget_GetDescription(self, description, description_level)
            }
            #[inline]
            pub unsafe fn EvaluateExpression(
                &mut self,
                expr: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBTarget_EvaluateExpression(self, expr)
            }
            #[inline]
            pub unsafe fn EvaluateExpression1(
                &mut self,
                expr: *const ::std::os::raw::c_char,
                options: *const root::lldb::SBExpressionOptions,
            ) -> root::lldb::SBValue {
                SBTarget_EvaluateExpression1(self, expr, options)
            }
            #[inline]
            pub unsafe fn GetStackRedZoneSize(&mut self) -> root::lldb::addr_t {
                SBTarget_GetStackRedZoneSize(self)
            }
            #[inline]
            pub unsafe fn IsLoaded(&self, module: *const root::lldb::SBModule) -> bool {
                SBTarget_IsLoaded(self, module)
            }
            #[inline]
            pub unsafe fn GetLaunchInfo(&self) -> root::lldb::SBLaunchInfo {
                SBTarget_GetLaunchInfo(self)
            }
            #[inline]
            pub unsafe fn SetLaunchInfo(&mut self, launch_info: *const root::lldb::SBLaunchInfo) {
                SBTarget_SetLaunchInfo(self, launch_info)
            }
            #[inline]
            pub unsafe fn GetTrace(&mut self) -> root::lldb::SBTrace {
                SBTarget_GetTrace(self)
            }
            #[inline]
            pub unsafe fn CreateTrace(
                &mut self,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBTrace {
                SBTarget_CreateTrace(self, error)
            }
            #[inline]
            pub unsafe fn GetSP(&self) -> root::lldb::TargetSP {
                SBTarget_GetSP(self)
            }
            #[inline]
            pub unsafe fn SetSP(&mut self, target_sp: *const root::lldb::TargetSP) {
                SBTarget_SetSP(self, target_sp)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTarget_SBTarget(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBTarget) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTarget_SBTarget1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(target_sp: *const root::lldb::TargetSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTarget_SBTarget2(__bindgen_tmp.as_mut_ptr(), target_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBTarget_SBTarget_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBBlock {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBBlock9IsInlinedEv"]
            pub fn SBBlock_IsInlined(this: *const root::lldb::SBBlock) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBBlock7IsValidEv"]
            pub fn SBBlock_IsValid(this: *const root::lldb::SBBlock) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBBlock14GetInlinedNameEv"]
            pub fn SBBlock_GetInlinedName(
                this: *const root::lldb::SBBlock,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBBlock22GetInlinedCallSiteFileEv"]
            pub fn SBBlock_GetInlinedCallSiteFile(
                this: *const root::lldb::SBBlock,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBBlock22GetInlinedCallSiteLineEv"]
            pub fn SBBlock_GetInlinedCallSiteLine(this: *const root::lldb::SBBlock) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBBlock24GetInlinedCallSiteColumnEv"]
            pub fn SBBlock_GetInlinedCallSiteColumn(this: *const root::lldb::SBBlock) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlock9GetParentEv"]
            pub fn SBBlock_GetParent(this: *mut root::lldb::SBBlock) -> root::lldb::SBBlock;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlock10GetSiblingEv"]
            pub fn SBBlock_GetSibling(this: *mut root::lldb::SBBlock) -> root::lldb::SBBlock;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlock13GetFirstChildEv"]
            pub fn SBBlock_GetFirstChild(this: *mut root::lldb::SBBlock) -> root::lldb::SBBlock;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlock12GetNumRangesEv"]
            pub fn SBBlock_GetNumRanges(this: *mut root::lldb::SBBlock) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlock20GetRangeStartAddressEj"]
            pub fn SBBlock_GetRangeStartAddress(
                this: *mut root::lldb::SBBlock,
                idx: u32,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlock18GetRangeEndAddressEj"]
            pub fn SBBlock_GetRangeEndAddress(
                this: *mut root::lldb::SBBlock,
                idx: u32,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlock9GetRangesEv"]
            pub fn SBBlock_GetRanges(
                this: *mut root::lldb::SBBlock,
            ) -> root::lldb::SBAddressRangeList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlock28GetRangeIndexForBlockAddressENS_9SBAddressE"]
            pub fn SBBlock_GetRangeIndexForBlockAddress(
                this: *mut root::lldb::SBBlock,
                block_addr: root::lldb::SBAddress,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlock12GetVariablesERNS_7SBFrameEbbbNS_16DynamicValueTypeE"]
            pub fn SBBlock_GetVariables(
                this: *mut root::lldb::SBBlock,
                frame: *mut root::lldb::SBFrame,
                arguments: bool,
                locals: bool,
                statics: bool,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValueList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlock12GetVariablesERNS_8SBTargetEbbb"]
            pub fn SBBlock_GetVariables1(
                this: *mut root::lldb::SBBlock,
                target: *mut root::lldb::SBTarget,
                arguments: bool,
                locals: bool,
                statics: bool,
            ) -> root::lldb::SBValueList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlock25GetContainingInlinedBlockEv"]
            pub fn SBBlock_GetContainingInlinedBlock(
                this: *mut root::lldb::SBBlock,
            ) -> root::lldb::SBBlock;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlock14GetDescriptionERNS_8SBStreamE"]
            pub fn SBBlock_GetDescription(
                this: *mut root::lldb::SBBlock,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlockC1Ev"]
            pub fn SBBlock_SBBlock(this: *mut root::lldb::SBBlock);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlockC1ERKS0_"]
            pub fn SBBlock_SBBlock1(
                this: *mut root::lldb::SBBlock,
                rhs: *const root::lldb::SBBlock,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBBlockD1Ev"]
            pub fn SBBlock_SBBlock_destructor(this: *mut root::lldb::SBBlock);
        }
        impl SBBlock {
            #[inline]
            pub unsafe fn IsInlined(&self) -> bool {
                SBBlock_IsInlined(self)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBBlock_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetInlinedName(&self) -> *const ::std::os::raw::c_char {
                SBBlock_GetInlinedName(self)
            }
            #[inline]
            pub unsafe fn GetInlinedCallSiteFile(&self) -> root::lldb::SBFileSpec {
                SBBlock_GetInlinedCallSiteFile(self)
            }
            #[inline]
            pub unsafe fn GetInlinedCallSiteLine(&self) -> u32 {
                SBBlock_GetInlinedCallSiteLine(self)
            }
            #[inline]
            pub unsafe fn GetInlinedCallSiteColumn(&self) -> u32 {
                SBBlock_GetInlinedCallSiteColumn(self)
            }
            #[inline]
            pub unsafe fn GetParent(&mut self) -> root::lldb::SBBlock {
                SBBlock_GetParent(self)
            }
            #[inline]
            pub unsafe fn GetSibling(&mut self) -> root::lldb::SBBlock {
                SBBlock_GetSibling(self)
            }
            #[inline]
            pub unsafe fn GetFirstChild(&mut self) -> root::lldb::SBBlock {
                SBBlock_GetFirstChild(self)
            }
            #[inline]
            pub unsafe fn GetNumRanges(&mut self) -> u32 {
                SBBlock_GetNumRanges(self)
            }
            #[inline]
            pub unsafe fn GetRangeStartAddress(&mut self, idx: u32) -> root::lldb::SBAddress {
                SBBlock_GetRangeStartAddress(self, idx)
            }
            #[inline]
            pub unsafe fn GetRangeEndAddress(&mut self, idx: u32) -> root::lldb::SBAddress {
                SBBlock_GetRangeEndAddress(self, idx)
            }
            #[inline]
            pub unsafe fn GetRanges(&mut self) -> root::lldb::SBAddressRangeList {
                SBBlock_GetRanges(self)
            }
            #[inline]
            pub unsafe fn GetRangeIndexForBlockAddress(
                &mut self,
                block_addr: root::lldb::SBAddress,
            ) -> u32 {
                SBBlock_GetRangeIndexForBlockAddress(self, block_addr)
            }
            #[inline]
            pub unsafe fn GetVariables(
                &mut self,
                frame: *mut root::lldb::SBFrame,
                arguments: bool,
                locals: bool,
                statics: bool,
                use_dynamic: root::lldb::DynamicValueType,
            ) -> root::lldb::SBValueList {
                SBBlock_GetVariables(self, frame, arguments, locals, statics, use_dynamic)
            }
            #[inline]
            pub unsafe fn GetVariables1(
                &mut self,
                target: *mut root::lldb::SBTarget,
                arguments: bool,
                locals: bool,
                statics: bool,
            ) -> root::lldb::SBValueList {
                SBBlock_GetVariables1(self, target, arguments, locals, statics)
            }
            #[inline]
            pub unsafe fn GetContainingInlinedBlock(&mut self) -> root::lldb::SBBlock {
                SBBlock_GetContainingInlinedBlock(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBBlock_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBlock_SBBlock(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBBlock) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBlock_SBBlock1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBBlock_SBBlock_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBCompileUnit {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBCompileUnit7IsValidEv"]
            pub fn SBCompileUnit_IsValid(this: *const root::lldb::SBCompileUnit) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBCompileUnit11GetFileSpecEv"]
            pub fn SBCompileUnit_GetFileSpec(
                this: *const root::lldb::SBCompileUnit,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBCompileUnit17GetNumLineEntriesEv"]
            pub fn SBCompileUnit_GetNumLineEntries(this: *const root::lldb::SBCompileUnit) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBCompileUnit19GetLineEntryAtIndexEj"]
            pub fn SBCompileUnit_GetLineEntryAtIndex(
                this: *const root::lldb::SBCompileUnit,
                idx: u32,
            ) -> root::lldb::SBLineEntry;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBCompileUnit18FindLineEntryIndexERNS_11SBLineEntryEb"]
            pub fn SBCompileUnit_FindLineEntryIndex(
                this: *const root::lldb::SBCompileUnit,
                line_entry: *mut root::lldb::SBLineEntry,
                exact: bool,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBCompileUnit18FindLineEntryIndexEjjPNS_10SBFileSpecE"]
            pub fn SBCompileUnit_FindLineEntryIndex1(
                this: *const root::lldb::SBCompileUnit,
                start_idx: u32,
                line: u32,
                inline_file_spec: *mut root::lldb::SBFileSpec,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBCompileUnit18FindLineEntryIndexEjjPNS_10SBFileSpecEb"]
            pub fn SBCompileUnit_FindLineEntryIndex2(
                this: *const root::lldb::SBCompileUnit,
                start_idx: u32,
                line: u32,
                inline_file_spec: *mut root::lldb::SBFileSpec,
                exact: bool,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBCompileUnit21GetSupportFileAtIndexEj"]
            pub fn SBCompileUnit_GetSupportFileAtIndex(
                this: *const root::lldb::SBCompileUnit,
                idx: u32,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBCompileUnit18GetNumSupportFilesEv"]
            pub fn SBCompileUnit_GetNumSupportFiles(this: *const root::lldb::SBCompileUnit) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBCompileUnit20FindSupportFileIndexEjRKNS_10SBFileSpecEb"]
            pub fn SBCompileUnit_FindSupportFileIndex(
                this: *mut root::lldb::SBCompileUnit,
                start_idx: u32,
                sb_file: *const root::lldb::SBFileSpec,
                full: bool,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBCompileUnit8GetTypesEj"]
            pub fn SBCompileUnit_GetTypes(
                this: *mut root::lldb::SBCompileUnit,
                type_mask: u32,
            ) -> root::lldb::SBTypeList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBCompileUnit11GetLanguageEv"]
            pub fn SBCompileUnit_GetLanguage(
                this: *mut root::lldb::SBCompileUnit,
            ) -> root::lldb::LanguageType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBCompileUnit14GetDescriptionERNS_8SBStreamE"]
            pub fn SBCompileUnit_GetDescription(
                this: *mut root::lldb::SBCompileUnit,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBCompileUnitC1Ev"]
            pub fn SBCompileUnit_SBCompileUnit(this: *mut root::lldb::SBCompileUnit);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBCompileUnitC1ERKS0_"]
            pub fn SBCompileUnit_SBCompileUnit1(
                this: *mut root::lldb::SBCompileUnit,
                rhs: *const root::lldb::SBCompileUnit,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBCompileUnitD1Ev"]
            pub fn SBCompileUnit_SBCompileUnit_destructor(this: *mut root::lldb::SBCompileUnit);
        }
        impl SBCompileUnit {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBCompileUnit_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetFileSpec(&self) -> root::lldb::SBFileSpec {
                SBCompileUnit_GetFileSpec(self)
            }
            #[inline]
            pub unsafe fn GetNumLineEntries(&self) -> u32 {
                SBCompileUnit_GetNumLineEntries(self)
            }
            #[inline]
            pub unsafe fn GetLineEntryAtIndex(&self, idx: u32) -> root::lldb::SBLineEntry {
                SBCompileUnit_GetLineEntryAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn FindLineEntryIndex(
                &self,
                line_entry: *mut root::lldb::SBLineEntry,
                exact: bool,
            ) -> u32 {
                SBCompileUnit_FindLineEntryIndex(self, line_entry, exact)
            }
            #[inline]
            pub unsafe fn FindLineEntryIndex1(
                &self,
                start_idx: u32,
                line: u32,
                inline_file_spec: *mut root::lldb::SBFileSpec,
            ) -> u32 {
                SBCompileUnit_FindLineEntryIndex1(self, start_idx, line, inline_file_spec)
            }
            #[inline]
            pub unsafe fn FindLineEntryIndex2(
                &self,
                start_idx: u32,
                line: u32,
                inline_file_spec: *mut root::lldb::SBFileSpec,
                exact: bool,
            ) -> u32 {
                SBCompileUnit_FindLineEntryIndex2(self, start_idx, line, inline_file_spec, exact)
            }
            #[inline]
            pub unsafe fn GetSupportFileAtIndex(&self, idx: u32) -> root::lldb::SBFileSpec {
                SBCompileUnit_GetSupportFileAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetNumSupportFiles(&self) -> u32 {
                SBCompileUnit_GetNumSupportFiles(self)
            }
            #[inline]
            pub unsafe fn FindSupportFileIndex(
                &mut self,
                start_idx: u32,
                sb_file: *const root::lldb::SBFileSpec,
                full: bool,
            ) -> u32 {
                SBCompileUnit_FindSupportFileIndex(self, start_idx, sb_file, full)
            }
            #[inline]
            pub unsafe fn GetTypes(&mut self, type_mask: u32) -> root::lldb::SBTypeList {
                SBCompileUnit_GetTypes(self, type_mask)
            }
            #[inline]
            pub unsafe fn GetLanguage(&mut self) -> root::lldb::LanguageType {
                SBCompileUnit_GetLanguage(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBCompileUnit_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCompileUnit_SBCompileUnit(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBCompileUnit) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCompileUnit_SBCompileUnit1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBCompileUnit_SBCompileUnit_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBInstructionList {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb17SBInstructionList7IsValidEv"]
            pub fn SBInstructionList_IsValid(this: *const root::lldb::SBInstructionList) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionList7GetSizeEv"]
            pub fn SBInstructionList_GetSize(this: *mut root::lldb::SBInstructionList) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionList21GetInstructionAtIndexEj"]
            pub fn SBInstructionList_GetInstructionAtIndex(
                this: *mut root::lldb::SBInstructionList,
                idx: u32,
            ) -> root::lldb::SBInstruction;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionList20GetInstructionsCountERKNS_9SBAddressES3_b"]
            pub fn SBInstructionList_GetInstructionsCount(
                this: *mut root::lldb::SBInstructionList,
                start: *const root::lldb::SBAddress,
                end: *const root::lldb::SBAddress,
                canSetBreakpoint: bool,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionList5ClearEv"]
            pub fn SBInstructionList_Clear(this: *mut root::lldb::SBInstructionList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionList17AppendInstructionENS_13SBInstructionE"]
            pub fn SBInstructionList_AppendInstruction(
                this: *mut root::lldb::SBInstructionList,
                inst: root::lldb::SBInstruction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionList5PrintEP8_IO_FILE"]
            pub fn SBInstructionList_Print(
                this: *mut root::lldb::SBInstructionList,
                out: *mut root::FILE,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionList5PrintENS_6SBFileE"]
            pub fn SBInstructionList_Print1(
                this: *mut root::lldb::SBInstructionList,
                out: root::lldb::SBFile,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionList5PrintESt10shared_ptrIN12lldb_private4FileEE"]
            pub fn SBInstructionList_Print2(
                this: *mut root::lldb::SBInstructionList,
                BORROWED: root::lldb::FileSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionList14GetDescriptionERNS_8SBStreamE"]
            pub fn SBInstructionList_GetDescription(
                this: *mut root::lldb::SBInstructionList,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionList31DumpEmulationForAllInstructionsEPKc"]
            pub fn SBInstructionList_DumpEmulationForAllInstructions(
                this: *mut root::lldb::SBInstructionList,
                triple: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionList15SetDisassemblerERKSt10shared_ptrIN12lldb_private12DisassemblerEE"]
            pub fn SBInstructionList_SetDisassembler(
                this: *mut root::lldb::SBInstructionList,
                opaque_sp: *const root::lldb::DisassemblerSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionList14GetDescriptionERN12lldb_private6StreamE"]
            pub fn SBInstructionList_GetDescription1(
                this: *mut root::lldb::SBInstructionList,
                description: *mut root::lldb_private::Stream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionListC1Ev"]
            pub fn SBInstructionList_SBInstructionList(this: *mut root::lldb::SBInstructionList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionListC1ERKS0_"]
            pub fn SBInstructionList_SBInstructionList1(
                this: *mut root::lldb::SBInstructionList,
                rhs: *const root::lldb::SBInstructionList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBInstructionListD1Ev"]
            pub fn SBInstructionList_SBInstructionList_destructor(
                this: *mut root::lldb::SBInstructionList,
            );
        }
        impl SBInstructionList {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBInstructionList_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetSize(&mut self) -> usize {
                SBInstructionList_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetInstructionAtIndex(&mut self, idx: u32) -> root::lldb::SBInstruction {
                SBInstructionList_GetInstructionAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetInstructionsCount(
                &mut self,
                start: *const root::lldb::SBAddress,
                end: *const root::lldb::SBAddress,
                canSetBreakpoint: bool,
            ) -> usize {
                SBInstructionList_GetInstructionsCount(self, start, end, canSetBreakpoint)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBInstructionList_Clear(self)
            }
            #[inline]
            pub unsafe fn AppendInstruction(&mut self, inst: root::lldb::SBInstruction) {
                SBInstructionList_AppendInstruction(self, inst)
            }
            #[inline]
            pub unsafe fn Print(&mut self, out: *mut root::FILE) {
                SBInstructionList_Print(self, out)
            }
            #[inline]
            pub unsafe fn Print1(&mut self, out: root::lldb::SBFile) {
                SBInstructionList_Print1(self, out)
            }
            #[inline]
            pub unsafe fn Print2(&mut self, BORROWED: root::lldb::FileSP) {
                SBInstructionList_Print2(self, BORROWED)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBInstructionList_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn DumpEmulationForAllInstructions(
                &mut self,
                triple: *const ::std::os::raw::c_char,
            ) -> bool {
                SBInstructionList_DumpEmulationForAllInstructions(self, triple)
            }
            #[inline]
            pub unsafe fn SetDisassembler(&mut self, opaque_sp: *const root::lldb::DisassemblerSP) {
                SBInstructionList_SetDisassembler(self, opaque_sp)
            }
            #[inline]
            pub unsafe fn GetDescription1(
                &mut self,
                description: *mut root::lldb_private::Stream,
            ) -> bool {
                SBInstructionList_GetDescription1(self, description)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBInstructionList_SBInstructionList(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBInstructionList) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBInstructionList_SBInstructionList1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBInstructionList_SBInstructionList_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBFunction {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBFunction7IsValidEv"]
            pub fn SBFunction_IsValid(this: *const root::lldb::SBFunction) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBFunction7GetNameEv"]
            pub fn SBFunction_GetName(
                this: *const root::lldb::SBFunction,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBFunction14GetDisplayNameEv"]
            pub fn SBFunction_GetDisplayName(
                this: *const root::lldb::SBFunction,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBFunction14GetMangledNameEv"]
            pub fn SBFunction_GetMangledName(
                this: *const root::lldb::SBFunction,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunction15GetInstructionsENS_8SBTargetE"]
            pub fn SBFunction_GetInstructions(
                this: *mut root::lldb::SBFunction,
                target: root::lldb::SBTarget,
            ) -> root::lldb::SBInstructionList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunction15GetInstructionsENS_8SBTargetEPKc"]
            pub fn SBFunction_GetInstructions1(
                this: *mut root::lldb::SBFunction,
                target: root::lldb::SBTarget,
                flavor: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBInstructionList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunction15GetStartAddressEv"]
            pub fn SBFunction_GetStartAddress(
                this: *mut root::lldb::SBFunction,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunction13GetEndAddressEv"]
            pub fn SBFunction_GetEndAddress(
                this: *mut root::lldb::SBFunction,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunction9GetRangesEv"]
            pub fn SBFunction_GetRanges(
                this: *mut root::lldb::SBFunction,
            ) -> root::lldb::SBAddressRangeList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunction15GetArgumentNameEj"]
            pub fn SBFunction_GetArgumentName(
                this: *mut root::lldb::SBFunction,
                arg_idx: u32,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunction19GetPrologueByteSizeEv"]
            pub fn SBFunction_GetPrologueByteSize(this: *mut root::lldb::SBFunction) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunction7GetTypeEv"]
            pub fn SBFunction_GetType(this: *mut root::lldb::SBFunction) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunction8GetBlockEv"]
            pub fn SBFunction_GetBlock(this: *mut root::lldb::SBFunction) -> root::lldb::SBBlock;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunction11GetLanguageEv"]
            pub fn SBFunction_GetLanguage(
                this: *mut root::lldb::SBFunction,
            ) -> root::lldb::LanguageType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunction14GetIsOptimizedEv"]
            pub fn SBFunction_GetIsOptimized(this: *mut root::lldb::SBFunction) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunction14GetDescriptionERNS_8SBStreamE"]
            pub fn SBFunction_GetDescription(
                this: *mut root::lldb::SBFunction,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunction3getEv"]
            pub fn SBFunction_get(
                this: *mut root::lldb::SBFunction,
            ) -> *mut root::lldb_private::Function;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunction5resetEPN12lldb_private8FunctionE"]
            pub fn SBFunction_reset(
                this: *mut root::lldb::SBFunction,
                lldb_object_ptr: *mut root::lldb_private::Function,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunctionC1Ev"]
            pub fn SBFunction_SBFunction(this: *mut root::lldb::SBFunction);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunctionC1ERKS0_"]
            pub fn SBFunction_SBFunction1(
                this: *mut root::lldb::SBFunction,
                rhs: *const root::lldb::SBFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBFunctionD1Ev"]
            pub fn SBFunction_SBFunction_destructor(this: *mut root::lldb::SBFunction);
        }
        impl SBFunction {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBFunction_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetName(&self) -> *const ::std::os::raw::c_char {
                SBFunction_GetName(self)
            }
            #[inline]
            pub unsafe fn GetDisplayName(&self) -> *const ::std::os::raw::c_char {
                SBFunction_GetDisplayName(self)
            }
            #[inline]
            pub unsafe fn GetMangledName(&self) -> *const ::std::os::raw::c_char {
                SBFunction_GetMangledName(self)
            }
            #[inline]
            pub unsafe fn GetInstructions(
                &mut self,
                target: root::lldb::SBTarget,
            ) -> root::lldb::SBInstructionList {
                SBFunction_GetInstructions(self, target)
            }
            #[inline]
            pub unsafe fn GetInstructions1(
                &mut self,
                target: root::lldb::SBTarget,
                flavor: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBInstructionList {
                SBFunction_GetInstructions1(self, target, flavor)
            }
            #[inline]
            pub unsafe fn GetStartAddress(&mut self) -> root::lldb::SBAddress {
                SBFunction_GetStartAddress(self)
            }
            #[inline]
            pub unsafe fn GetEndAddress(&mut self) -> root::lldb::SBAddress {
                SBFunction_GetEndAddress(self)
            }
            #[inline]
            pub unsafe fn GetRanges(&mut self) -> root::lldb::SBAddressRangeList {
                SBFunction_GetRanges(self)
            }
            #[inline]
            pub unsafe fn GetArgumentName(
                &mut self,
                arg_idx: u32,
            ) -> *const ::std::os::raw::c_char {
                SBFunction_GetArgumentName(self, arg_idx)
            }
            #[inline]
            pub unsafe fn GetPrologueByteSize(&mut self) -> u32 {
                SBFunction_GetPrologueByteSize(self)
            }
            #[inline]
            pub unsafe fn GetType(&mut self) -> root::lldb::SBType {
                SBFunction_GetType(self)
            }
            #[inline]
            pub unsafe fn GetBlock(&mut self) -> root::lldb::SBBlock {
                SBFunction_GetBlock(self)
            }
            #[inline]
            pub unsafe fn GetLanguage(&mut self) -> root::lldb::LanguageType {
                SBFunction_GetLanguage(self)
            }
            #[inline]
            pub unsafe fn GetIsOptimized(&mut self) -> bool {
                SBFunction_GetIsOptimized(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBFunction_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn get(&mut self) -> *mut root::lldb_private::Function {
                SBFunction_get(self)
            }
            #[inline]
            pub unsafe fn reset(&mut self, lldb_object_ptr: *mut root::lldb_private::Function) {
                SBFunction_reset(self, lldb_object_ptr)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFunction_SBFunction(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBFunction) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFunction_SBFunction1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBFunction_SBFunction_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBLineEntry {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb11SBLineEntry15GetStartAddressEv"]
            pub fn SBLineEntry_GetStartAddress(
                this: *const root::lldb::SBLineEntry,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb11SBLineEntry13GetEndAddressEv"]
            pub fn SBLineEntry_GetEndAddress(
                this: *const root::lldb::SBLineEntry,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb11SBLineEntry36GetSameLineContiguousAddressRangeEndEb"]
            pub fn SBLineEntry_GetSameLineContiguousAddressRangeEnd(
                this: *const root::lldb::SBLineEntry,
                include_inlined_functions: bool,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb11SBLineEntry7IsValidEv"]
            pub fn SBLineEntry_IsValid(this: *const root::lldb::SBLineEntry) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb11SBLineEntry11GetFileSpecEv"]
            pub fn SBLineEntry_GetFileSpec(
                this: *const root::lldb::SBLineEntry,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb11SBLineEntry7GetLineEv"]
            pub fn SBLineEntry_GetLine(this: *const root::lldb::SBLineEntry) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb11SBLineEntry9GetColumnEv"]
            pub fn SBLineEntry_GetColumn(this: *const root::lldb::SBLineEntry) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBLineEntry11SetFileSpecENS_10SBFileSpecE"]
            pub fn SBLineEntry_SetFileSpec(
                this: *mut root::lldb::SBLineEntry,
                filespec: root::lldb::SBFileSpec,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBLineEntry7SetLineEj"]
            pub fn SBLineEntry_SetLine(this: *mut root::lldb::SBLineEntry, line: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBLineEntry9SetColumnEj"]
            pub fn SBLineEntry_SetColumn(this: *mut root::lldb::SBLineEntry, column: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBLineEntry14GetDescriptionERNS_8SBStreamE"]
            pub fn SBLineEntry_GetDescription(
                this: *mut root::lldb::SBLineEntry,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBLineEntry3getEv"]
            pub fn SBLineEntry_get(
                this: *mut root::lldb::SBLineEntry,
            ) -> *mut root::lldb_private::LineEntry;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBLineEntryC1Ev"]
            pub fn SBLineEntry_SBLineEntry(this: *mut root::lldb::SBLineEntry);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBLineEntryC1ERKS0_"]
            pub fn SBLineEntry_SBLineEntry1(
                this: *mut root::lldb::SBLineEntry,
                rhs: *const root::lldb::SBLineEntry,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBLineEntryD1Ev"]
            pub fn SBLineEntry_SBLineEntry_destructor(this: *mut root::lldb::SBLineEntry);
        }
        impl SBLineEntry {
            #[inline]
            pub unsafe fn GetStartAddress(&self) -> root::lldb::SBAddress {
                SBLineEntry_GetStartAddress(self)
            }
            #[inline]
            pub unsafe fn GetEndAddress(&self) -> root::lldb::SBAddress {
                SBLineEntry_GetEndAddress(self)
            }
            #[inline]
            pub unsafe fn GetSameLineContiguousAddressRangeEnd(
                &self,
                include_inlined_functions: bool,
            ) -> root::lldb::SBAddress {
                SBLineEntry_GetSameLineContiguousAddressRangeEnd(self, include_inlined_functions)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBLineEntry_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetFileSpec(&self) -> root::lldb::SBFileSpec {
                SBLineEntry_GetFileSpec(self)
            }
            #[inline]
            pub unsafe fn GetLine(&self) -> u32 {
                SBLineEntry_GetLine(self)
            }
            #[inline]
            pub unsafe fn GetColumn(&self) -> u32 {
                SBLineEntry_GetColumn(self)
            }
            #[inline]
            pub unsafe fn SetFileSpec(&mut self, filespec: root::lldb::SBFileSpec) {
                SBLineEntry_SetFileSpec(self, filespec)
            }
            #[inline]
            pub unsafe fn SetLine(&mut self, line: u32) {
                SBLineEntry_SetLine(self, line)
            }
            #[inline]
            pub unsafe fn SetColumn(&mut self, column: u32) {
                SBLineEntry_SetColumn(self, column)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBLineEntry_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn get(&mut self) -> *mut root::lldb_private::LineEntry {
                SBLineEntry_get(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBLineEntry_SBLineEntry(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBLineEntry) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBLineEntry_SBLineEntry1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBLineEntry_SBLineEntry_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBSymbol {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBSymbol7IsValidEv"]
            pub fn SBSymbol_IsValid(this: *const root::lldb::SBSymbol) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBSymbol7GetNameEv"]
            pub fn SBSymbol_GetName(
                this: *const root::lldb::SBSymbol,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBSymbol14GetDisplayNameEv"]
            pub fn SBSymbol_GetDisplayName(
                this: *const root::lldb::SBSymbol,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBSymbol14GetMangledNameEv"]
            pub fn SBSymbol_GetMangledName(
                this: *const root::lldb::SBSymbol,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbol15GetInstructionsENS_8SBTargetE"]
            pub fn SBSymbol_GetInstructions(
                this: *mut root::lldb::SBSymbol,
                target: root::lldb::SBTarget,
            ) -> root::lldb::SBInstructionList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbol15GetInstructionsENS_8SBTargetEPKc"]
            pub fn SBSymbol_GetInstructions1(
                this: *mut root::lldb::SBSymbol,
                target: root::lldb::SBTarget,
                flavor_string: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBInstructionList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbol15GetStartAddressEv"]
            pub fn SBSymbol_GetStartAddress(
                this: *mut root::lldb::SBSymbol,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbol13GetEndAddressEv"]
            pub fn SBSymbol_GetEndAddress(this: *mut root::lldb::SBSymbol)
                -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbol8GetValueEv"]
            pub fn SBSymbol_GetValue(this: *mut root::lldb::SBSymbol) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbol7GetSizeEv"]
            pub fn SBSymbol_GetSize(this: *mut root::lldb::SBSymbol) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbol19GetPrologueByteSizeEv"]
            pub fn SBSymbol_GetPrologueByteSize(this: *mut root::lldb::SBSymbol) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbol7GetTypeEv"]
            pub fn SBSymbol_GetType(this: *mut root::lldb::SBSymbol) -> root::lldb::SymbolType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbol14GetDescriptionERNS_8SBStreamE"]
            pub fn SBSymbol_GetDescription(
                this: *mut root::lldb::SBSymbol,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbol10IsExternalEv"]
            pub fn SBSymbol_IsExternal(this: *mut root::lldb::SBSymbol) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbol11IsSyntheticEv"]
            pub fn SBSymbol_IsSynthetic(this: *mut root::lldb::SBSymbol) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbol3getEv"]
            pub fn SBSymbol_get(this: *mut root::lldb::SBSymbol)
                -> *mut root::lldb_private::Symbol;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbol5resetEPN12lldb_private6SymbolE"]
            pub fn SBSymbol_reset(
                this: *mut root::lldb::SBSymbol,
                arg1: *mut root::lldb_private::Symbol,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbolC1Ev"]
            pub fn SBSymbol_SBSymbol(this: *mut root::lldb::SBSymbol);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbolC1ERKS0_"]
            pub fn SBSymbol_SBSymbol1(
                this: *mut root::lldb::SBSymbol,
                rhs: *const root::lldb::SBSymbol,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBSymbolD1Ev"]
            pub fn SBSymbol_SBSymbol_destructor(this: *mut root::lldb::SBSymbol);
        }
        impl SBSymbol {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBSymbol_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetName(&self) -> *const ::std::os::raw::c_char {
                SBSymbol_GetName(self)
            }
            #[inline]
            pub unsafe fn GetDisplayName(&self) -> *const ::std::os::raw::c_char {
                SBSymbol_GetDisplayName(self)
            }
            #[inline]
            pub unsafe fn GetMangledName(&self) -> *const ::std::os::raw::c_char {
                SBSymbol_GetMangledName(self)
            }
            #[inline]
            pub unsafe fn GetInstructions(
                &mut self,
                target: root::lldb::SBTarget,
            ) -> root::lldb::SBInstructionList {
                SBSymbol_GetInstructions(self, target)
            }
            #[inline]
            pub unsafe fn GetInstructions1(
                &mut self,
                target: root::lldb::SBTarget,
                flavor_string: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBInstructionList {
                SBSymbol_GetInstructions1(self, target, flavor_string)
            }
            #[inline]
            pub unsafe fn GetStartAddress(&mut self) -> root::lldb::SBAddress {
                SBSymbol_GetStartAddress(self)
            }
            #[inline]
            pub unsafe fn GetEndAddress(&mut self) -> root::lldb::SBAddress {
                SBSymbol_GetEndAddress(self)
            }
            #[inline]
            pub unsafe fn GetValue(&mut self) -> u64 {
                SBSymbol_GetValue(self)
            }
            #[inline]
            pub unsafe fn GetSize(&mut self) -> u64 {
                SBSymbol_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetPrologueByteSize(&mut self) -> u32 {
                SBSymbol_GetPrologueByteSize(self)
            }
            #[inline]
            pub unsafe fn GetType(&mut self) -> root::lldb::SymbolType {
                SBSymbol_GetType(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBSymbol_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn IsExternal(&mut self) -> bool {
                SBSymbol_IsExternal(self)
            }
            #[inline]
            pub unsafe fn IsSynthetic(&mut self) -> bool {
                SBSymbol_IsSynthetic(self)
            }
            #[inline]
            pub unsafe fn get(&mut self) -> *mut root::lldb_private::Symbol {
                SBSymbol_get(self)
            }
            #[inline]
            pub unsafe fn reset(&mut self, arg1: *mut root::lldb_private::Symbol) {
                SBSymbol_reset(self, arg1)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBSymbol_SBSymbol(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBSymbol) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBSymbol_SBSymbol1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBSymbol_SBSymbol_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBSymbolContext {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb15SBSymbolContext7IsValidEv"]
            pub fn SBSymbolContext_IsValid(this: *const root::lldb::SBSymbolContext) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContext9GetModuleEv"]
            pub fn SBSymbolContext_GetModule(
                this: *mut root::lldb::SBSymbolContext,
            ) -> root::lldb::SBModule;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContext14GetCompileUnitEv"]
            pub fn SBSymbolContext_GetCompileUnit(
                this: *mut root::lldb::SBSymbolContext,
            ) -> root::lldb::SBCompileUnit;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContext11GetFunctionEv"]
            pub fn SBSymbolContext_GetFunction(
                this: *mut root::lldb::SBSymbolContext,
            ) -> root::lldb::SBFunction;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContext8GetBlockEv"]
            pub fn SBSymbolContext_GetBlock(
                this: *mut root::lldb::SBSymbolContext,
            ) -> root::lldb::SBBlock;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContext12GetLineEntryEv"]
            pub fn SBSymbolContext_GetLineEntry(
                this: *mut root::lldb::SBSymbolContext,
            ) -> root::lldb::SBLineEntry;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContext9GetSymbolEv"]
            pub fn SBSymbolContext_GetSymbol(
                this: *mut root::lldb::SBSymbolContext,
            ) -> root::lldb::SBSymbol;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContext9SetModuleENS_8SBModuleE"]
            pub fn SBSymbolContext_SetModule(
                this: *mut root::lldb::SBSymbolContext,
                module: root::lldb::SBModule,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContext14SetCompileUnitENS_13SBCompileUnitE"]
            pub fn SBSymbolContext_SetCompileUnit(
                this: *mut root::lldb::SBSymbolContext,
                compile_unit: root::lldb::SBCompileUnit,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContext11SetFunctionENS_10SBFunctionE"]
            pub fn SBSymbolContext_SetFunction(
                this: *mut root::lldb::SBSymbolContext,
                function: root::lldb::SBFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContext8SetBlockENS_7SBBlockE"]
            pub fn SBSymbolContext_SetBlock(
                this: *mut root::lldb::SBSymbolContext,
                block: root::lldb::SBBlock,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContext12SetLineEntryENS_11SBLineEntryE"]
            pub fn SBSymbolContext_SetLineEntry(
                this: *mut root::lldb::SBSymbolContext,
                line_entry: root::lldb::SBLineEntry,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContext9SetSymbolENS_8SBSymbolE"]
            pub fn SBSymbolContext_SetSymbol(
                this: *mut root::lldb::SBSymbolContext,
                symbol: root::lldb::SBSymbol,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb15SBSymbolContext23GetParentOfInlinedScopeERKNS_9SBAddressERS1_"]
            pub fn SBSymbolContext_GetParentOfInlinedScope(
                this: *const root::lldb::SBSymbolContext,
                curr_frame_pc: *const root::lldb::SBAddress,
                parent_frame_addr: *mut root::lldb::SBAddress,
            ) -> root::lldb::SBSymbolContext;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContext14GetDescriptionERNS_8SBStreamE"]
            pub fn SBSymbolContext_GetDescription(
                this: *mut root::lldb::SBSymbolContext,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContext3refEv"]
            pub fn SBSymbolContext_ref(
                this: *mut root::lldb::SBSymbolContext,
            ) -> *mut root::lldb_private::SymbolContext;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb15SBSymbolContext3getEv"]
            pub fn SBSymbolContext_get(
                this: *const root::lldb::SBSymbolContext,
            ) -> *mut root::lldb_private::SymbolContext;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContextC1Ev"]
            pub fn SBSymbolContext_SBSymbolContext(this: *mut root::lldb::SBSymbolContext);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContextC1ERKS0_"]
            pub fn SBSymbolContext_SBSymbolContext1(
                this: *mut root::lldb::SBSymbolContext,
                rhs: *const root::lldb::SBSymbolContext,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContextC1ERKN12lldb_private13SymbolContextE"]
            pub fn SBSymbolContext_SBSymbolContext2(
                this: *mut root::lldb::SBSymbolContext,
                sc_ptr: *const root::lldb_private::SymbolContext,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSymbolContextD1Ev"]
            pub fn SBSymbolContext_SBSymbolContext_destructor(
                this: *mut root::lldb::SBSymbolContext,
            );
        }
        impl SBSymbolContext {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBSymbolContext_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetModule(&mut self) -> root::lldb::SBModule {
                SBSymbolContext_GetModule(self)
            }
            #[inline]
            pub unsafe fn GetCompileUnit(&mut self) -> root::lldb::SBCompileUnit {
                SBSymbolContext_GetCompileUnit(self)
            }
            #[inline]
            pub unsafe fn GetFunction(&mut self) -> root::lldb::SBFunction {
                SBSymbolContext_GetFunction(self)
            }
            #[inline]
            pub unsafe fn GetBlock(&mut self) -> root::lldb::SBBlock {
                SBSymbolContext_GetBlock(self)
            }
            #[inline]
            pub unsafe fn GetLineEntry(&mut self) -> root::lldb::SBLineEntry {
                SBSymbolContext_GetLineEntry(self)
            }
            #[inline]
            pub unsafe fn GetSymbol(&mut self) -> root::lldb::SBSymbol {
                SBSymbolContext_GetSymbol(self)
            }
            #[inline]
            pub unsafe fn SetModule(&mut self, module: root::lldb::SBModule) {
                SBSymbolContext_SetModule(self, module)
            }
            #[inline]
            pub unsafe fn SetCompileUnit(&mut self, compile_unit: root::lldb::SBCompileUnit) {
                SBSymbolContext_SetCompileUnit(self, compile_unit)
            }
            #[inline]
            pub unsafe fn SetFunction(&mut self, function: root::lldb::SBFunction) {
                SBSymbolContext_SetFunction(self, function)
            }
            #[inline]
            pub unsafe fn SetBlock(&mut self, block: root::lldb::SBBlock) {
                SBSymbolContext_SetBlock(self, block)
            }
            #[inline]
            pub unsafe fn SetLineEntry(&mut self, line_entry: root::lldb::SBLineEntry) {
                SBSymbolContext_SetLineEntry(self, line_entry)
            }
            #[inline]
            pub unsafe fn SetSymbol(&mut self, symbol: root::lldb::SBSymbol) {
                SBSymbolContext_SetSymbol(self, symbol)
            }
            #[inline]
            pub unsafe fn GetParentOfInlinedScope(
                &self,
                curr_frame_pc: *const root::lldb::SBAddress,
                parent_frame_addr: *mut root::lldb::SBAddress,
            ) -> root::lldb::SBSymbolContext {
                SBSymbolContext_GetParentOfInlinedScope(self, curr_frame_pc, parent_frame_addr)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBSymbolContext_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn ref_(&mut self) -> *mut root::lldb_private::SymbolContext {
                SBSymbolContext_ref(self)
            }
            #[inline]
            pub unsafe fn get(&self) -> *mut root::lldb_private::SymbolContext {
                SBSymbolContext_get(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBSymbolContext_SBSymbolContext(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBSymbolContext) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBSymbolContext_SBSymbolContext1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(sc_ptr: *const root::lldb_private::SymbolContext) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBSymbolContext_SBSymbolContext2(__bindgen_tmp.as_mut_ptr(), sc_ptr);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBSymbolContext_SBSymbolContext_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBModule {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBModule7IsValidEv"]
            pub fn SBModule_IsValid(this: *const root::lldb::SBModule) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule5ClearEv"]
            pub fn SBModule_Clear(this: *mut root::lldb::SBModule);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBModule12IsFileBackedEv"]
            pub fn SBModule_IsFileBacked(this: *const root::lldb::SBModule) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBModule11GetFileSpecEv"]
            pub fn SBModule_GetFileSpec(
                this: *const root::lldb::SBModule,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBModule19GetPlatformFileSpecEv"]
            pub fn SBModule_GetPlatformFileSpec(
                this: *const root::lldb::SBModule,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule19SetPlatformFileSpecERKNS_10SBFileSpecE"]
            pub fn SBModule_SetPlatformFileSpec(
                this: *mut root::lldb::SBModule,
                platform_file: *const root::lldb::SBFileSpec,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule24GetRemoteInstallFileSpecEv"]
            pub fn SBModule_GetRemoteInstallFileSpec(
                this: *mut root::lldb::SBModule,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule24SetRemoteInstallFileSpecERNS_10SBFileSpecE"]
            pub fn SBModule_SetRemoteInstallFileSpec(
                this: *mut root::lldb::SBModule,
                file: *mut root::lldb::SBFileSpec,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule12GetByteOrderEv"]
            pub fn SBModule_GetByteOrder(this: *mut root::lldb::SBModule) -> root::lldb::ByteOrder;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule18GetAddressByteSizeEv"]
            pub fn SBModule_GetAddressByteSize(this: *mut root::lldb::SBModule) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule9GetTripleEv"]
            pub fn SBModule_GetTriple(
                this: *mut root::lldb::SBModule,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBModule12GetUUIDBytesEv"]
            pub fn SBModule_GetUUIDBytes(this: *const root::lldb::SBModule) -> *const u8;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBModule13GetUUIDStringEv"]
            pub fn SBModule_GetUUIDString(
                this: *const root::lldb::SBModule,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule11FindSectionEPKc"]
            pub fn SBModule_FindSection(
                this: *mut root::lldb::SBModule,
                sect_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBSection;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule18ResolveFileAddressEm"]
            pub fn SBModule_ResolveFileAddress(
                this: *mut root::lldb::SBModule,
                vm_addr: root::lldb::addr_t,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule30ResolveSymbolContextForAddressERKNS_9SBAddressEj"]
            pub fn SBModule_ResolveSymbolContextForAddress(
                this: *mut root::lldb::SBModule,
                addr: *const root::lldb::SBAddress,
                resolve_scope: u32,
            ) -> root::lldb::SBSymbolContext;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule14GetDescriptionERNS_8SBStreamE"]
            pub fn SBModule_GetDescription(
                this: *mut root::lldb::SBModule,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule18GetNumCompileUnitsEv"]
            pub fn SBModule_GetNumCompileUnits(this: *mut root::lldb::SBModule) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule21GetCompileUnitAtIndexEj"]
            pub fn SBModule_GetCompileUnitAtIndex(
                this: *mut root::lldb::SBModule,
                arg1: u32,
            ) -> root::lldb::SBCompileUnit;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule16FindCompileUnitsERKNS_10SBFileSpecE"]
            pub fn SBModule_FindCompileUnits(
                this: *mut root::lldb::SBModule,
                sb_file_spec: *const root::lldb::SBFileSpec,
            ) -> root::lldb::SBSymbolContextList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule13GetNumSymbolsEv"]
            pub fn SBModule_GetNumSymbols(this: *mut root::lldb::SBModule) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule16GetSymbolAtIndexEm"]
            pub fn SBModule_GetSymbolAtIndex(
                this: *mut root::lldb::SBModule,
                idx: usize,
            ) -> root::lldb::SBSymbol;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule10FindSymbolEPKcNS_10SymbolTypeE"]
            pub fn SBModule_FindSymbol(
                this: *mut root::lldb::SBModule,
                name: *const ::std::os::raw::c_char,
                type_: root::lldb::SymbolType,
            ) -> root::lldb::SBSymbol;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule11FindSymbolsEPKcNS_10SymbolTypeE"]
            pub fn SBModule_FindSymbols(
                this: *mut root::lldb::SBModule,
                name: *const ::std::os::raw::c_char,
                type_: root::lldb::SymbolType,
            ) -> root::lldb::SBSymbolContextList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule14GetNumSectionsEv"]
            pub fn SBModule_GetNumSections(this: *mut root::lldb::SBModule) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule17GetSectionAtIndexEm"]
            pub fn SBModule_GetSectionAtIndex(
                this: *mut root::lldb::SBModule,
                idx: usize,
            ) -> root::lldb::SBSection;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule13FindFunctionsEPKcj"]
            pub fn SBModule_FindFunctions(
                this: *mut root::lldb::SBModule,
                name: *const ::std::os::raw::c_char,
                name_type_mask: u32,
            ) -> root::lldb::SBSymbolContextList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule19FindGlobalVariablesERNS_8SBTargetEPKcj"]
            pub fn SBModule_FindGlobalVariables(
                this: *mut root::lldb::SBModule,
                target: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
                max_matches: u32,
            ) -> root::lldb::SBValueList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule23FindFirstGlobalVariableERNS_8SBTargetEPKc"]
            pub fn SBModule_FindFirstGlobalVariable(
                this: *mut root::lldb::SBModule,
                target: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule13FindFirstTypeEPKc"]
            pub fn SBModule_FindFirstType(
                this: *mut root::lldb::SBModule,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule9FindTypesEPKc"]
            pub fn SBModule_FindTypes(
                this: *mut root::lldb::SBModule,
                type_: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTypeList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule11GetTypeByIDEm"]
            pub fn SBModule_GetTypeByID(
                this: *mut root::lldb::SBModule,
                uid: root::lldb::user_id_t,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule12GetBasicTypeENS_9BasicTypeE"]
            pub fn SBModule_GetBasicType(
                this: *mut root::lldb::SBModule,
                type_: root::lldb::BasicType,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule8GetTypesEj"]
            pub fn SBModule_GetTypes(
                this: *mut root::lldb::SBModule,
                type_mask: u32,
            ) -> root::lldb::SBTypeList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule10GetVersionEPjj"]
            pub fn SBModule_GetVersion(
                this: *mut root::lldb::SBModule,
                versions: *mut u32,
                num_versions: u32,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBModule17GetSymbolFileSpecEv"]
            pub fn SBModule_GetSymbolFileSpec(
                this: *const root::lldb::SBModule,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBModule26GetObjectFileHeaderAddressEv"]
            pub fn SBModule_GetObjectFileHeaderAddress(
                this: *const root::lldb::SBModule,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBModule30GetObjectFileEntryPointAddressEv"]
            pub fn SBModule_GetObjectFileEntryPointAddress(
                this: *const root::lldb::SBModule,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule25GetNumberAllocatedModulesEv"]
            pub fn SBModule_GetNumberAllocatedModules() -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModule30GarbageCollectAllocatedModulesEv"]
            pub fn SBModule_GarbageCollectAllocatedModules();
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModuleC1Ev"]
            pub fn SBModule_SBModule(this: *mut root::lldb::SBModule);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModuleC1ERKS0_"]
            pub fn SBModule_SBModule1(
                this: *mut root::lldb::SBModule,
                rhs: *const root::lldb::SBModule,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModuleC1ERKNS_12SBModuleSpecE"]
            pub fn SBModule_SBModule2(
                this: *mut root::lldb::SBModule,
                module_spec: *const root::lldb::SBModuleSpec,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModuleC1ERNS_9SBProcessEm"]
            pub fn SBModule_SBModule3(
                this: *mut root::lldb::SBModule,
                process: *mut root::lldb::SBProcess,
                header_addr: root::lldb::addr_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBModuleD1Ev"]
            pub fn SBModule_SBModule_destructor(this: *mut root::lldb::SBModule);
        }
        impl SBModule {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBModule_IsValid(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBModule_Clear(self)
            }
            #[inline]
            pub unsafe fn IsFileBacked(&self) -> bool {
                SBModule_IsFileBacked(self)
            }
            #[inline]
            pub unsafe fn GetFileSpec(&self) -> root::lldb::SBFileSpec {
                SBModule_GetFileSpec(self)
            }
            #[inline]
            pub unsafe fn GetPlatformFileSpec(&self) -> root::lldb::SBFileSpec {
                SBModule_GetPlatformFileSpec(self)
            }
            #[inline]
            pub unsafe fn SetPlatformFileSpec(
                &mut self,
                platform_file: *const root::lldb::SBFileSpec,
            ) -> bool {
                SBModule_SetPlatformFileSpec(self, platform_file)
            }
            #[inline]
            pub unsafe fn GetRemoteInstallFileSpec(&mut self) -> root::lldb::SBFileSpec {
                SBModule_GetRemoteInstallFileSpec(self)
            }
            #[inline]
            pub unsafe fn SetRemoteInstallFileSpec(
                &mut self,
                file: *mut root::lldb::SBFileSpec,
            ) -> bool {
                SBModule_SetRemoteInstallFileSpec(self, file)
            }
            #[inline]
            pub unsafe fn GetByteOrder(&mut self) -> root::lldb::ByteOrder {
                SBModule_GetByteOrder(self)
            }
            #[inline]
            pub unsafe fn GetAddressByteSize(&mut self) -> u32 {
                SBModule_GetAddressByteSize(self)
            }
            #[inline]
            pub unsafe fn GetTriple(&mut self) -> *const ::std::os::raw::c_char {
                SBModule_GetTriple(self)
            }
            #[inline]
            pub unsafe fn GetUUIDBytes(&self) -> *const u8 {
                SBModule_GetUUIDBytes(self)
            }
            #[inline]
            pub unsafe fn GetUUIDString(&self) -> *const ::std::os::raw::c_char {
                SBModule_GetUUIDString(self)
            }
            #[inline]
            pub unsafe fn FindSection(
                &mut self,
                sect_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBSection {
                SBModule_FindSection(self, sect_name)
            }
            #[inline]
            pub unsafe fn ResolveFileAddress(
                &mut self,
                vm_addr: root::lldb::addr_t,
            ) -> root::lldb::SBAddress {
                SBModule_ResolveFileAddress(self, vm_addr)
            }
            #[inline]
            pub unsafe fn ResolveSymbolContextForAddress(
                &mut self,
                addr: *const root::lldb::SBAddress,
                resolve_scope: u32,
            ) -> root::lldb::SBSymbolContext {
                SBModule_ResolveSymbolContextForAddress(self, addr, resolve_scope)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBModule_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn GetNumCompileUnits(&mut self) -> u32 {
                SBModule_GetNumCompileUnits(self)
            }
            #[inline]
            pub unsafe fn GetCompileUnitAtIndex(&mut self, arg1: u32) -> root::lldb::SBCompileUnit {
                SBModule_GetCompileUnitAtIndex(self, arg1)
            }
            #[inline]
            pub unsafe fn FindCompileUnits(
                &mut self,
                sb_file_spec: *const root::lldb::SBFileSpec,
            ) -> root::lldb::SBSymbolContextList {
                SBModule_FindCompileUnits(self, sb_file_spec)
            }
            #[inline]
            pub unsafe fn GetNumSymbols(&mut self) -> usize {
                SBModule_GetNumSymbols(self)
            }
            #[inline]
            pub unsafe fn GetSymbolAtIndex(&mut self, idx: usize) -> root::lldb::SBSymbol {
                SBModule_GetSymbolAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn FindSymbol(
                &mut self,
                name: *const ::std::os::raw::c_char,
                type_: root::lldb::SymbolType,
            ) -> root::lldb::SBSymbol {
                SBModule_FindSymbol(self, name, type_)
            }
            #[inline]
            pub unsafe fn FindSymbols(
                &mut self,
                name: *const ::std::os::raw::c_char,
                type_: root::lldb::SymbolType,
            ) -> root::lldb::SBSymbolContextList {
                SBModule_FindSymbols(self, name, type_)
            }
            #[inline]
            pub unsafe fn GetNumSections(&mut self) -> usize {
                SBModule_GetNumSections(self)
            }
            #[inline]
            pub unsafe fn GetSectionAtIndex(&mut self, idx: usize) -> root::lldb::SBSection {
                SBModule_GetSectionAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn FindFunctions(
                &mut self,
                name: *const ::std::os::raw::c_char,
                name_type_mask: u32,
            ) -> root::lldb::SBSymbolContextList {
                SBModule_FindFunctions(self, name, name_type_mask)
            }
            #[inline]
            pub unsafe fn FindGlobalVariables(
                &mut self,
                target: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
                max_matches: u32,
            ) -> root::lldb::SBValueList {
                SBModule_FindGlobalVariables(self, target, name, max_matches)
            }
            #[inline]
            pub unsafe fn FindFirstGlobalVariable(
                &mut self,
                target: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBValue {
                SBModule_FindFirstGlobalVariable(self, target, name)
            }
            #[inline]
            pub unsafe fn FindFirstType(
                &mut self,
                name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBType {
                SBModule_FindFirstType(self, name)
            }
            #[inline]
            pub unsafe fn FindTypes(
                &mut self,
                type_: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTypeList {
                SBModule_FindTypes(self, type_)
            }
            #[inline]
            pub unsafe fn GetTypeByID(&mut self, uid: root::lldb::user_id_t) -> root::lldb::SBType {
                SBModule_GetTypeByID(self, uid)
            }
            #[inline]
            pub unsafe fn GetBasicType(
                &mut self,
                type_: root::lldb::BasicType,
            ) -> root::lldb::SBType {
                SBModule_GetBasicType(self, type_)
            }
            #[inline]
            pub unsafe fn GetTypes(&mut self, type_mask: u32) -> root::lldb::SBTypeList {
                SBModule_GetTypes(self, type_mask)
            }
            #[inline]
            pub unsafe fn GetVersion(&mut self, versions: *mut u32, num_versions: u32) -> u32 {
                SBModule_GetVersion(self, versions, num_versions)
            }
            #[inline]
            pub unsafe fn GetSymbolFileSpec(&self) -> root::lldb::SBFileSpec {
                SBModule_GetSymbolFileSpec(self)
            }
            #[inline]
            pub unsafe fn GetObjectFileHeaderAddress(&self) -> root::lldb::SBAddress {
                SBModule_GetObjectFileHeaderAddress(self)
            }
            #[inline]
            pub unsafe fn GetObjectFileEntryPointAddress(&self) -> root::lldb::SBAddress {
                SBModule_GetObjectFileEntryPointAddress(self)
            }
            #[inline]
            pub unsafe fn GetNumberAllocatedModules() -> u32 {
                SBModule_GetNumberAllocatedModules()
            }
            #[inline]
            pub unsafe fn GarbageCollectAllocatedModules() {
                SBModule_GarbageCollectAllocatedModules()
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBModule_SBModule(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBModule) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBModule_SBModule1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(module_spec: *const root::lldb::SBModuleSpec) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBModule_SBModule2(__bindgen_tmp.as_mut_ptr(), module_spec);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(
                process: *mut root::lldb::SBProcess,
                header_addr: root::lldb::addr_t,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBModule_SBModule3(__bindgen_tmp.as_mut_ptr(), process, header_addr);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBModule_SBModule_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBAddress {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBAddress7IsValidEv"]
            pub fn SBAddress_IsValid(this: *const root::lldb::SBAddress) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress5ClearEv"]
            pub fn SBAddress_Clear(this: *mut root::lldb::SBAddress);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBAddress14GetFileAddressEv"]
            pub fn SBAddress_GetFileAddress(
                this: *const root::lldb::SBAddress,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBAddress14GetLoadAddressERKNS_8SBTargetE"]
            pub fn SBAddress_GetLoadAddress(
                this: *const root::lldb::SBAddress,
                target: *const root::lldb::SBTarget,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress10SetAddressENS_9SBSectionEm"]
            pub fn SBAddress_SetAddress(
                this: *mut root::lldb::SBAddress,
                section: root::lldb::SBSection,
                offset: root::lldb::addr_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress14SetLoadAddressEmRNS_8SBTargetE"]
            pub fn SBAddress_SetLoadAddress(
                this: *mut root::lldb::SBAddress,
                load_addr: root::lldb::addr_t,
                target: *mut root::lldb::SBTarget,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress13OffsetAddressEm"]
            pub fn SBAddress_OffsetAddress(
                this: *mut root::lldb::SBAddress,
                offset: root::lldb::addr_t,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress14GetDescriptionERNS_8SBStreamE"]
            pub fn SBAddress_GetDescription(
                this: *mut root::lldb::SBAddress,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress16GetSymbolContextEj"]
            pub fn SBAddress_GetSymbolContext(
                this: *mut root::lldb::SBAddress,
                resolve_scope: u32,
            ) -> root::lldb::SBSymbolContext;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress10GetSectionEv"]
            pub fn SBAddress_GetSection(this: *mut root::lldb::SBAddress) -> root::lldb::SBSection;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress9GetOffsetEv"]
            pub fn SBAddress_GetOffset(this: *mut root::lldb::SBAddress) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress9GetModuleEv"]
            pub fn SBAddress_GetModule(this: *mut root::lldb::SBAddress) -> root::lldb::SBModule;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress14GetCompileUnitEv"]
            pub fn SBAddress_GetCompileUnit(
                this: *mut root::lldb::SBAddress,
            ) -> root::lldb::SBCompileUnit;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress11GetFunctionEv"]
            pub fn SBAddress_GetFunction(
                this: *mut root::lldb::SBAddress,
            ) -> root::lldb::SBFunction;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress8GetBlockEv"]
            pub fn SBAddress_GetBlock(this: *mut root::lldb::SBAddress) -> root::lldb::SBBlock;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress9GetSymbolEv"]
            pub fn SBAddress_GetSymbol(this: *mut root::lldb::SBAddress) -> root::lldb::SBSymbol;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress12GetLineEntryEv"]
            pub fn SBAddress_GetLineEntry(
                this: *mut root::lldb::SBAddress,
            ) -> root::lldb::SBLineEntry;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress3getEv"]
            pub fn SBAddress_get(
                this: *mut root::lldb::SBAddress,
            ) -> *mut root::lldb_private::Address;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress3refEv"]
            pub fn SBAddress_ref(
                this: *mut root::lldb::SBAddress,
            ) -> *mut root::lldb_private::Address;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBAddress3refEv"]
            pub fn SBAddress_ref1(
                this: *const root::lldb::SBAddress,
            ) -> *const root::lldb_private::Address;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddress10SetAddressERKN12lldb_private7AddressE"]
            pub fn SBAddress_SetAddress1(
                this: *mut root::lldb::SBAddress,
                address: *const root::lldb_private::Address,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddressC1Ev"]
            pub fn SBAddress_SBAddress(this: *mut root::lldb::SBAddress);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddressC1ERKS0_"]
            pub fn SBAddress_SBAddress1(
                this: *mut root::lldb::SBAddress,
                rhs: *const root::lldb::SBAddress,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddressC1ENS_9SBSectionEm"]
            pub fn SBAddress_SBAddress2(
                this: *mut root::lldb::SBAddress,
                section: root::lldb::SBSection,
                offset: root::lldb::addr_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddressC1EmRNS_8SBTargetE"]
            pub fn SBAddress_SBAddress3(
                this: *mut root::lldb::SBAddress,
                load_addr: root::lldb::addr_t,
                target: *mut root::lldb::SBTarget,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddressC1ERKN12lldb_private7AddressE"]
            pub fn SBAddress_SBAddress4(
                this: *mut root::lldb::SBAddress,
                address: *const root::lldb_private::Address,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBAddressD1Ev"]
            pub fn SBAddress_SBAddress_destructor(this: *mut root::lldb::SBAddress);
        }
        impl SBAddress {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBAddress_IsValid(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBAddress_Clear(self)
            }
            #[inline]
            pub unsafe fn GetFileAddress(&self) -> root::lldb::addr_t {
                SBAddress_GetFileAddress(self)
            }
            #[inline]
            pub unsafe fn GetLoadAddress(
                &self,
                target: *const root::lldb::SBTarget,
            ) -> root::lldb::addr_t {
                SBAddress_GetLoadAddress(self, target)
            }
            #[inline]
            pub unsafe fn SetAddress(
                &mut self,
                section: root::lldb::SBSection,
                offset: root::lldb::addr_t,
            ) {
                SBAddress_SetAddress(self, section, offset)
            }
            #[inline]
            pub unsafe fn SetLoadAddress(
                &mut self,
                load_addr: root::lldb::addr_t,
                target: *mut root::lldb::SBTarget,
            ) {
                SBAddress_SetLoadAddress(self, load_addr, target)
            }
            #[inline]
            pub unsafe fn OffsetAddress(&mut self, offset: root::lldb::addr_t) -> bool {
                SBAddress_OffsetAddress(self, offset)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBAddress_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn GetSymbolContext(
                &mut self,
                resolve_scope: u32,
            ) -> root::lldb::SBSymbolContext {
                SBAddress_GetSymbolContext(self, resolve_scope)
            }
            #[inline]
            pub unsafe fn GetSection(&mut self) -> root::lldb::SBSection {
                SBAddress_GetSection(self)
            }
            #[inline]
            pub unsafe fn GetOffset(&mut self) -> root::lldb::addr_t {
                SBAddress_GetOffset(self)
            }
            #[inline]
            pub unsafe fn GetModule(&mut self) -> root::lldb::SBModule {
                SBAddress_GetModule(self)
            }
            #[inline]
            pub unsafe fn GetCompileUnit(&mut self) -> root::lldb::SBCompileUnit {
                SBAddress_GetCompileUnit(self)
            }
            #[inline]
            pub unsafe fn GetFunction(&mut self) -> root::lldb::SBFunction {
                SBAddress_GetFunction(self)
            }
            #[inline]
            pub unsafe fn GetBlock(&mut self) -> root::lldb::SBBlock {
                SBAddress_GetBlock(self)
            }
            #[inline]
            pub unsafe fn GetSymbol(&mut self) -> root::lldb::SBSymbol {
                SBAddress_GetSymbol(self)
            }
            #[inline]
            pub unsafe fn GetLineEntry(&mut self) -> root::lldb::SBLineEntry {
                SBAddress_GetLineEntry(self)
            }
            #[inline]
            pub unsafe fn get(&mut self) -> *mut root::lldb_private::Address {
                SBAddress_get(self)
            }
            #[inline]
            pub unsafe fn ref_(&mut self) -> *mut root::lldb_private::Address {
                SBAddress_ref(self)
            }
            #[inline]
            pub unsafe fn ref1(&self) -> *const root::lldb_private::Address {
                SBAddress_ref1(self)
            }
            #[inline]
            pub unsafe fn SetAddress1(&mut self, address: *const root::lldb_private::Address) {
                SBAddress_SetAddress1(self, address)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAddress_SBAddress(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBAddress) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAddress_SBAddress1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(section: root::lldb::SBSection, offset: root::lldb::addr_t) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAddress_SBAddress2(__bindgen_tmp.as_mut_ptr(), section, offset);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(
                load_addr: root::lldb::addr_t,
                target: *mut root::lldb::SBTarget,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAddress_SBAddress3(__bindgen_tmp.as_mut_ptr(), load_addr, target);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(address: *const root::lldb_private::Address) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBAddress_SBAddress4(__bindgen_tmp.as_mut_ptr(), address);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBAddress_SBAddress_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBBreakpointLocation {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation5GetIDEv"]
            pub fn SBBreakpointLocation_GetID(
                this: *mut root::lldb::SBBreakpointLocation,
            ) -> root::lldb::break_id_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb20SBBreakpointLocation7IsValidEv"]
            pub fn SBBreakpointLocation_IsValid(
                this: *const root::lldb::SBBreakpointLocation,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation10GetAddressEv"]
            pub fn SBBreakpointLocation_GetAddress(
                this: *mut root::lldb::SBBreakpointLocation,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation14GetLoadAddressEv"]
            pub fn SBBreakpointLocation_GetLoadAddress(
                this: *mut root::lldb::SBBreakpointLocation,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation10SetEnabledEb"]
            pub fn SBBreakpointLocation_SetEnabled(
                this: *mut root::lldb::SBBreakpointLocation,
                enabled: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation9IsEnabledEv"]
            pub fn SBBreakpointLocation_IsEnabled(
                this: *mut root::lldb::SBBreakpointLocation,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation11GetHitCountEv"]
            pub fn SBBreakpointLocation_GetHitCount(
                this: *mut root::lldb::SBBreakpointLocation,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation14GetIgnoreCountEv"]
            pub fn SBBreakpointLocation_GetIgnoreCount(
                this: *mut root::lldb::SBBreakpointLocation,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation14SetIgnoreCountEj"]
            pub fn SBBreakpointLocation_SetIgnoreCount(
                this: *mut root::lldb::SBBreakpointLocation,
                n: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation12SetConditionEPKc"]
            pub fn SBBreakpointLocation_SetCondition(
                this: *mut root::lldb::SBBreakpointLocation,
                condition: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation12GetConditionEv"]
            pub fn SBBreakpointLocation_GetCondition(
                this: *mut root::lldb::SBBreakpointLocation,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation15SetAutoContinueEb"]
            pub fn SBBreakpointLocation_SetAutoContinue(
                this: *mut root::lldb::SBBreakpointLocation,
                auto_continue: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation15GetAutoContinueEv"]
            pub fn SBBreakpointLocation_GetAutoContinue(
                this: *mut root::lldb::SBBreakpointLocation,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation11SetCallbackEPFbPvRNS_9SBProcessERNS_8SBThreadERS0_ES1_"]
            pub fn SBBreakpointLocation_SetCallback(
                this: *mut root::lldb::SBBreakpointLocation,
                callback: root::lldb::SBBreakpointHitCallback,
                baton: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation25SetScriptCallbackFunctionEPKc"]
            pub fn SBBreakpointLocation_SetScriptCallbackFunction(
                this: *mut root::lldb::SBBreakpointLocation,
                callback_function_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation25SetScriptCallbackFunctionEPKcRNS_16SBStructuredDataE"]
            pub fn SBBreakpointLocation_SetScriptCallbackFunction1(
                this: *mut root::lldb::SBBreakpointLocation,
                callback_function_name: *const ::std::os::raw::c_char,
                extra_args: *mut root::lldb::SBStructuredData,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation21SetScriptCallbackBodyEPKc"]
            pub fn SBBreakpointLocation_SetScriptCallbackBody(
                this: *mut root::lldb::SBBreakpointLocation,
                script_body_text: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation22SetCommandLineCommandsERNS_12SBStringListE"]
            pub fn SBBreakpointLocation_SetCommandLineCommands(
                this: *mut root::lldb::SBBreakpointLocation,
                commands: *mut root::lldb::SBStringList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation22GetCommandLineCommandsERNS_12SBStringListE"]
            pub fn SBBreakpointLocation_GetCommandLineCommands(
                this: *mut root::lldb::SBBreakpointLocation,
                commands: *mut root::lldb::SBStringList,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation11SetThreadIDEm"]
            pub fn SBBreakpointLocation_SetThreadID(
                this: *mut root::lldb::SBBreakpointLocation,
                sb_thread_id: root::lldb::tid_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation11GetThreadIDEv"]
            pub fn SBBreakpointLocation_GetThreadID(
                this: *mut root::lldb::SBBreakpointLocation,
            ) -> root::lldb::tid_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation14SetThreadIndexEj"]
            pub fn SBBreakpointLocation_SetThreadIndex(
                this: *mut root::lldb::SBBreakpointLocation,
                index: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb20SBBreakpointLocation14GetThreadIndexEv"]
            pub fn SBBreakpointLocation_GetThreadIndex(
                this: *const root::lldb::SBBreakpointLocation,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation13SetThreadNameEPKc"]
            pub fn SBBreakpointLocation_SetThreadName(
                this: *mut root::lldb::SBBreakpointLocation,
                thread_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb20SBBreakpointLocation13GetThreadNameEv"]
            pub fn SBBreakpointLocation_GetThreadName(
                this: *const root::lldb::SBBreakpointLocation,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation12SetQueueNameEPKc"]
            pub fn SBBreakpointLocation_SetQueueName(
                this: *mut root::lldb::SBBreakpointLocation,
                queue_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb20SBBreakpointLocation12GetQueueNameEv"]
            pub fn SBBreakpointLocation_GetQueueName(
                this: *const root::lldb::SBBreakpointLocation,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation10IsResolvedEv"]
            pub fn SBBreakpointLocation_IsResolved(
                this: *mut root::lldb::SBBreakpointLocation,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE"]
            pub fn SBBreakpointLocation_GetDescription(
                this: *mut root::lldb::SBBreakpointLocation,
                description: *mut root::lldb::SBStream,
                level: root::lldb::DescriptionLevel,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocation13GetBreakpointEv"]
            pub fn SBBreakpointLocation_GetBreakpoint(
                this: *mut root::lldb::SBBreakpointLocation,
            ) -> root::lldb::SBBreakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocationC1Ev"]
            pub fn SBBreakpointLocation_SBBreakpointLocation(
                this: *mut root::lldb::SBBreakpointLocation,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocationC1ERKS0_"]
            pub fn SBBreakpointLocation_SBBreakpointLocation1(
                this: *mut root::lldb::SBBreakpointLocation,
                rhs: *const root::lldb::SBBreakpointLocation,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocationC1ERKSt10shared_ptrIN12lldb_private18BreakpointLocationEE"]
            pub fn SBBreakpointLocation_SBBreakpointLocation2(
                this: *mut root::lldb::SBBreakpointLocation,
                break_loc_sp: *const root::lldb::BreakpointLocationSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBBreakpointLocationD1Ev"]
            pub fn SBBreakpointLocation_SBBreakpointLocation_destructor(
                this: *mut root::lldb::SBBreakpointLocation,
            );
        }
        impl SBBreakpointLocation {
            #[inline]
            pub unsafe fn GetID(&mut self) -> root::lldb::break_id_t {
                SBBreakpointLocation_GetID(self)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBBreakpointLocation_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetAddress(&mut self) -> root::lldb::SBAddress {
                SBBreakpointLocation_GetAddress(self)
            }
            #[inline]
            pub unsafe fn GetLoadAddress(&mut self) -> root::lldb::addr_t {
                SBBreakpointLocation_GetLoadAddress(self)
            }
            #[inline]
            pub unsafe fn SetEnabled(&mut self, enabled: bool) {
                SBBreakpointLocation_SetEnabled(self, enabled)
            }
            #[inline]
            pub unsafe fn IsEnabled(&mut self) -> bool {
                SBBreakpointLocation_IsEnabled(self)
            }
            #[inline]
            pub unsafe fn GetHitCount(&mut self) -> u32 {
                SBBreakpointLocation_GetHitCount(self)
            }
            #[inline]
            pub unsafe fn GetIgnoreCount(&mut self) -> u32 {
                SBBreakpointLocation_GetIgnoreCount(self)
            }
            #[inline]
            pub unsafe fn SetIgnoreCount(&mut self, n: u32) {
                SBBreakpointLocation_SetIgnoreCount(self, n)
            }
            #[inline]
            pub unsafe fn SetCondition(&mut self, condition: *const ::std::os::raw::c_char) {
                SBBreakpointLocation_SetCondition(self, condition)
            }
            #[inline]
            pub unsafe fn GetCondition(&mut self) -> *const ::std::os::raw::c_char {
                SBBreakpointLocation_GetCondition(self)
            }
            #[inline]
            pub unsafe fn SetAutoContinue(&mut self, auto_continue: bool) {
                SBBreakpointLocation_SetAutoContinue(self, auto_continue)
            }
            #[inline]
            pub unsafe fn GetAutoContinue(&mut self) -> bool {
                SBBreakpointLocation_GetAutoContinue(self)
            }
            #[inline]
            pub unsafe fn SetCallback(
                &mut self,
                callback: root::lldb::SBBreakpointHitCallback,
                baton: *mut ::std::os::raw::c_void,
            ) {
                SBBreakpointLocation_SetCallback(self, callback, baton)
            }
            #[inline]
            pub unsafe fn SetScriptCallbackFunction(
                &mut self,
                callback_function_name: *const ::std::os::raw::c_char,
            ) {
                SBBreakpointLocation_SetScriptCallbackFunction(self, callback_function_name)
            }
            #[inline]
            pub unsafe fn SetScriptCallbackFunction1(
                &mut self,
                callback_function_name: *const ::std::os::raw::c_char,
                extra_args: *mut root::lldb::SBStructuredData,
            ) -> root::lldb::SBError {
                SBBreakpointLocation_SetScriptCallbackFunction1(
                    self,
                    callback_function_name,
                    extra_args,
                )
            }
            #[inline]
            pub unsafe fn SetScriptCallbackBody(
                &mut self,
                script_body_text: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError {
                SBBreakpointLocation_SetScriptCallbackBody(self, script_body_text)
            }
            #[inline]
            pub unsafe fn SetCommandLineCommands(
                &mut self,
                commands: *mut root::lldb::SBStringList,
            ) {
                SBBreakpointLocation_SetCommandLineCommands(self, commands)
            }
            #[inline]
            pub unsafe fn GetCommandLineCommands(
                &mut self,
                commands: *mut root::lldb::SBStringList,
            ) -> bool {
                SBBreakpointLocation_GetCommandLineCommands(self, commands)
            }
            #[inline]
            pub unsafe fn SetThreadID(&mut self, sb_thread_id: root::lldb::tid_t) {
                SBBreakpointLocation_SetThreadID(self, sb_thread_id)
            }
            #[inline]
            pub unsafe fn GetThreadID(&mut self) -> root::lldb::tid_t {
                SBBreakpointLocation_GetThreadID(self)
            }
            #[inline]
            pub unsafe fn SetThreadIndex(&mut self, index: u32) {
                SBBreakpointLocation_SetThreadIndex(self, index)
            }
            #[inline]
            pub unsafe fn GetThreadIndex(&self) -> u32 {
                SBBreakpointLocation_GetThreadIndex(self)
            }
            #[inline]
            pub unsafe fn SetThreadName(&mut self, thread_name: *const ::std::os::raw::c_char) {
                SBBreakpointLocation_SetThreadName(self, thread_name)
            }
            #[inline]
            pub unsafe fn GetThreadName(&self) -> *const ::std::os::raw::c_char {
                SBBreakpointLocation_GetThreadName(self)
            }
            #[inline]
            pub unsafe fn SetQueueName(&mut self, queue_name: *const ::std::os::raw::c_char) {
                SBBreakpointLocation_SetQueueName(self, queue_name)
            }
            #[inline]
            pub unsafe fn GetQueueName(&self) -> *const ::std::os::raw::c_char {
                SBBreakpointLocation_GetQueueName(self)
            }
            #[inline]
            pub unsafe fn IsResolved(&mut self) -> bool {
                SBBreakpointLocation_IsResolved(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                level: root::lldb::DescriptionLevel,
            ) -> bool {
                SBBreakpointLocation_GetDescription(self, description, level)
            }
            #[inline]
            pub unsafe fn GetBreakpoint(&mut self) -> root::lldb::SBBreakpoint {
                SBBreakpointLocation_GetBreakpoint(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBreakpointLocation_SBBreakpointLocation(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBBreakpointLocation) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBreakpointLocation_SBBreakpointLocation1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(break_loc_sp: *const root::lldb::BreakpointLocationSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBreakpointLocation_SBBreakpointLocation2(
                    __bindgen_tmp.as_mut_ptr(),
                    break_loc_sp,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBBreakpointLocation_SBBreakpointLocation_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBBreakpointName {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBBreakpointName7IsValidEv"]
            pub fn SBBreakpointName_IsValid(this: *const root::lldb::SBBreakpointName) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBBreakpointName7GetNameEv"]
            pub fn SBBreakpointName_GetName(
                this: *const root::lldb::SBBreakpointName,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName10SetEnabledEb"]
            pub fn SBBreakpointName_SetEnabled(
                this: *mut root::lldb::SBBreakpointName,
                enable: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName9IsEnabledEv"]
            pub fn SBBreakpointName_IsEnabled(this: *mut root::lldb::SBBreakpointName) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName10SetOneShotEb"]
            pub fn SBBreakpointName_SetOneShot(
                this: *mut root::lldb::SBBreakpointName,
                one_shot: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBBreakpointName9IsOneShotEv"]
            pub fn SBBreakpointName_IsOneShot(this: *const root::lldb::SBBreakpointName) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName14SetIgnoreCountEj"]
            pub fn SBBreakpointName_SetIgnoreCount(
                this: *mut root::lldb::SBBreakpointName,
                count: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBBreakpointName14GetIgnoreCountEv"]
            pub fn SBBreakpointName_GetIgnoreCount(
                this: *const root::lldb::SBBreakpointName,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName12SetConditionEPKc"]
            pub fn SBBreakpointName_SetCondition(
                this: *mut root::lldb::SBBreakpointName,
                condition: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName12GetConditionEv"]
            pub fn SBBreakpointName_GetCondition(
                this: *mut root::lldb::SBBreakpointName,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName15SetAutoContinueEb"]
            pub fn SBBreakpointName_SetAutoContinue(
                this: *mut root::lldb::SBBreakpointName,
                auto_continue: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName15GetAutoContinueEv"]
            pub fn SBBreakpointName_GetAutoContinue(
                this: *mut root::lldb::SBBreakpointName,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName11SetThreadIDEm"]
            pub fn SBBreakpointName_SetThreadID(
                this: *mut root::lldb::SBBreakpointName,
                sb_thread_id: root::lldb::tid_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName11GetThreadIDEv"]
            pub fn SBBreakpointName_GetThreadID(
                this: *mut root::lldb::SBBreakpointName,
            ) -> root::lldb::tid_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName14SetThreadIndexEj"]
            pub fn SBBreakpointName_SetThreadIndex(
                this: *mut root::lldb::SBBreakpointName,
                index: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBBreakpointName14GetThreadIndexEv"]
            pub fn SBBreakpointName_GetThreadIndex(
                this: *const root::lldb::SBBreakpointName,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName13SetThreadNameEPKc"]
            pub fn SBBreakpointName_SetThreadName(
                this: *mut root::lldb::SBBreakpointName,
                thread_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBBreakpointName13GetThreadNameEv"]
            pub fn SBBreakpointName_GetThreadName(
                this: *const root::lldb::SBBreakpointName,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName12SetQueueNameEPKc"]
            pub fn SBBreakpointName_SetQueueName(
                this: *mut root::lldb::SBBreakpointName,
                queue_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBBreakpointName12GetQueueNameEv"]
            pub fn SBBreakpointName_GetQueueName(
                this: *const root::lldb::SBBreakpointName,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName11SetCallbackEPFbPvRNS_9SBProcessERNS_8SBThreadERNS_20SBBreakpointLocationEES1_"]
            pub fn SBBreakpointName_SetCallback(
                this: *mut root::lldb::SBBreakpointName,
                callback: root::lldb::SBBreakpointHitCallback,
                baton: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName25SetScriptCallbackFunctionEPKc"]
            pub fn SBBreakpointName_SetScriptCallbackFunction(
                this: *mut root::lldb::SBBreakpointName,
                callback_function_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName25SetScriptCallbackFunctionEPKcRNS_16SBStructuredDataE"]
            pub fn SBBreakpointName_SetScriptCallbackFunction1(
                this: *mut root::lldb::SBBreakpointName,
                callback_function_name: *const ::std::os::raw::c_char,
                extra_args: *mut root::lldb::SBStructuredData,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName22SetCommandLineCommandsERNS_12SBStringListE"]
            pub fn SBBreakpointName_SetCommandLineCommands(
                this: *mut root::lldb::SBBreakpointName,
                commands: *mut root::lldb::SBStringList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName22GetCommandLineCommandsERNS_12SBStringListE"]
            pub fn SBBreakpointName_GetCommandLineCommands(
                this: *mut root::lldb::SBBreakpointName,
                commands: *mut root::lldb::SBStringList,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName21SetScriptCallbackBodyEPKc"]
            pub fn SBBreakpointName_SetScriptCallbackBody(
                this: *mut root::lldb::SBBreakpointName,
                script_body_text: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBBreakpointName13GetHelpStringEv"]
            pub fn SBBreakpointName_GetHelpString(
                this: *const root::lldb::SBBreakpointName,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName13SetHelpStringEPKc"]
            pub fn SBBreakpointName_SetHelpString(
                this: *mut root::lldb::SBBreakpointName,
                help_string: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBBreakpointName12GetAllowListEv"]
            pub fn SBBreakpointName_GetAllowList(this: *const root::lldb::SBBreakpointName)
                -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName12SetAllowListEb"]
            pub fn SBBreakpointName_SetAllowList(
                this: *mut root::lldb::SBBreakpointName,
                value: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName14GetAllowDeleteEv"]
            pub fn SBBreakpointName_GetAllowDelete(this: *mut root::lldb::SBBreakpointName)
                -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName14SetAllowDeleteEb"]
            pub fn SBBreakpointName_SetAllowDelete(
                this: *mut root::lldb::SBBreakpointName,
                value: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName15GetAllowDisableEv"]
            pub fn SBBreakpointName_GetAllowDisable(
                this: *mut root::lldb::SBBreakpointName,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName15SetAllowDisableEb"]
            pub fn SBBreakpointName_SetAllowDisable(
                this: *mut root::lldb::SBBreakpointName,
                value: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointName14GetDescriptionERNS_8SBStreamE"]
            pub fn SBBreakpointName_GetDescription(
                this: *mut root::lldb::SBBreakpointName,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointNameC1Ev"]
            pub fn SBBreakpointName_SBBreakpointName(this: *mut root::lldb::SBBreakpointName);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointNameC1ERNS_8SBTargetEPKc"]
            pub fn SBBreakpointName_SBBreakpointName1(
                this: *mut root::lldb::SBBreakpointName,
                target: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointNameC1ERNS_12SBBreakpointEPKc"]
            pub fn SBBreakpointName_SBBreakpointName2(
                this: *mut root::lldb::SBBreakpointName,
                bkpt: *mut root::lldb::SBBreakpoint,
                name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointNameC1ERKS0_"]
            pub fn SBBreakpointName_SBBreakpointName3(
                this: *mut root::lldb::SBBreakpointName,
                rhs: *const root::lldb::SBBreakpointName,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBBreakpointNameD1Ev"]
            pub fn SBBreakpointName_SBBreakpointName_destructor(
                this: *mut root::lldb::SBBreakpointName,
            );
        }
        impl SBBreakpointName {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBBreakpointName_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetName(&self) -> *const ::std::os::raw::c_char {
                SBBreakpointName_GetName(self)
            }
            #[inline]
            pub unsafe fn SetEnabled(&mut self, enable: bool) {
                SBBreakpointName_SetEnabled(self, enable)
            }
            #[inline]
            pub unsafe fn IsEnabled(&mut self) -> bool {
                SBBreakpointName_IsEnabled(self)
            }
            #[inline]
            pub unsafe fn SetOneShot(&mut self, one_shot: bool) {
                SBBreakpointName_SetOneShot(self, one_shot)
            }
            #[inline]
            pub unsafe fn IsOneShot(&self) -> bool {
                SBBreakpointName_IsOneShot(self)
            }
            #[inline]
            pub unsafe fn SetIgnoreCount(&mut self, count: u32) {
                SBBreakpointName_SetIgnoreCount(self, count)
            }
            #[inline]
            pub unsafe fn GetIgnoreCount(&self) -> u32 {
                SBBreakpointName_GetIgnoreCount(self)
            }
            #[inline]
            pub unsafe fn SetCondition(&mut self, condition: *const ::std::os::raw::c_char) {
                SBBreakpointName_SetCondition(self, condition)
            }
            #[inline]
            pub unsafe fn GetCondition(&mut self) -> *const ::std::os::raw::c_char {
                SBBreakpointName_GetCondition(self)
            }
            #[inline]
            pub unsafe fn SetAutoContinue(&mut self, auto_continue: bool) {
                SBBreakpointName_SetAutoContinue(self, auto_continue)
            }
            #[inline]
            pub unsafe fn GetAutoContinue(&mut self) -> bool {
                SBBreakpointName_GetAutoContinue(self)
            }
            #[inline]
            pub unsafe fn SetThreadID(&mut self, sb_thread_id: root::lldb::tid_t) {
                SBBreakpointName_SetThreadID(self, sb_thread_id)
            }
            #[inline]
            pub unsafe fn GetThreadID(&mut self) -> root::lldb::tid_t {
                SBBreakpointName_GetThreadID(self)
            }
            #[inline]
            pub unsafe fn SetThreadIndex(&mut self, index: u32) {
                SBBreakpointName_SetThreadIndex(self, index)
            }
            #[inline]
            pub unsafe fn GetThreadIndex(&self) -> u32 {
                SBBreakpointName_GetThreadIndex(self)
            }
            #[inline]
            pub unsafe fn SetThreadName(&mut self, thread_name: *const ::std::os::raw::c_char) {
                SBBreakpointName_SetThreadName(self, thread_name)
            }
            #[inline]
            pub unsafe fn GetThreadName(&self) -> *const ::std::os::raw::c_char {
                SBBreakpointName_GetThreadName(self)
            }
            #[inline]
            pub unsafe fn SetQueueName(&mut self, queue_name: *const ::std::os::raw::c_char) {
                SBBreakpointName_SetQueueName(self, queue_name)
            }
            #[inline]
            pub unsafe fn GetQueueName(&self) -> *const ::std::os::raw::c_char {
                SBBreakpointName_GetQueueName(self)
            }
            #[inline]
            pub unsafe fn SetCallback(
                &mut self,
                callback: root::lldb::SBBreakpointHitCallback,
                baton: *mut ::std::os::raw::c_void,
            ) {
                SBBreakpointName_SetCallback(self, callback, baton)
            }
            #[inline]
            pub unsafe fn SetScriptCallbackFunction(
                &mut self,
                callback_function_name: *const ::std::os::raw::c_char,
            ) {
                SBBreakpointName_SetScriptCallbackFunction(self, callback_function_name)
            }
            #[inline]
            pub unsafe fn SetScriptCallbackFunction1(
                &mut self,
                callback_function_name: *const ::std::os::raw::c_char,
                extra_args: *mut root::lldb::SBStructuredData,
            ) -> root::lldb::SBError {
                SBBreakpointName_SetScriptCallbackFunction1(
                    self,
                    callback_function_name,
                    extra_args,
                )
            }
            #[inline]
            pub unsafe fn SetCommandLineCommands(
                &mut self,
                commands: *mut root::lldb::SBStringList,
            ) {
                SBBreakpointName_SetCommandLineCommands(self, commands)
            }
            #[inline]
            pub unsafe fn GetCommandLineCommands(
                &mut self,
                commands: *mut root::lldb::SBStringList,
            ) -> bool {
                SBBreakpointName_GetCommandLineCommands(self, commands)
            }
            #[inline]
            pub unsafe fn SetScriptCallbackBody(
                &mut self,
                script_body_text: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError {
                SBBreakpointName_SetScriptCallbackBody(self, script_body_text)
            }
            #[inline]
            pub unsafe fn GetHelpString(&self) -> *const ::std::os::raw::c_char {
                SBBreakpointName_GetHelpString(self)
            }
            #[inline]
            pub unsafe fn SetHelpString(&mut self, help_string: *const ::std::os::raw::c_char) {
                SBBreakpointName_SetHelpString(self, help_string)
            }
            #[inline]
            pub unsafe fn GetAllowList(&self) -> bool {
                SBBreakpointName_GetAllowList(self)
            }
            #[inline]
            pub unsafe fn SetAllowList(&mut self, value: bool) {
                SBBreakpointName_SetAllowList(self, value)
            }
            #[inline]
            pub unsafe fn GetAllowDelete(&mut self) -> bool {
                SBBreakpointName_GetAllowDelete(self)
            }
            #[inline]
            pub unsafe fn SetAllowDelete(&mut self, value: bool) {
                SBBreakpointName_SetAllowDelete(self, value)
            }
            #[inline]
            pub unsafe fn GetAllowDisable(&mut self) -> bool {
                SBBreakpointName_GetAllowDisable(self)
            }
            #[inline]
            pub unsafe fn SetAllowDisable(&mut self, value: bool) {
                SBBreakpointName_SetAllowDisable(self, value)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBBreakpointName_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBreakpointName_SBBreakpointName(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                target: *mut root::lldb::SBTarget,
                name: *const ::std::os::raw::c_char,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBreakpointName_SBBreakpointName1(__bindgen_tmp.as_mut_ptr(), target, name);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                bkpt: *mut root::lldb::SBBreakpoint,
                name: *const ::std::os::raw::c_char,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBreakpointName_SBBreakpointName2(__bindgen_tmp.as_mut_ptr(), bkpt, name);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(rhs: *const root::lldb::SBBreakpointName) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBBreakpointName_SBBreakpointName3(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBBreakpointName_SBBreakpointName_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBProcessInfo {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBProcessInfo7IsValidEv"]
            pub fn SBProcessInfo_IsValid(this: *const root::lldb::SBProcessInfo) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfo7GetNameEv"]
            pub fn SBProcessInfo_GetName(
                this: *mut root::lldb::SBProcessInfo,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfo17GetExecutableFileEv"]
            pub fn SBProcessInfo_GetExecutableFile(
                this: *mut root::lldb::SBProcessInfo,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfo12GetProcessIDEv"]
            pub fn SBProcessInfo_GetProcessID(
                this: *mut root::lldb::SBProcessInfo,
            ) -> root::lldb::pid_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfo9GetUserIDEv"]
            pub fn SBProcessInfo_GetUserID(this: *mut root::lldb::SBProcessInfo) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfo10GetGroupIDEv"]
            pub fn SBProcessInfo_GetGroupID(this: *mut root::lldb::SBProcessInfo) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfo13UserIDIsValidEv"]
            pub fn SBProcessInfo_UserIDIsValid(this: *mut root::lldb::SBProcessInfo) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfo14GroupIDIsValidEv"]
            pub fn SBProcessInfo_GroupIDIsValid(this: *mut root::lldb::SBProcessInfo) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfo18GetEffectiveUserIDEv"]
            pub fn SBProcessInfo_GetEffectiveUserID(this: *mut root::lldb::SBProcessInfo) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfo19GetEffectiveGroupIDEv"]
            pub fn SBProcessInfo_GetEffectiveGroupID(this: *mut root::lldb::SBProcessInfo) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfo22EffectiveUserIDIsValidEv"]
            pub fn SBProcessInfo_EffectiveUserIDIsValid(
                this: *mut root::lldb::SBProcessInfo,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfo23EffectiveGroupIDIsValidEv"]
            pub fn SBProcessInfo_EffectiveGroupIDIsValid(
                this: *mut root::lldb::SBProcessInfo,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfo18GetParentProcessIDEv"]
            pub fn SBProcessInfo_GetParentProcessID(
                this: *mut root::lldb::SBProcessInfo,
            ) -> root::lldb::pid_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfo9GetTripleEv"]
            pub fn SBProcessInfo_GetTriple(
                this: *mut root::lldb::SBProcessInfo,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfoC1Ev"]
            pub fn SBProcessInfo_SBProcessInfo(this: *mut root::lldb::SBProcessInfo);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfoC1ERKS0_"]
            pub fn SBProcessInfo_SBProcessInfo1(
                this: *mut root::lldb::SBProcessInfo,
                rhs: *const root::lldb::SBProcessInfo,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBProcessInfoD1Ev"]
            pub fn SBProcessInfo_SBProcessInfo_destructor(this: *mut root::lldb::SBProcessInfo);
        }
        impl SBProcessInfo {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBProcessInfo_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetName(&mut self) -> *const ::std::os::raw::c_char {
                SBProcessInfo_GetName(self)
            }
            #[inline]
            pub unsafe fn GetExecutableFile(&mut self) -> root::lldb::SBFileSpec {
                SBProcessInfo_GetExecutableFile(self)
            }
            #[inline]
            pub unsafe fn GetProcessID(&mut self) -> root::lldb::pid_t {
                SBProcessInfo_GetProcessID(self)
            }
            #[inline]
            pub unsafe fn GetUserID(&mut self) -> u32 {
                SBProcessInfo_GetUserID(self)
            }
            #[inline]
            pub unsafe fn GetGroupID(&mut self) -> u32 {
                SBProcessInfo_GetGroupID(self)
            }
            #[inline]
            pub unsafe fn UserIDIsValid(&mut self) -> bool {
                SBProcessInfo_UserIDIsValid(self)
            }
            #[inline]
            pub unsafe fn GroupIDIsValid(&mut self) -> bool {
                SBProcessInfo_GroupIDIsValid(self)
            }
            #[inline]
            pub unsafe fn GetEffectiveUserID(&mut self) -> u32 {
                SBProcessInfo_GetEffectiveUserID(self)
            }
            #[inline]
            pub unsafe fn GetEffectiveGroupID(&mut self) -> u32 {
                SBProcessInfo_GetEffectiveGroupID(self)
            }
            #[inline]
            pub unsafe fn EffectiveUserIDIsValid(&mut self) -> bool {
                SBProcessInfo_EffectiveUserIDIsValid(self)
            }
            #[inline]
            pub unsafe fn EffectiveGroupIDIsValid(&mut self) -> bool {
                SBProcessInfo_EffectiveGroupIDIsValid(self)
            }
            #[inline]
            pub unsafe fn GetParentProcessID(&mut self) -> root::lldb::pid_t {
                SBProcessInfo_GetParentProcessID(self)
            }
            #[inline]
            pub unsafe fn GetTriple(&mut self) -> *const ::std::os::raw::c_char {
                SBProcessInfo_GetTriple(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBProcessInfo_SBProcessInfo(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBProcessInfo) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBProcessInfo_SBProcessInfo1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBProcessInfo_SBProcessInfo_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBQueue {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBQueue7IsValidEv"]
            pub fn SBQueue_IsValid(this: *const root::lldb::SBQueue) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBQueue5ClearEv"]
            pub fn SBQueue_Clear(this: *mut root::lldb::SBQueue);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBQueue10GetProcessEv"]
            pub fn SBQueue_GetProcess(this: *mut root::lldb::SBQueue) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBQueue10GetQueueIDEv"]
            pub fn SBQueue_GetQueueID(this: *const root::lldb::SBQueue) -> root::lldb::queue_id_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBQueue7GetNameEv"]
            pub fn SBQueue_GetName(
                this: *const root::lldb::SBQueue,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBQueue10GetIndexIDEv"]
            pub fn SBQueue_GetIndexID(this: *const root::lldb::SBQueue) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBQueue13GetNumThreadsEv"]
            pub fn SBQueue_GetNumThreads(this: *mut root::lldb::SBQueue) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBQueue16GetThreadAtIndexEj"]
            pub fn SBQueue_GetThreadAtIndex(
                this: *mut root::lldb::SBQueue,
                arg1: u32,
            ) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBQueue18GetNumPendingItemsEv"]
            pub fn SBQueue_GetNumPendingItems(this: *mut root::lldb::SBQueue) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBQueue21GetPendingItemAtIndexEj"]
            pub fn SBQueue_GetPendingItemAtIndex(
                this: *mut root::lldb::SBQueue,
                arg1: u32,
            ) -> root::lldb::SBQueueItem;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBQueue18GetNumRunningItemsEv"]
            pub fn SBQueue_GetNumRunningItems(this: *mut root::lldb::SBQueue) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBQueue7GetKindEv"]
            pub fn SBQueue_GetKind(this: *mut root::lldb::SBQueue) -> root::lldb::QueueKind;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBQueue8SetQueueERKSt10shared_ptrIN12lldb_private5QueueEE"]
            pub fn SBQueue_SetQueue(
                this: *mut root::lldb::SBQueue,
                queue_sp: *const root::lldb::QueueSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBQueueC1Ev"]
            pub fn SBQueue_SBQueue(this: *mut root::lldb::SBQueue);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBQueueC1ERKS0_"]
            pub fn SBQueue_SBQueue1(
                this: *mut root::lldb::SBQueue,
                rhs: *const root::lldb::SBQueue,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBQueueC1ERKSt10shared_ptrIN12lldb_private5QueueEE"]
            pub fn SBQueue_SBQueue2(
                this: *mut root::lldb::SBQueue,
                queue_sp: *const root::lldb::QueueSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBQueueD1Ev"]
            pub fn SBQueue_SBQueue_destructor(this: *mut root::lldb::SBQueue);
        }
        impl SBQueue {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBQueue_IsValid(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBQueue_Clear(self)
            }
            #[inline]
            pub unsafe fn GetProcess(&mut self) -> root::lldb::SBProcess {
                SBQueue_GetProcess(self)
            }
            #[inline]
            pub unsafe fn GetQueueID(&self) -> root::lldb::queue_id_t {
                SBQueue_GetQueueID(self)
            }
            #[inline]
            pub unsafe fn GetName(&self) -> *const ::std::os::raw::c_char {
                SBQueue_GetName(self)
            }
            #[inline]
            pub unsafe fn GetIndexID(&self) -> u32 {
                SBQueue_GetIndexID(self)
            }
            #[inline]
            pub unsafe fn GetNumThreads(&mut self) -> u32 {
                SBQueue_GetNumThreads(self)
            }
            #[inline]
            pub unsafe fn GetThreadAtIndex(&mut self, arg1: u32) -> root::lldb::SBThread {
                SBQueue_GetThreadAtIndex(self, arg1)
            }
            #[inline]
            pub unsafe fn GetNumPendingItems(&mut self) -> u32 {
                SBQueue_GetNumPendingItems(self)
            }
            #[inline]
            pub unsafe fn GetPendingItemAtIndex(&mut self, arg1: u32) -> root::lldb::SBQueueItem {
                SBQueue_GetPendingItemAtIndex(self, arg1)
            }
            #[inline]
            pub unsafe fn GetNumRunningItems(&mut self) -> u32 {
                SBQueue_GetNumRunningItems(self)
            }
            #[inline]
            pub unsafe fn GetKind(&mut self) -> root::lldb::QueueKind {
                SBQueue_GetKind(self)
            }
            #[inline]
            pub unsafe fn SetQueue(&mut self, queue_sp: *const root::lldb::QueueSP) {
                SBQueue_SetQueue(self, queue_sp)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBQueue_SBQueue(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBQueue) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBQueue_SBQueue1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(queue_sp: *const root::lldb::QueueSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBQueue_SBQueue2(__bindgen_tmp.as_mut_ptr(), queue_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBQueue_SBQueue_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBProcess {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        pub const SBProcess_eBroadcastBitStateChanged: root::lldb::SBProcess__bindgen_ty_1 = 1;
        pub const SBProcess_eBroadcastBitInterrupt: root::lldb::SBProcess__bindgen_ty_1 = 2;
        pub const SBProcess_eBroadcastBitSTDOUT: root::lldb::SBProcess__bindgen_ty_1 = 4;
        pub const SBProcess_eBroadcastBitSTDERR: root::lldb::SBProcess__bindgen_ty_1 = 8;
        pub const SBProcess_eBroadcastBitProfileData: root::lldb::SBProcess__bindgen_ty_1 = 16;
        pub const SBProcess_eBroadcastBitStructuredData: root::lldb::SBProcess__bindgen_ty_1 = 32;
        pub type SBProcess__bindgen_ty_1 = ::std::os::raw::c_uint;
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess23GetBroadcasterClassNameEv"]
            pub fn SBProcess_GetBroadcasterClassName() -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess13GetPluginNameEv"]
            pub fn SBProcess_GetPluginName(
                this: *mut root::lldb::SBProcess,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess18GetShortPluginNameEv"]
            pub fn SBProcess_GetShortPluginName(
                this: *mut root::lldb::SBProcess,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess5ClearEv"]
            pub fn SBProcess_Clear(this: *mut root::lldb::SBProcess);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBProcess7IsValidEv"]
            pub fn SBProcess_IsValid(this: *const root::lldb::SBProcess) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBProcess9GetTargetEv"]
            pub fn SBProcess_GetTarget(this: *const root::lldb::SBProcess) -> root::lldb::SBTarget;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBProcess12GetByteOrderEv"]
            pub fn SBProcess_GetByteOrder(
                this: *const root::lldb::SBProcess,
            ) -> root::lldb::ByteOrder;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess8PutSTDINEPKcm"]
            pub fn SBProcess_PutSTDIN(
                this: *mut root::lldb::SBProcess,
                src: *const ::std::os::raw::c_char,
                src_len: usize,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBProcess9GetSTDOUTEPcm"]
            pub fn SBProcess_GetSTDOUT(
                this: *const root::lldb::SBProcess,
                dst: *mut ::std::os::raw::c_char,
                dst_len: usize,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBProcess9GetSTDERREPcm"]
            pub fn SBProcess_GetSTDERR(
                this: *const root::lldb::SBProcess,
                dst: *mut ::std::os::raw::c_char,
                dst_len: usize,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBProcess19GetAsyncProfileDataEPcm"]
            pub fn SBProcess_GetAsyncProfileData(
                this: *const root::lldb::SBProcess,
                dst: *mut ::std::os::raw::c_char,
                dst_len: usize,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBProcess16ReportEventStateERKNS_7SBEventEP8_IO_FILE"]
            pub fn SBProcess_ReportEventState(
                this: *const root::lldb::SBProcess,
                event: *const root::lldb::SBEvent,
                out: *mut root::FILE,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBProcess16ReportEventStateERKNS_7SBEventENS_6SBFileE"]
            pub fn SBProcess_ReportEventState1(
                this: *const root::lldb::SBProcess,
                event: *const root::lldb::SBEvent,
                file: root::lldb::SBFile,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBProcess16ReportEventStateERKNS_7SBEventESt10shared_ptrIN12lldb_private4FileEE"]
            pub fn SBProcess_ReportEventState2(
                this: *const root::lldb::SBProcess,
                event: *const root::lldb::SBEvent,
                BORROWED: root::lldb::FileSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess22AppendEventStateReportERKNS_7SBEventERNS_21SBCommandReturnObjectE"]
            pub fn SBProcess_AppendEventStateReport(
                this: *mut root::lldb::SBProcess,
                event: *const root::lldb::SBEvent,
                result: *mut root::lldb::SBCommandReturnObject,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess27RemoteAttachToProcessWithIDEmRNS_7SBErrorE"]
            pub fn SBProcess_RemoteAttachToProcessWithID(
                this: *mut root::lldb::SBProcess,
                pid: root::lldb::pid_t,
                error: *mut root::lldb::SBError,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess12RemoteLaunchEPPKcS3_S2_S2_S2_S2_jbRNS_7SBErrorE"]
            pub fn SBProcess_RemoteLaunch(
                this: *mut root::lldb::SBProcess,
                argv: *mut *const ::std::os::raw::c_char,
                envp: *mut *const ::std::os::raw::c_char,
                stdin_path: *const ::std::os::raw::c_char,
                stdout_path: *const ::std::os::raw::c_char,
                stderr_path: *const ::std::os::raw::c_char,
                working_directory: *const ::std::os::raw::c_char,
                launch_flags: u32,
                stop_at_entry: bool,
                error: *mut root::lldb::SBError,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess13GetNumThreadsEv"]
            pub fn SBProcess_GetNumThreads(this: *mut root::lldb::SBProcess) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess16GetThreadAtIndexEm"]
            pub fn SBProcess_GetThreadAtIndex(
                this: *mut root::lldb::SBProcess,
                index: usize,
            ) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess13GetThreadByIDEm"]
            pub fn SBProcess_GetThreadByID(
                this: *mut root::lldb::SBProcess,
                sb_thread_id: root::lldb::tid_t,
            ) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess18GetThreadByIndexIDEj"]
            pub fn SBProcess_GetThreadByIndexID(
                this: *mut root::lldb::SBProcess,
                index_id: u32,
            ) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBProcess17GetSelectedThreadEv"]
            pub fn SBProcess_GetSelectedThread(
                this: *const root::lldb::SBProcess,
            ) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess20CreateOSPluginThreadEmm"]
            pub fn SBProcess_CreateOSPluginThread(
                this: *mut root::lldb::SBProcess,
                tid: root::lldb::tid_t,
                context: root::lldb::addr_t,
            ) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess17SetSelectedThreadERKNS_8SBThreadE"]
            pub fn SBProcess_SetSelectedThread(
                this: *mut root::lldb::SBProcess,
                thread: *const root::lldb::SBThread,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess21SetSelectedThreadByIDEm"]
            pub fn SBProcess_SetSelectedThreadByID(
                this: *mut root::lldb::SBProcess,
                tid: root::lldb::tid_t,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess26SetSelectedThreadByIndexIDEj"]
            pub fn SBProcess_SetSelectedThreadByIndexID(
                this: *mut root::lldb::SBProcess,
                index_id: u32,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess12GetNumQueuesEv"]
            pub fn SBProcess_GetNumQueues(this: *mut root::lldb::SBProcess) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess15GetQueueAtIndexEm"]
            pub fn SBProcess_GetQueueAtIndex(
                this: *mut root::lldb::SBProcess,
                index: usize,
            ) -> root::lldb::SBQueue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess8GetStateEv"]
            pub fn SBProcess_GetState(this: *mut root::lldb::SBProcess) -> root::lldb::StateType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess13GetExitStatusEv"]
            pub fn SBProcess_GetExitStatus(
                this: *mut root::lldb::SBProcess,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess18GetExitDescriptionEv"]
            pub fn SBProcess_GetExitDescription(
                this: *mut root::lldb::SBProcess,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess12GetProcessIDEv"]
            pub fn SBProcess_GetProcessID(this: *mut root::lldb::SBProcess) -> root::lldb::pid_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess11GetUniqueIDEv"]
            pub fn SBProcess_GetUniqueID(this: *mut root::lldb::SBProcess) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBProcess18GetAddressByteSizeEv"]
            pub fn SBProcess_GetAddressByteSize(this: *const root::lldb::SBProcess) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess7DestroyEv"]
            pub fn SBProcess_Destroy(this: *mut root::lldb::SBProcess) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess8ContinueEv"]
            pub fn SBProcess_Continue(this: *mut root::lldb::SBProcess) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess4StopEv"]
            pub fn SBProcess_Stop(this: *mut root::lldb::SBProcess) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess4KillEv"]
            pub fn SBProcess_Kill(this: *mut root::lldb::SBProcess) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess6DetachEv"]
            pub fn SBProcess_Detach(this: *mut root::lldb::SBProcess) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess6DetachEb"]
            pub fn SBProcess_Detach1(
                this: *mut root::lldb::SBProcess,
                keep_stopped: bool,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess6SignalEi"]
            pub fn SBProcess_Signal(
                this: *mut root::lldb::SBProcess,
                signal: ::std::os::raw::c_int,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess14GetUnixSignalsEv"]
            pub fn SBProcess_GetUnixSignals(
                this: *mut root::lldb::SBProcess,
            ) -> root::lldb::SBUnixSignals;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess18SendAsyncInterruptEv"]
            pub fn SBProcess_SendAsyncInterrupt(this: *mut root::lldb::SBProcess);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess9GetStopIDEb"]
            pub fn SBProcess_GetStopID(
                this: *mut root::lldb::SBProcess,
                include_expression_stops: bool,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess21GetStopEventForStopIDEj"]
            pub fn SBProcess_GetStopEventForStopID(
                this: *mut root::lldb::SBProcess,
                stop_id: u32,
            ) -> root::lldb::SBEvent;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess18ForceScriptedStateENS_9StateTypeE"]
            pub fn SBProcess_ForceScriptedState(
                this: *mut root::lldb::SBProcess,
                new_state: root::lldb::StateType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess10ReadMemoryEmPvmRNS_7SBErrorE"]
            pub fn SBProcess_ReadMemory(
                this: *mut root::lldb::SBProcess,
                addr: root::lldb::addr_t,
                buf: *mut ::std::os::raw::c_void,
                size: usize,
                error: *mut root::lldb::SBError,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess11WriteMemoryEmPKvmRNS_7SBErrorE"]
            pub fn SBProcess_WriteMemory(
                this: *mut root::lldb::SBProcess,
                addr: root::lldb::addr_t,
                buf: *const ::std::os::raw::c_void,
                size: usize,
                error: *mut root::lldb::SBError,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess21ReadCStringFromMemoryEmPvmRNS_7SBErrorE"]
            pub fn SBProcess_ReadCStringFromMemory(
                this: *mut root::lldb::SBProcess,
                addr: root::lldb::addr_t,
                char_buf: *mut ::std::os::raw::c_void,
                size: usize,
                error: *mut root::lldb::SBError,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess22ReadUnsignedFromMemoryEmjRNS_7SBErrorE"]
            pub fn SBProcess_ReadUnsignedFromMemory(
                this: *mut root::lldb::SBProcess,
                addr: root::lldb::addr_t,
                byte_size: u32,
                error: *mut root::lldb::SBError,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess21ReadPointerFromMemoryEmRNS_7SBErrorE"]
            pub fn SBProcess_ReadPointerFromMemory(
                this: *mut root::lldb::SBProcess,
                addr: root::lldb::addr_t,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess18FindRangesInMemoryEPKvmRKNS_18SBAddressRangeListEjjRNS_7SBErrorE"]
            pub fn SBProcess_FindRangesInMemory(
                this: *mut root::lldb::SBProcess,
                buf: *const ::std::os::raw::c_void,
                size: u64,
                ranges: *const root::lldb::SBAddressRangeList,
                alignment: u32,
                max_matches: u32,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBAddressRangeList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess12FindInMemoryEPKvmRKNS_14SBAddressRangeEjRNS_7SBErrorE"]
            pub fn SBProcess_FindInMemory(
                this: *mut root::lldb::SBProcess,
                buf: *const ::std::os::raw::c_void,
                size: u64,
                range: *const root::lldb::SBAddressRange,
                alignment: u32,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess17GetStateFromEventERKNS_7SBEventE"]
            pub fn SBProcess_GetStateFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::StateType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess21GetRestartedFromEventERKNS_7SBEventE"]
            pub fn SBProcess_GetRestartedFromEvent(event: *const root::lldb::SBEvent) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess31GetNumRestartedReasonsFromEventERKNS_7SBEventE"]
            pub fn SBProcess_GetNumRestartedReasonsFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess34GetRestartedReasonAtIndexFromEventERKNS_7SBEventEm"]
            pub fn SBProcess_GetRestartedReasonAtIndexFromEvent(
                event: *const root::lldb::SBEvent,
                idx: usize,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess19GetProcessFromEventERKNS_7SBEventE"]
            pub fn SBProcess_GetProcessFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess23GetInterruptedFromEventERKNS_7SBEventE"]
            pub fn SBProcess_GetInterruptedFromEvent(event: *const root::lldb::SBEvent) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess26GetStructuredDataFromEventERKNS_7SBEventE"]
            pub fn SBProcess_GetStructuredDataFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess19EventIsProcessEventERKNS_7SBEventE"]
            pub fn SBProcess_EventIsProcessEvent(event: *const root::lldb::SBEvent) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess26EventIsStructuredDataEventERKNS_7SBEventE"]
            pub fn SBProcess_EventIsStructuredDataEvent(event: *const root::lldb::SBEvent) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBProcess14GetBroadcasterEv"]
            pub fn SBProcess_GetBroadcaster(
                this: *const root::lldb::SBProcess,
            ) -> root::lldb::SBBroadcaster;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess19GetBroadcasterClassEv"]
            pub fn SBProcess_GetBroadcasterClass() -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess14GetDescriptionERNS_8SBStreamE"]
            pub fn SBProcess_GetDescription(
                this: *mut root::lldb::SBProcess,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess27GetExtendedCrashInformationEv"]
            pub fn SBProcess_GetExtendedCrashInformation(
                this: *mut root::lldb::SBProcess,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBProcess34GetNumSupportedHardwareWatchpointsERNS_7SBErrorE"]
            pub fn SBProcess_GetNumSupportedHardwareWatchpoints(
                this: *const root::lldb::SBProcess,
                error: *mut root::lldb::SBError,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess9LoadImageERNS_10SBFileSpecERNS_7SBErrorE"]
            pub fn SBProcess_LoadImage(
                this: *mut root::lldb::SBProcess,
                remote_image_spec: *mut root::lldb::SBFileSpec,
                error: *mut root::lldb::SBError,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess9LoadImageERKNS_10SBFileSpecES3_RNS_7SBErrorE"]
            pub fn SBProcess_LoadImage1(
                this: *mut root::lldb::SBProcess,
                local_image_spec: *const root::lldb::SBFileSpec,
                remote_image_spec: *const root::lldb::SBFileSpec,
                error: *mut root::lldb::SBError,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess19LoadImageUsingPathsERKNS_10SBFileSpecERNS_12SBStringListERS1_RNS_7SBErrorE"]
            pub fn SBProcess_LoadImageUsingPaths(
                this: *mut root::lldb::SBProcess,
                image_spec: *const root::lldb::SBFileSpec,
                paths: *mut root::lldb::SBStringList,
                loaded_path: *mut root::lldb::SBFileSpec,
                error: *mut root::lldb::SBError,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess11UnloadImageEj"]
            pub fn SBProcess_UnloadImage(
                this: *mut root::lldb::SBProcess,
                image_token: u32,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess13SendEventDataEPKc"]
            pub fn SBProcess_SendEventData(
                this: *mut root::lldb::SBProcess,
                data: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess28GetNumExtendedBacktraceTypesEv"]
            pub fn SBProcess_GetNumExtendedBacktraceTypes(this: *mut root::lldb::SBProcess) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess31GetExtendedBacktraceTypeAtIndexEj"]
            pub fn SBProcess_GetExtendedBacktraceTypeAtIndex(
                this: *mut root::lldb::SBProcess,
                idx: u32,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess17GetHistoryThreadsEm"]
            pub fn SBProcess_GetHistoryThreads(
                this: *mut root::lldb::SBProcess,
                addr: root::lldb::addr_t,
            ) -> root::lldb::SBThreadCollection;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess31IsInstrumentationRuntimePresentENS_26InstrumentationRuntimeTypeE"]
            pub fn SBProcess_IsInstrumentationRuntimePresent(
                this: *mut root::lldb::SBProcess,
                type_: root::lldb::InstrumentationRuntimeType,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess8SaveCoreEPKcS2_NS_13SaveCoreStyleE"]
            pub fn SBProcess_SaveCore(
                this: *mut root::lldb::SBProcess,
                file_name: *const ::std::os::raw::c_char,
                flavor: *const ::std::os::raw::c_char,
                core_style: root::lldb::SaveCoreStyle,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess8SaveCoreEPKc"]
            pub fn SBProcess_SaveCore1(
                this: *mut root::lldb::SBProcess,
                file_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess8SaveCoreERNS_17SBSaveCoreOptionsE"]
            pub fn SBProcess_SaveCore2(
                this: *mut root::lldb::SBProcess,
                options: *mut root::lldb::SBSaveCoreOptions,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess19GetMemoryRegionInfoEmRNS_18SBMemoryRegionInfoE"]
            pub fn SBProcess_GetMemoryRegionInfo(
                this: *mut root::lldb::SBProcess,
                load_addr: root::lldb::addr_t,
                region_info: *mut root::lldb::SBMemoryRegionInfo,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess16GetMemoryRegionsEv"]
            pub fn SBProcess_GetMemoryRegions(
                this: *mut root::lldb::SBProcess,
            ) -> root::lldb::SBMemoryRegionInfoList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess14GetProcessInfoEv"]
            pub fn SBProcess_GetProcessInfo(
                this: *mut root::lldb::SBProcess,
            ) -> root::lldb::SBProcessInfo;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess11GetCoreFileEv"]
            pub fn SBProcess_GetCoreFile(
                this: *mut root::lldb::SBProcess,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess14GetAddressMaskENS_15AddressMaskTypeENS_16AddressMaskRangeE"]
            pub fn SBProcess_GetAddressMask(
                this: *mut root::lldb::SBProcess,
                type_: root::lldb::AddressMaskType,
                addr_range: root::lldb::AddressMaskRange,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess14SetAddressMaskENS_15AddressMaskTypeEmNS_16AddressMaskRangeE"]
            pub fn SBProcess_SetAddressMask(
                this: *mut root::lldb::SBProcess,
                type_: root::lldb::AddressMaskType,
                mask: root::lldb::addr_t,
                addr_range: root::lldb::AddressMaskRange,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess18SetAddressableBitsENS_15AddressMaskTypeEjNS_16AddressMaskRangeE"]
            pub fn SBProcess_SetAddressableBits(
                this: *mut root::lldb::SBProcess,
                type_: root::lldb::AddressMaskType,
                num_bits: u32,
                addr_range: root::lldb::AddressMaskRange,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess10FixAddressEmNS_15AddressMaskTypeE"]
            pub fn SBProcess_FixAddress(
                this: *mut root::lldb::SBProcess,
                addr: root::lldb::addr_t,
                type_: root::lldb::AddressMaskType,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess14AllocateMemoryEmjRNS_7SBErrorE"]
            pub fn SBProcess_AllocateMemory(
                this: *mut root::lldb::SBProcess,
                size: usize,
                permissions: u32,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess16DeallocateMemoryEm"]
            pub fn SBProcess_DeallocateMemory(
                this: *mut root::lldb::SBProcess,
                ptr: root::lldb::addr_t,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess25GetScriptedImplementationEv"]
            pub fn SBProcess_GetScriptedImplementation(
                this: *mut root::lldb::SBProcess,
            ) -> root::lldb::SBScriptObject;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess9GetStatusERNS_8SBStreamE"]
            pub fn SBProcess_GetStatus(
                this: *mut root::lldb::SBProcess,
                status: *mut root::lldb::SBStream,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb9SBProcess5GetSPEv"]
            pub fn SBProcess_GetSP(this: *const root::lldb::SBProcess) -> root::lldb::ProcessSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcess5SetSPERKSt10shared_ptrIN12lldb_private7ProcessEE"]
            pub fn SBProcess_SetSP(
                this: *mut root::lldb::SBProcess,
                process_sp: *const root::lldb::ProcessSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcessC1Ev"]
            pub fn SBProcess_SBProcess(this: *mut root::lldb::SBProcess);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcessC1ERKS0_"]
            pub fn SBProcess_SBProcess1(
                this: *mut root::lldb::SBProcess,
                rhs: *const root::lldb::SBProcess,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcessC1ERKSt10shared_ptrIN12lldb_private7ProcessEE"]
            pub fn SBProcess_SBProcess2(
                this: *mut root::lldb::SBProcess,
                process_sp: *const root::lldb::ProcessSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBProcessD1Ev"]
            pub fn SBProcess_SBProcess_destructor(this: *mut root::lldb::SBProcess);
        }
        impl SBProcess {
            #[inline]
            pub unsafe fn GetBroadcasterClassName() -> *const ::std::os::raw::c_char {
                SBProcess_GetBroadcasterClassName()
            }
            #[inline]
            pub unsafe fn GetPluginName(&mut self) -> *const ::std::os::raw::c_char {
                SBProcess_GetPluginName(self)
            }
            #[inline]
            pub unsafe fn GetShortPluginName(&mut self) -> *const ::std::os::raw::c_char {
                SBProcess_GetShortPluginName(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBProcess_Clear(self)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBProcess_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetTarget(&self) -> root::lldb::SBTarget {
                SBProcess_GetTarget(self)
            }
            #[inline]
            pub unsafe fn GetByteOrder(&self) -> root::lldb::ByteOrder {
                SBProcess_GetByteOrder(self)
            }
            #[inline]
            pub unsafe fn PutSTDIN(
                &mut self,
                src: *const ::std::os::raw::c_char,
                src_len: usize,
            ) -> usize {
                SBProcess_PutSTDIN(self, src, src_len)
            }
            #[inline]
            pub unsafe fn GetSTDOUT(
                &self,
                dst: *mut ::std::os::raw::c_char,
                dst_len: usize,
            ) -> usize {
                SBProcess_GetSTDOUT(self, dst, dst_len)
            }
            #[inline]
            pub unsafe fn GetSTDERR(
                &self,
                dst: *mut ::std::os::raw::c_char,
                dst_len: usize,
            ) -> usize {
                SBProcess_GetSTDERR(self, dst, dst_len)
            }
            #[inline]
            pub unsafe fn GetAsyncProfileData(
                &self,
                dst: *mut ::std::os::raw::c_char,
                dst_len: usize,
            ) -> usize {
                SBProcess_GetAsyncProfileData(self, dst, dst_len)
            }
            #[inline]
            pub unsafe fn ReportEventState(
                &self,
                event: *const root::lldb::SBEvent,
                out: *mut root::FILE,
            ) {
                SBProcess_ReportEventState(self, event, out)
            }
            #[inline]
            pub unsafe fn ReportEventState1(
                &self,
                event: *const root::lldb::SBEvent,
                file: root::lldb::SBFile,
            ) {
                SBProcess_ReportEventState1(self, event, file)
            }
            #[inline]
            pub unsafe fn ReportEventState2(
                &self,
                event: *const root::lldb::SBEvent,
                BORROWED: root::lldb::FileSP,
            ) {
                SBProcess_ReportEventState2(self, event, BORROWED)
            }
            #[inline]
            pub unsafe fn AppendEventStateReport(
                &mut self,
                event: *const root::lldb::SBEvent,
                result: *mut root::lldb::SBCommandReturnObject,
            ) {
                SBProcess_AppendEventStateReport(self, event, result)
            }
            #[inline]
            pub unsafe fn RemoteAttachToProcessWithID(
                &mut self,
                pid: root::lldb::pid_t,
                error: *mut root::lldb::SBError,
            ) -> bool {
                SBProcess_RemoteAttachToProcessWithID(self, pid, error)
            }
            #[inline]
            pub unsafe fn RemoteLaunch(
                &mut self,
                argv: *mut *const ::std::os::raw::c_char,
                envp: *mut *const ::std::os::raw::c_char,
                stdin_path: *const ::std::os::raw::c_char,
                stdout_path: *const ::std::os::raw::c_char,
                stderr_path: *const ::std::os::raw::c_char,
                working_directory: *const ::std::os::raw::c_char,
                launch_flags: u32,
                stop_at_entry: bool,
                error: *mut root::lldb::SBError,
            ) -> bool {
                SBProcess_RemoteLaunch(
                    self,
                    argv,
                    envp,
                    stdin_path,
                    stdout_path,
                    stderr_path,
                    working_directory,
                    launch_flags,
                    stop_at_entry,
                    error,
                )
            }
            #[inline]
            pub unsafe fn GetNumThreads(&mut self) -> u32 {
                SBProcess_GetNumThreads(self)
            }
            #[inline]
            pub unsafe fn GetThreadAtIndex(&mut self, index: usize) -> root::lldb::SBThread {
                SBProcess_GetThreadAtIndex(self, index)
            }
            #[inline]
            pub unsafe fn GetThreadByID(
                &mut self,
                sb_thread_id: root::lldb::tid_t,
            ) -> root::lldb::SBThread {
                SBProcess_GetThreadByID(self, sb_thread_id)
            }
            #[inline]
            pub unsafe fn GetThreadByIndexID(&mut self, index_id: u32) -> root::lldb::SBThread {
                SBProcess_GetThreadByIndexID(self, index_id)
            }
            #[inline]
            pub unsafe fn GetSelectedThread(&self) -> root::lldb::SBThread {
                SBProcess_GetSelectedThread(self)
            }
            #[inline]
            pub unsafe fn CreateOSPluginThread(
                &mut self,
                tid: root::lldb::tid_t,
                context: root::lldb::addr_t,
            ) -> root::lldb::SBThread {
                SBProcess_CreateOSPluginThread(self, tid, context)
            }
            #[inline]
            pub unsafe fn SetSelectedThread(
                &mut self,
                thread: *const root::lldb::SBThread,
            ) -> bool {
                SBProcess_SetSelectedThread(self, thread)
            }
            #[inline]
            pub unsafe fn SetSelectedThreadByID(&mut self, tid: root::lldb::tid_t) -> bool {
                SBProcess_SetSelectedThreadByID(self, tid)
            }
            #[inline]
            pub unsafe fn SetSelectedThreadByIndexID(&mut self, index_id: u32) -> bool {
                SBProcess_SetSelectedThreadByIndexID(self, index_id)
            }
            #[inline]
            pub unsafe fn GetNumQueues(&mut self) -> u32 {
                SBProcess_GetNumQueues(self)
            }
            #[inline]
            pub unsafe fn GetQueueAtIndex(&mut self, index: usize) -> root::lldb::SBQueue {
                SBProcess_GetQueueAtIndex(self, index)
            }
            #[inline]
            pub unsafe fn GetState(&mut self) -> root::lldb::StateType {
                SBProcess_GetState(self)
            }
            #[inline]
            pub unsafe fn GetExitStatus(&mut self) -> ::std::os::raw::c_int {
                SBProcess_GetExitStatus(self)
            }
            #[inline]
            pub unsafe fn GetExitDescription(&mut self) -> *const ::std::os::raw::c_char {
                SBProcess_GetExitDescription(self)
            }
            #[inline]
            pub unsafe fn GetProcessID(&mut self) -> root::lldb::pid_t {
                SBProcess_GetProcessID(self)
            }
            #[inline]
            pub unsafe fn GetUniqueID(&mut self) -> u32 {
                SBProcess_GetUniqueID(self)
            }
            #[inline]
            pub unsafe fn GetAddressByteSize(&self) -> u32 {
                SBProcess_GetAddressByteSize(self)
            }
            #[inline]
            pub unsafe fn Destroy(&mut self) -> root::lldb::SBError {
                SBProcess_Destroy(self)
            }
            #[inline]
            pub unsafe fn Continue(&mut self) -> root::lldb::SBError {
                SBProcess_Continue(self)
            }
            #[inline]
            pub unsafe fn Stop(&mut self) -> root::lldb::SBError {
                SBProcess_Stop(self)
            }
            #[inline]
            pub unsafe fn Kill(&mut self) -> root::lldb::SBError {
                SBProcess_Kill(self)
            }
            #[inline]
            pub unsafe fn Detach(&mut self) -> root::lldb::SBError {
                SBProcess_Detach(self)
            }
            #[inline]
            pub unsafe fn Detach1(&mut self, keep_stopped: bool) -> root::lldb::SBError {
                SBProcess_Detach1(self, keep_stopped)
            }
            #[inline]
            pub unsafe fn Signal(&mut self, signal: ::std::os::raw::c_int) -> root::lldb::SBError {
                SBProcess_Signal(self, signal)
            }
            #[inline]
            pub unsafe fn GetUnixSignals(&mut self) -> root::lldb::SBUnixSignals {
                SBProcess_GetUnixSignals(self)
            }
            #[inline]
            pub unsafe fn SendAsyncInterrupt(&mut self) {
                SBProcess_SendAsyncInterrupt(self)
            }
            #[inline]
            pub unsafe fn GetStopID(&mut self, include_expression_stops: bool) -> u32 {
                SBProcess_GetStopID(self, include_expression_stops)
            }
            #[inline]
            pub unsafe fn GetStopEventForStopID(&mut self, stop_id: u32) -> root::lldb::SBEvent {
                SBProcess_GetStopEventForStopID(self, stop_id)
            }
            #[inline]
            pub unsafe fn ForceScriptedState(&mut self, new_state: root::lldb::StateType) {
                SBProcess_ForceScriptedState(self, new_state)
            }
            #[inline]
            pub unsafe fn ReadMemory(
                &mut self,
                addr: root::lldb::addr_t,
                buf: *mut ::std::os::raw::c_void,
                size: usize,
                error: *mut root::lldb::SBError,
            ) -> usize {
                SBProcess_ReadMemory(self, addr, buf, size, error)
            }
            #[inline]
            pub unsafe fn WriteMemory(
                &mut self,
                addr: root::lldb::addr_t,
                buf: *const ::std::os::raw::c_void,
                size: usize,
                error: *mut root::lldb::SBError,
            ) -> usize {
                SBProcess_WriteMemory(self, addr, buf, size, error)
            }
            #[inline]
            pub unsafe fn ReadCStringFromMemory(
                &mut self,
                addr: root::lldb::addr_t,
                char_buf: *mut ::std::os::raw::c_void,
                size: usize,
                error: *mut root::lldb::SBError,
            ) -> usize {
                SBProcess_ReadCStringFromMemory(self, addr, char_buf, size, error)
            }
            #[inline]
            pub unsafe fn ReadUnsignedFromMemory(
                &mut self,
                addr: root::lldb::addr_t,
                byte_size: u32,
                error: *mut root::lldb::SBError,
            ) -> u64 {
                SBProcess_ReadUnsignedFromMemory(self, addr, byte_size, error)
            }
            #[inline]
            pub unsafe fn ReadPointerFromMemory(
                &mut self,
                addr: root::lldb::addr_t,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::addr_t {
                SBProcess_ReadPointerFromMemory(self, addr, error)
            }
            #[inline]
            pub unsafe fn FindRangesInMemory(
                &mut self,
                buf: *const ::std::os::raw::c_void,
                size: u64,
                ranges: *const root::lldb::SBAddressRangeList,
                alignment: u32,
                max_matches: u32,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBAddressRangeList {
                SBProcess_FindRangesInMemory(self, buf, size, ranges, alignment, max_matches, error)
            }
            #[inline]
            pub unsafe fn FindInMemory(
                &mut self,
                buf: *const ::std::os::raw::c_void,
                size: u64,
                range: *const root::lldb::SBAddressRange,
                alignment: u32,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::addr_t {
                SBProcess_FindInMemory(self, buf, size, range, alignment, error)
            }
            #[inline]
            pub unsafe fn GetStateFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::StateType {
                SBProcess_GetStateFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetRestartedFromEvent(event: *const root::lldb::SBEvent) -> bool {
                SBProcess_GetRestartedFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetNumRestartedReasonsFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> usize {
                SBProcess_GetNumRestartedReasonsFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetRestartedReasonAtIndexFromEvent(
                event: *const root::lldb::SBEvent,
                idx: usize,
            ) -> *const ::std::os::raw::c_char {
                SBProcess_GetRestartedReasonAtIndexFromEvent(event, idx)
            }
            #[inline]
            pub unsafe fn GetProcessFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBProcess {
                SBProcess_GetProcessFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetInterruptedFromEvent(event: *const root::lldb::SBEvent) -> bool {
                SBProcess_GetInterruptedFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetStructuredDataFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBStructuredData {
                SBProcess_GetStructuredDataFromEvent(event)
            }
            #[inline]
            pub unsafe fn EventIsProcessEvent(event: *const root::lldb::SBEvent) -> bool {
                SBProcess_EventIsProcessEvent(event)
            }
            #[inline]
            pub unsafe fn EventIsStructuredDataEvent(event: *const root::lldb::SBEvent) -> bool {
                SBProcess_EventIsStructuredDataEvent(event)
            }
            #[inline]
            pub unsafe fn GetBroadcaster(&self) -> root::lldb::SBBroadcaster {
                SBProcess_GetBroadcaster(self)
            }
            #[inline]
            pub unsafe fn GetBroadcasterClass() -> *const ::std::os::raw::c_char {
                SBProcess_GetBroadcasterClass()
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBProcess_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn GetExtendedCrashInformation(&mut self) -> root::lldb::SBStructuredData {
                SBProcess_GetExtendedCrashInformation(self)
            }
            #[inline]
            pub unsafe fn GetNumSupportedHardwareWatchpoints(
                &self,
                error: *mut root::lldb::SBError,
            ) -> u32 {
                SBProcess_GetNumSupportedHardwareWatchpoints(self, error)
            }
            #[inline]
            pub unsafe fn LoadImage(
                &mut self,
                remote_image_spec: *mut root::lldb::SBFileSpec,
                error: *mut root::lldb::SBError,
            ) -> u32 {
                SBProcess_LoadImage(self, remote_image_spec, error)
            }
            #[inline]
            pub unsafe fn LoadImage1(
                &mut self,
                local_image_spec: *const root::lldb::SBFileSpec,
                remote_image_spec: *const root::lldb::SBFileSpec,
                error: *mut root::lldb::SBError,
            ) -> u32 {
                SBProcess_LoadImage1(self, local_image_spec, remote_image_spec, error)
            }
            #[inline]
            pub unsafe fn LoadImageUsingPaths(
                &mut self,
                image_spec: *const root::lldb::SBFileSpec,
                paths: *mut root::lldb::SBStringList,
                loaded_path: *mut root::lldb::SBFileSpec,
                error: *mut root::lldb::SBError,
            ) -> u32 {
                SBProcess_LoadImageUsingPaths(self, image_spec, paths, loaded_path, error)
            }
            #[inline]
            pub unsafe fn UnloadImage(&mut self, image_token: u32) -> root::lldb::SBError {
                SBProcess_UnloadImage(self, image_token)
            }
            #[inline]
            pub unsafe fn SendEventData(
                &mut self,
                data: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError {
                SBProcess_SendEventData(self, data)
            }
            #[inline]
            pub unsafe fn GetNumExtendedBacktraceTypes(&mut self) -> u32 {
                SBProcess_GetNumExtendedBacktraceTypes(self)
            }
            #[inline]
            pub unsafe fn GetExtendedBacktraceTypeAtIndex(
                &mut self,
                idx: u32,
            ) -> *const ::std::os::raw::c_char {
                SBProcess_GetExtendedBacktraceTypeAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetHistoryThreads(
                &mut self,
                addr: root::lldb::addr_t,
            ) -> root::lldb::SBThreadCollection {
                SBProcess_GetHistoryThreads(self, addr)
            }
            #[inline]
            pub unsafe fn IsInstrumentationRuntimePresent(
                &mut self,
                type_: root::lldb::InstrumentationRuntimeType,
            ) -> bool {
                SBProcess_IsInstrumentationRuntimePresent(self, type_)
            }
            #[inline]
            pub unsafe fn SaveCore(
                &mut self,
                file_name: *const ::std::os::raw::c_char,
                flavor: *const ::std::os::raw::c_char,
                core_style: root::lldb::SaveCoreStyle,
            ) -> root::lldb::SBError {
                SBProcess_SaveCore(self, file_name, flavor, core_style)
            }
            #[inline]
            pub unsafe fn SaveCore1(
                &mut self,
                file_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError {
                SBProcess_SaveCore1(self, file_name)
            }
            #[inline]
            pub unsafe fn SaveCore2(
                &mut self,
                options: *mut root::lldb::SBSaveCoreOptions,
            ) -> root::lldb::SBError {
                SBProcess_SaveCore2(self, options)
            }
            #[inline]
            pub unsafe fn GetMemoryRegionInfo(
                &mut self,
                load_addr: root::lldb::addr_t,
                region_info: *mut root::lldb::SBMemoryRegionInfo,
            ) -> root::lldb::SBError {
                SBProcess_GetMemoryRegionInfo(self, load_addr, region_info)
            }
            #[inline]
            pub unsafe fn GetMemoryRegions(&mut self) -> root::lldb::SBMemoryRegionInfoList {
                SBProcess_GetMemoryRegions(self)
            }
            #[inline]
            pub unsafe fn GetProcessInfo(&mut self) -> root::lldb::SBProcessInfo {
                SBProcess_GetProcessInfo(self)
            }
            #[inline]
            pub unsafe fn GetCoreFile(&mut self) -> root::lldb::SBFileSpec {
                SBProcess_GetCoreFile(self)
            }
            #[inline]
            pub unsafe fn GetAddressMask(
                &mut self,
                type_: root::lldb::AddressMaskType,
                addr_range: root::lldb::AddressMaskRange,
            ) -> root::lldb::addr_t {
                SBProcess_GetAddressMask(self, type_, addr_range)
            }
            #[inline]
            pub unsafe fn SetAddressMask(
                &mut self,
                type_: root::lldb::AddressMaskType,
                mask: root::lldb::addr_t,
                addr_range: root::lldb::AddressMaskRange,
            ) {
                SBProcess_SetAddressMask(self, type_, mask, addr_range)
            }
            #[inline]
            pub unsafe fn SetAddressableBits(
                &mut self,
                type_: root::lldb::AddressMaskType,
                num_bits: u32,
                addr_range: root::lldb::AddressMaskRange,
            ) {
                SBProcess_SetAddressableBits(self, type_, num_bits, addr_range)
            }
            #[inline]
            pub unsafe fn FixAddress(
                &mut self,
                addr: root::lldb::addr_t,
                type_: root::lldb::AddressMaskType,
            ) -> root::lldb::addr_t {
                SBProcess_FixAddress(self, addr, type_)
            }
            #[inline]
            pub unsafe fn AllocateMemory(
                &mut self,
                size: usize,
                permissions: u32,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::addr_t {
                SBProcess_AllocateMemory(self, size, permissions, error)
            }
            #[inline]
            pub unsafe fn DeallocateMemory(
                &mut self,
                ptr: root::lldb::addr_t,
            ) -> root::lldb::SBError {
                SBProcess_DeallocateMemory(self, ptr)
            }
            #[inline]
            pub unsafe fn GetScriptedImplementation(&mut self) -> root::lldb::SBScriptObject {
                SBProcess_GetScriptedImplementation(self)
            }
            #[inline]
            pub unsafe fn GetStatus(&mut self, status: *mut root::lldb::SBStream) {
                SBProcess_GetStatus(self, status)
            }
            #[inline]
            pub unsafe fn GetSP(&self) -> root::lldb::ProcessSP {
                SBProcess_GetSP(self)
            }
            #[inline]
            pub unsafe fn SetSP(&mut self, process_sp: *const root::lldb::ProcessSP) {
                SBProcess_SetSP(self, process_sp)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBProcess_SBProcess(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBProcess) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBProcess_SBProcess1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(process_sp: *const root::lldb::ProcessSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBProcess_SBProcess2(__bindgen_tmp.as_mut_ptr(), process_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBProcess_SBProcess_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBProcessInfoList {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb17SBProcessInfoList7GetSizeEv"]
            pub fn SBProcessInfoList_GetSize(this: *const root::lldb::SBProcessInfoList) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBProcessInfoList21GetProcessInfoAtIndexEjRNS_13SBProcessInfoE"]
            pub fn SBProcessInfoList_GetProcessInfoAtIndex(
                this: *mut root::lldb::SBProcessInfoList,
                idx: u32,
                info: *mut root::lldb::SBProcessInfo,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBProcessInfoList5ClearEv"]
            pub fn SBProcessInfoList_Clear(this: *mut root::lldb::SBProcessInfoList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBProcessInfoListC1Ev"]
            pub fn SBProcessInfoList_SBProcessInfoList(this: *mut root::lldb::SBProcessInfoList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBProcessInfoListC1ERKS0_"]
            pub fn SBProcessInfoList_SBProcessInfoList1(
                this: *mut root::lldb::SBProcessInfoList,
                rhs: *const root::lldb::SBProcessInfoList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBProcessInfoListD1Ev"]
            pub fn SBProcessInfoList_SBProcessInfoList_destructor(
                this: *mut root::lldb::SBProcessInfoList,
            );
        }
        impl SBProcessInfoList {
            #[inline]
            pub unsafe fn GetSize(&self) -> u32 {
                SBProcessInfoList_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetProcessInfoAtIndex(
                &mut self,
                idx: u32,
                info: *mut root::lldb::SBProcessInfo,
            ) -> bool {
                SBProcessInfoList_GetProcessInfoAtIndex(self, idx, info)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBProcessInfoList_Clear(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBProcessInfoList_SBProcessInfoList(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBProcessInfoList) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBProcessInfoList_SBProcessInfoList1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBProcessInfoList_SBProcessInfoList_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBPlatformConnectOptions {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb24SBPlatformConnectOptions6GetURLEv"]
            pub fn SBPlatformConnectOptions_GetURL(
                this: *mut root::lldb::SBPlatformConnectOptions,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb24SBPlatformConnectOptions6SetURLEPKc"]
            pub fn SBPlatformConnectOptions_SetURL(
                this: *mut root::lldb::SBPlatformConnectOptions,
                url: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb24SBPlatformConnectOptions15GetRsyncEnabledEv"]
            pub fn SBPlatformConnectOptions_GetRsyncEnabled(
                this: *mut root::lldb::SBPlatformConnectOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb24SBPlatformConnectOptions11EnableRsyncEPKcS2_b"]
            pub fn SBPlatformConnectOptions_EnableRsync(
                this: *mut root::lldb::SBPlatformConnectOptions,
                options: *const ::std::os::raw::c_char,
                remote_path_prefix: *const ::std::os::raw::c_char,
                omit_remote_hostname: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb24SBPlatformConnectOptions12DisableRsyncEv"]
            pub fn SBPlatformConnectOptions_DisableRsync(
                this: *mut root::lldb::SBPlatformConnectOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb24SBPlatformConnectOptions22GetLocalCacheDirectoryEv"]
            pub fn SBPlatformConnectOptions_GetLocalCacheDirectory(
                this: *mut root::lldb::SBPlatformConnectOptions,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb24SBPlatformConnectOptions22SetLocalCacheDirectoryEPKc"]
            pub fn SBPlatformConnectOptions_SetLocalCacheDirectory(
                this: *mut root::lldb::SBPlatformConnectOptions,
                path: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb24SBPlatformConnectOptionsC1EPKc"]
            pub fn SBPlatformConnectOptions_SBPlatformConnectOptions(
                this: *mut root::lldb::SBPlatformConnectOptions,
                url: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb24SBPlatformConnectOptionsC1ERKS0_"]
            pub fn SBPlatformConnectOptions_SBPlatformConnectOptions1(
                this: *mut root::lldb::SBPlatformConnectOptions,
                rhs: *const root::lldb::SBPlatformConnectOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb24SBPlatformConnectOptionsD1Ev"]
            pub fn SBPlatformConnectOptions_SBPlatformConnectOptions_destructor(
                this: *mut root::lldb::SBPlatformConnectOptions,
            );
        }
        impl SBPlatformConnectOptions {
            #[inline]
            pub unsafe fn GetURL(&mut self) -> *const ::std::os::raw::c_char {
                SBPlatformConnectOptions_GetURL(self)
            }
            #[inline]
            pub unsafe fn SetURL(&mut self, url: *const ::std::os::raw::c_char) {
                SBPlatformConnectOptions_SetURL(self, url)
            }
            #[inline]
            pub unsafe fn GetRsyncEnabled(&mut self) -> bool {
                SBPlatformConnectOptions_GetRsyncEnabled(self)
            }
            #[inline]
            pub unsafe fn EnableRsync(
                &mut self,
                options: *const ::std::os::raw::c_char,
                remote_path_prefix: *const ::std::os::raw::c_char,
                omit_remote_hostname: bool,
            ) {
                SBPlatformConnectOptions_EnableRsync(
                    self,
                    options,
                    remote_path_prefix,
                    omit_remote_hostname,
                )
            }
            #[inline]
            pub unsafe fn DisableRsync(&mut self) {
                SBPlatformConnectOptions_DisableRsync(self)
            }
            #[inline]
            pub unsafe fn GetLocalCacheDirectory(&mut self) -> *const ::std::os::raw::c_char {
                SBPlatformConnectOptions_GetLocalCacheDirectory(self)
            }
            #[inline]
            pub unsafe fn SetLocalCacheDirectory(&mut self, path: *const ::std::os::raw::c_char) {
                SBPlatformConnectOptions_SetLocalCacheDirectory(self, path)
            }
            #[inline]
            pub unsafe fn new(url: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBPlatformConnectOptions_SBPlatformConnectOptions(__bindgen_tmp.as_mut_ptr(), url);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBPlatformConnectOptions) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBPlatformConnectOptions_SBPlatformConnectOptions1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBPlatformConnectOptions_SBPlatformConnectOptions_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBPlatformShellCommand {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommand5ClearEv"]
            pub fn SBPlatformShellCommand_Clear(this: *mut root::lldb::SBPlatformShellCommand);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommand8GetShellEv"]
            pub fn SBPlatformShellCommand_GetShell(
                this: *mut root::lldb::SBPlatformShellCommand,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommand8SetShellEPKc"]
            pub fn SBPlatformShellCommand_SetShell(
                this: *mut root::lldb::SBPlatformShellCommand,
                shell: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommand10GetCommandEv"]
            pub fn SBPlatformShellCommand_GetCommand(
                this: *mut root::lldb::SBPlatformShellCommand,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommand10SetCommandEPKc"]
            pub fn SBPlatformShellCommand_SetCommand(
                this: *mut root::lldb::SBPlatformShellCommand,
                shell_command: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommand19GetWorkingDirectoryEv"]
            pub fn SBPlatformShellCommand_GetWorkingDirectory(
                this: *mut root::lldb::SBPlatformShellCommand,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommand19SetWorkingDirectoryEPKc"]
            pub fn SBPlatformShellCommand_SetWorkingDirectory(
                this: *mut root::lldb::SBPlatformShellCommand,
                path: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommand17GetTimeoutSecondsEv"]
            pub fn SBPlatformShellCommand_GetTimeoutSeconds(
                this: *mut root::lldb::SBPlatformShellCommand,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommand17SetTimeoutSecondsEj"]
            pub fn SBPlatformShellCommand_SetTimeoutSeconds(
                this: *mut root::lldb::SBPlatformShellCommand,
                sec: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommand9GetSignalEv"]
            pub fn SBPlatformShellCommand_GetSignal(
                this: *mut root::lldb::SBPlatformShellCommand,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommand9GetStatusEv"]
            pub fn SBPlatformShellCommand_GetStatus(
                this: *mut root::lldb::SBPlatformShellCommand,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommand9GetOutputEv"]
            pub fn SBPlatformShellCommand_GetOutput(
                this: *mut root::lldb::SBPlatformShellCommand,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommandC1EPKcS2_"]
            pub fn SBPlatformShellCommand_SBPlatformShellCommand(
                this: *mut root::lldb::SBPlatformShellCommand,
                shell: *const ::std::os::raw::c_char,
                shell_command: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommandC1EPKc"]
            pub fn SBPlatformShellCommand_SBPlatformShellCommand1(
                this: *mut root::lldb::SBPlatformShellCommand,
                shell_command: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommandC1ERKS0_"]
            pub fn SBPlatformShellCommand_SBPlatformShellCommand2(
                this: *mut root::lldb::SBPlatformShellCommand,
                rhs: *const root::lldb::SBPlatformShellCommand,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBPlatformShellCommandD1Ev"]
            pub fn SBPlatformShellCommand_SBPlatformShellCommand_destructor(
                this: *mut root::lldb::SBPlatformShellCommand,
            );
        }
        impl SBPlatformShellCommand {
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBPlatformShellCommand_Clear(self)
            }
            #[inline]
            pub unsafe fn GetShell(&mut self) -> *const ::std::os::raw::c_char {
                SBPlatformShellCommand_GetShell(self)
            }
            #[inline]
            pub unsafe fn SetShell(&mut self, shell: *const ::std::os::raw::c_char) {
                SBPlatformShellCommand_SetShell(self, shell)
            }
            #[inline]
            pub unsafe fn GetCommand(&mut self) -> *const ::std::os::raw::c_char {
                SBPlatformShellCommand_GetCommand(self)
            }
            #[inline]
            pub unsafe fn SetCommand(&mut self, shell_command: *const ::std::os::raw::c_char) {
                SBPlatformShellCommand_SetCommand(self, shell_command)
            }
            #[inline]
            pub unsafe fn GetWorkingDirectory(&mut self) -> *const ::std::os::raw::c_char {
                SBPlatformShellCommand_GetWorkingDirectory(self)
            }
            #[inline]
            pub unsafe fn SetWorkingDirectory(&mut self, path: *const ::std::os::raw::c_char) {
                SBPlatformShellCommand_SetWorkingDirectory(self, path)
            }
            #[inline]
            pub unsafe fn GetTimeoutSeconds(&mut self) -> u32 {
                SBPlatformShellCommand_GetTimeoutSeconds(self)
            }
            #[inline]
            pub unsafe fn SetTimeoutSeconds(&mut self, sec: u32) {
                SBPlatformShellCommand_SetTimeoutSeconds(self, sec)
            }
            #[inline]
            pub unsafe fn GetSignal(&mut self) -> ::std::os::raw::c_int {
                SBPlatformShellCommand_GetSignal(self)
            }
            #[inline]
            pub unsafe fn GetStatus(&mut self) -> ::std::os::raw::c_int {
                SBPlatformShellCommand_GetStatus(self)
            }
            #[inline]
            pub unsafe fn GetOutput(&mut self) -> *const ::std::os::raw::c_char {
                SBPlatformShellCommand_GetOutput(self)
            }
            #[inline]
            pub unsafe fn new(
                shell: *const ::std::os::raw::c_char,
                shell_command: *const ::std::os::raw::c_char,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBPlatformShellCommand_SBPlatformShellCommand(
                    __bindgen_tmp.as_mut_ptr(),
                    shell,
                    shell_command,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(shell_command: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBPlatformShellCommand_SBPlatformShellCommand1(
                    __bindgen_tmp.as_mut_ptr(),
                    shell_command,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(rhs: *const root::lldb::SBPlatformShellCommand) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBPlatformShellCommand_SBPlatformShellCommand2(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBPlatformShellCommand_SBPlatformShellCommand_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBPlatform {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform15GetHostPlatformEv"]
            pub fn SBPlatform_GetHostPlatform() -> root::lldb::SBPlatform;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBPlatform7IsValidEv"]
            pub fn SBPlatform_IsValid(this: *const root::lldb::SBPlatform) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform5ClearEv"]
            pub fn SBPlatform_Clear(this: *mut root::lldb::SBPlatform);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform19GetWorkingDirectoryEv"]
            pub fn SBPlatform_GetWorkingDirectory(
                this: *mut root::lldb::SBPlatform,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform19SetWorkingDirectoryEPKc"]
            pub fn SBPlatform_SetWorkingDirectory(
                this: *mut root::lldb::SBPlatform,
                path: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform7GetNameEv"]
            pub fn SBPlatform_GetName(
                this: *mut root::lldb::SBPlatform,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform13ConnectRemoteERNS_24SBPlatformConnectOptionsE"]
            pub fn SBPlatform_ConnectRemote(
                this: *mut root::lldb::SBPlatform,
                connect_options: *mut root::lldb::SBPlatformConnectOptions,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform16DisconnectRemoteEv"]
            pub fn SBPlatform_DisconnectRemote(this: *mut root::lldb::SBPlatform);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform11IsConnectedEv"]
            pub fn SBPlatform_IsConnected(this: *mut root::lldb::SBPlatform) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform9GetTripleEv"]
            pub fn SBPlatform_GetTriple(
                this: *mut root::lldb::SBPlatform,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform11GetHostnameEv"]
            pub fn SBPlatform_GetHostname(
                this: *mut root::lldb::SBPlatform,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform10GetOSBuildEv"]
            pub fn SBPlatform_GetOSBuild(
                this: *mut root::lldb::SBPlatform,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform16GetOSDescriptionEv"]
            pub fn SBPlatform_GetOSDescription(
                this: *mut root::lldb::SBPlatform,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform17GetOSMajorVersionEv"]
            pub fn SBPlatform_GetOSMajorVersion(this: *mut root::lldb::SBPlatform) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform17GetOSMinorVersionEv"]
            pub fn SBPlatform_GetOSMinorVersion(this: *mut root::lldb::SBPlatform) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform18GetOSUpdateVersionEv"]
            pub fn SBPlatform_GetOSUpdateVersion(this: *mut root::lldb::SBPlatform) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform10SetSDKRootEPKc"]
            pub fn SBPlatform_SetSDKRoot(
                this: *mut root::lldb::SBPlatform,
                sysroot: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform3PutERNS_10SBFileSpecES2_"]
            pub fn SBPlatform_Put(
                this: *mut root::lldb::SBPlatform,
                src: *mut root::lldb::SBFileSpec,
                dst: *mut root::lldb::SBFileSpec,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform3GetERNS_10SBFileSpecES2_"]
            pub fn SBPlatform_Get(
                this: *mut root::lldb::SBPlatform,
                src: *mut root::lldb::SBFileSpec,
                dst: *mut root::lldb::SBFileSpec,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform7InstallERNS_10SBFileSpecES2_"]
            pub fn SBPlatform_Install(
                this: *mut root::lldb::SBPlatform,
                src: *mut root::lldb::SBFileSpec,
                dst: *mut root::lldb::SBFileSpec,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform3RunERNS_22SBPlatformShellCommandE"]
            pub fn SBPlatform_Run(
                this: *mut root::lldb::SBPlatform,
                shell_command: *mut root::lldb::SBPlatformShellCommand,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform6LaunchERNS_12SBLaunchInfoE"]
            pub fn SBPlatform_Launch(
                this: *mut root::lldb::SBPlatform,
                launch_info: *mut root::lldb::SBLaunchInfo,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform6AttachERNS_12SBAttachInfoERKNS_10SBDebuggerERNS_8SBTargetERNS_7SBErrorE"]
            pub fn SBPlatform_Attach(
                this: *mut root::lldb::SBPlatform,
                attach_info: *mut root::lldb::SBAttachInfo,
                debugger: *const root::lldb::SBDebugger,
                target: *mut root::lldb::SBTarget,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform15GetAllProcessesERNS_7SBErrorE"]
            pub fn SBPlatform_GetAllProcesses(
                this: *mut root::lldb::SBPlatform,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcessInfoList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform4KillEm"]
            pub fn SBPlatform_Kill(
                this: *mut root::lldb::SBPlatform,
                pid: root::lldb::pid_t,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform13MakeDirectoryEPKcj"]
            pub fn SBPlatform_MakeDirectory(
                this: *mut root::lldb::SBPlatform,
                path: *const ::std::os::raw::c_char,
                file_permissions: u32,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform18GetFilePermissionsEPKc"]
            pub fn SBPlatform_GetFilePermissions(
                this: *mut root::lldb::SBPlatform,
                path: *const ::std::os::raw::c_char,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform18SetFilePermissionsEPKcj"]
            pub fn SBPlatform_SetFilePermissions(
                this: *mut root::lldb::SBPlatform,
                path: *const ::std::os::raw::c_char,
                file_permissions: u32,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBPlatform14GetUnixSignalsEv"]
            pub fn SBPlatform_GetUnixSignals(
                this: *const root::lldb::SBPlatform,
            ) -> root::lldb::SBUnixSignals;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform14GetEnvironmentEv"]
            pub fn SBPlatform_GetEnvironment(
                this: *mut root::lldb::SBPlatform,
            ) -> root::lldb::SBEnvironment;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform23SetLocateModuleCallbackEPFNS_7SBErrorEPvRKNS_12SBModuleSpecERNS_10SBFileSpecES7_ES2_"]
            pub fn SBPlatform_SetLocateModuleCallback(
                this: *mut root::lldb::SBPlatform,
                callback: root::lldb::SBPlatformLocateModuleCallback,
                callback_baton: *mut ::std::os::raw::c_void,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBPlatform5GetSPEv"]
            pub fn SBPlatform_GetSP(this: *const root::lldb::SBPlatform) -> root::lldb::PlatformSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform5SetSPERKSt10shared_ptrIN12lldb_private8PlatformEE"]
            pub fn SBPlatform_SetSP(
                this: *mut root::lldb::SBPlatform,
                platform_sp: *const root::lldb::PlatformSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatform16ExecuteConnectedERKSt8functionIFN12lldb_private6StatusERKSt10shared_ptrINS2_8PlatformEEEE"]
            pub fn SBPlatform_ExecuteConnected(
                this: *mut root::lldb::SBPlatform,
                func: *const u8,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatformC1Ev"]
            pub fn SBPlatform_SBPlatform(this: *mut root::lldb::SBPlatform);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatformC1EPKc"]
            pub fn SBPlatform_SBPlatform1(
                this: *mut root::lldb::SBPlatform,
                platform_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatformC1ERKS0_"]
            pub fn SBPlatform_SBPlatform2(
                this: *mut root::lldb::SBPlatform,
                rhs: *const root::lldb::SBPlatform,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBPlatformD1Ev"]
            pub fn SBPlatform_SBPlatform_destructor(this: *mut root::lldb::SBPlatform);
        }
        impl SBPlatform {
            #[inline]
            pub unsafe fn GetHostPlatform() -> root::lldb::SBPlatform {
                SBPlatform_GetHostPlatform()
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBPlatform_IsValid(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBPlatform_Clear(self)
            }
            #[inline]
            pub unsafe fn GetWorkingDirectory(&mut self) -> *const ::std::os::raw::c_char {
                SBPlatform_GetWorkingDirectory(self)
            }
            #[inline]
            pub unsafe fn SetWorkingDirectory(
                &mut self,
                path: *const ::std::os::raw::c_char,
            ) -> bool {
                SBPlatform_SetWorkingDirectory(self, path)
            }
            #[inline]
            pub unsafe fn GetName(&mut self) -> *const ::std::os::raw::c_char {
                SBPlatform_GetName(self)
            }
            #[inline]
            pub unsafe fn ConnectRemote(
                &mut self,
                connect_options: *mut root::lldb::SBPlatformConnectOptions,
            ) -> root::lldb::SBError {
                SBPlatform_ConnectRemote(self, connect_options)
            }
            #[inline]
            pub unsafe fn DisconnectRemote(&mut self) {
                SBPlatform_DisconnectRemote(self)
            }
            #[inline]
            pub unsafe fn IsConnected(&mut self) -> bool {
                SBPlatform_IsConnected(self)
            }
            #[inline]
            pub unsafe fn GetTriple(&mut self) -> *const ::std::os::raw::c_char {
                SBPlatform_GetTriple(self)
            }
            #[inline]
            pub unsafe fn GetHostname(&mut self) -> *const ::std::os::raw::c_char {
                SBPlatform_GetHostname(self)
            }
            #[inline]
            pub unsafe fn GetOSBuild(&mut self) -> *const ::std::os::raw::c_char {
                SBPlatform_GetOSBuild(self)
            }
            #[inline]
            pub unsafe fn GetOSDescription(&mut self) -> *const ::std::os::raw::c_char {
                SBPlatform_GetOSDescription(self)
            }
            #[inline]
            pub unsafe fn GetOSMajorVersion(&mut self) -> u32 {
                SBPlatform_GetOSMajorVersion(self)
            }
            #[inline]
            pub unsafe fn GetOSMinorVersion(&mut self) -> u32 {
                SBPlatform_GetOSMinorVersion(self)
            }
            #[inline]
            pub unsafe fn GetOSUpdateVersion(&mut self) -> u32 {
                SBPlatform_GetOSUpdateVersion(self)
            }
            #[inline]
            pub unsafe fn SetSDKRoot(&mut self, sysroot: *const ::std::os::raw::c_char) {
                SBPlatform_SetSDKRoot(self, sysroot)
            }
            #[inline]
            pub unsafe fn Put(
                &mut self,
                src: *mut root::lldb::SBFileSpec,
                dst: *mut root::lldb::SBFileSpec,
            ) -> root::lldb::SBError {
                SBPlatform_Put(self, src, dst)
            }
            #[inline]
            pub unsafe fn Get(
                &mut self,
                src: *mut root::lldb::SBFileSpec,
                dst: *mut root::lldb::SBFileSpec,
            ) -> root::lldb::SBError {
                SBPlatform_Get(self, src, dst)
            }
            #[inline]
            pub unsafe fn Install(
                &mut self,
                src: *mut root::lldb::SBFileSpec,
                dst: *mut root::lldb::SBFileSpec,
            ) -> root::lldb::SBError {
                SBPlatform_Install(self, src, dst)
            }
            #[inline]
            pub unsafe fn Run(
                &mut self,
                shell_command: *mut root::lldb::SBPlatformShellCommand,
            ) -> root::lldb::SBError {
                SBPlatform_Run(self, shell_command)
            }
            #[inline]
            pub unsafe fn Launch(
                &mut self,
                launch_info: *mut root::lldb::SBLaunchInfo,
            ) -> root::lldb::SBError {
                SBPlatform_Launch(self, launch_info)
            }
            #[inline]
            pub unsafe fn Attach(
                &mut self,
                attach_info: *mut root::lldb::SBAttachInfo,
                debugger: *const root::lldb::SBDebugger,
                target: *mut root::lldb::SBTarget,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcess {
                SBPlatform_Attach(self, attach_info, debugger, target, error)
            }
            #[inline]
            pub unsafe fn GetAllProcesses(
                &mut self,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBProcessInfoList {
                SBPlatform_GetAllProcesses(self, error)
            }
            #[inline]
            pub unsafe fn Kill(&mut self, pid: root::lldb::pid_t) -> root::lldb::SBError {
                SBPlatform_Kill(self, pid)
            }
            #[inline]
            pub unsafe fn MakeDirectory(
                &mut self,
                path: *const ::std::os::raw::c_char,
                file_permissions: u32,
            ) -> root::lldb::SBError {
                SBPlatform_MakeDirectory(self, path, file_permissions)
            }
            #[inline]
            pub unsafe fn GetFilePermissions(
                &mut self,
                path: *const ::std::os::raw::c_char,
            ) -> u32 {
                SBPlatform_GetFilePermissions(self, path)
            }
            #[inline]
            pub unsafe fn SetFilePermissions(
                &mut self,
                path: *const ::std::os::raw::c_char,
                file_permissions: u32,
            ) -> root::lldb::SBError {
                SBPlatform_SetFilePermissions(self, path, file_permissions)
            }
            #[inline]
            pub unsafe fn GetUnixSignals(&self) -> root::lldb::SBUnixSignals {
                SBPlatform_GetUnixSignals(self)
            }
            #[inline]
            pub unsafe fn GetEnvironment(&mut self) -> root::lldb::SBEnvironment {
                SBPlatform_GetEnvironment(self)
            }
            #[inline]
            pub unsafe fn SetLocateModuleCallback(
                &mut self,
                callback: root::lldb::SBPlatformLocateModuleCallback,
                callback_baton: *mut ::std::os::raw::c_void,
            ) -> root::lldb::SBError {
                SBPlatform_SetLocateModuleCallback(self, callback, callback_baton)
            }
            #[inline]
            pub unsafe fn GetSP(&self) -> root::lldb::PlatformSP {
                SBPlatform_GetSP(self)
            }
            #[inline]
            pub unsafe fn SetSP(&mut self, platform_sp: *const root::lldb::PlatformSP) {
                SBPlatform_SetSP(self, platform_sp)
            }
            #[inline]
            pub unsafe fn ExecuteConnected(&mut self, func: *const u8) -> root::lldb::SBError {
                SBPlatform_ExecuteConnected(self, func)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBPlatform_SBPlatform(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(platform_name: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBPlatform_SBPlatform1(__bindgen_tmp.as_mut_ptr(), platform_name);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(rhs: *const root::lldb::SBPlatform) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBPlatform_SBPlatform2(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBPlatform_SBPlatform_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(1))]
        #[derive(Debug)]
        pub struct SBInputReader {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInputReader10InitializeERNS_10SBDebuggerEPFmPvPS0_NS_17InputReaderActionEPKcmES3_NS_22InputReaderGranularityES7_S7_b"]
            pub fn SBInputReader_Initialize(
                this: *mut root::lldb::SBInputReader,
                sb_debugger: *mut root::lldb::SBDebugger,
                callback: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut ::std::os::raw::c_void,
                        arg2: *mut root::lldb::SBInputReader,
                        arg3: root::lldb::InputReaderAction,
                        arg4: *const ::std::os::raw::c_char,
                        arg5: ::std::os::raw::c_ulong,
                    ) -> ::std::os::raw::c_ulong,
                >,
                a: *mut ::std::os::raw::c_void,
                b: root::lldb::InputReaderGranularity,
                c: *const ::std::os::raw::c_char,
                d: *const ::std::os::raw::c_char,
                e: bool,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInputReader9SetIsDoneEb"]
            pub fn SBInputReader_SetIsDone(this: *mut root::lldb::SBInputReader, arg1: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBInputReader8IsActiveEv"]
            pub fn SBInputReader_IsActive(this: *const root::lldb::SBInputReader) -> bool;
        }
        impl SBInputReader {
            #[inline]
            pub unsafe fn Initialize(
                &mut self,
                sb_debugger: *mut root::lldb::SBDebugger,
                callback: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut ::std::os::raw::c_void,
                        arg2: *mut root::lldb::SBInputReader,
                        arg3: root::lldb::InputReaderAction,
                        arg4: *const ::std::os::raw::c_char,
                        arg5: ::std::os::raw::c_ulong,
                    ) -> ::std::os::raw::c_ulong,
                >,
                a: *mut ::std::os::raw::c_void,
                b: root::lldb::InputReaderGranularity,
                c: *const ::std::os::raw::c_char,
                d: *const ::std::os::raw::c_char,
                e: bool,
            ) -> root::lldb::SBError {
                SBInputReader_Initialize(self, sb_debugger, callback, a, b, c, d, e)
            }
            #[inline]
            pub unsafe fn SetIsDone(&mut self, arg1: bool) {
                SBInputReader_SetIsDone(self, arg1)
            }
            #[inline]
            pub unsafe fn IsActive(&self) -> bool {
                SBInputReader_IsActive(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBDebugger {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        pub const SBDebugger_eBroadcastBitProgress: root::lldb::SBDebugger__bindgen_ty_1 = 1;
        pub const SBDebugger_eBroadcastBitWarning: root::lldb::SBDebugger__bindgen_ty_1 = 2;
        pub const SBDebugger_eBroadcastBitError: root::lldb::SBDebugger__bindgen_ty_1 = 4;
        pub const SBDebugger_eBroadcastBitProgressCategory: root::lldb::SBDebugger__bindgen_ty_1 =
            16;
        pub type SBDebugger__bindgen_ty_1 = ::std::os::raw::c_uint;
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger19GetBroadcasterClassEv"]
            pub fn SBDebugger_GetBroadcasterClass() -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger16SupportsLanguageENS_12LanguageTypeE"]
            pub fn SBDebugger_SupportsLanguage(language: root::lldb::LanguageType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger14GetBroadcasterEv"]
            pub fn SBDebugger_GetBroadcaster(
                this: *mut root::lldb::SBDebugger,
            ) -> root::lldb::SBBroadcaster;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger20GetProgressFromEventERKNS_7SBEventERmS4_S4_Rb"]
            pub fn SBDebugger_GetProgressFromEvent(
                event: *const root::lldb::SBEvent,
                progress_id: *mut u64,
                completed: *mut u64,
                total: *mut u64,
                is_debugger_specific: *mut bool,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger24GetProgressDataFromEventERKNS_7SBEventE"]
            pub fn SBDebugger_GetProgressDataFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger22GetDiagnosticFromEventERKNS_7SBEventE"]
            pub fn SBDebugger_GetDiagnosticFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger10InitializeEv"]
            pub fn SBDebugger_Initialize();
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger27InitializeWithErrorHandlingEv"]
            pub fn SBDebugger_InitializeWithErrorHandling() -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger22PrintStackTraceOnErrorEv"]
            pub fn SBDebugger_PrintStackTraceOnError();
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger23PrintDiagnosticsOnErrorEv"]
            pub fn SBDebugger_PrintDiagnosticsOnError();
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger9TerminateEv"]
            pub fn SBDebugger_Terminate();
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger6CreateEv"]
            pub fn SBDebugger_Create() -> root::lldb::SBDebugger;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger6CreateEb"]
            pub fn SBDebugger_Create1(source_init_files: bool) -> root::lldb::SBDebugger;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger6CreateEbPFvPKcPvES3_"]
            pub fn SBDebugger_Create2(
                source_init_files: bool,
                log_callback: root::lldb::LogOutputCallback,
                baton: *mut ::std::os::raw::c_void,
            ) -> root::lldb::SBDebugger;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger7DestroyERS0_"]
            pub fn SBDebugger_Destroy(debugger: *mut root::lldb::SBDebugger);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger22MemoryPressureDetectedEv"]
            pub fn SBDebugger_MemoryPressureDetected();
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBDebugger7IsValidEv"]
            pub fn SBDebugger_IsValid(this: *const root::lldb::SBDebugger) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger5ClearEv"]
            pub fn SBDebugger_Clear(this: *mut root::lldb::SBDebugger);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger10GetSettingEPKc"]
            pub fn SBDebugger_GetSetting(
                this: *mut root::lldb::SBDebugger,
                setting: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger8SetAsyncEb"]
            pub fn SBDebugger_SetAsync(this: *mut root::lldb::SBDebugger, b: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger8GetAsyncEv"]
            pub fn SBDebugger_GetAsync(this: *mut root::lldb::SBDebugger) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger17SkipLLDBInitFilesEb"]
            pub fn SBDebugger_SkipLLDBInitFiles(this: *mut root::lldb::SBDebugger, b: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger16SkipAppInitFilesEb"]
            pub fn SBDebugger_SkipAppInitFiles(this: *mut root::lldb::SBDebugger, b: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18SetInputFileHandleEP8_IO_FILEb"]
            pub fn SBDebugger_SetInputFileHandle(
                this: *mut root::lldb::SBDebugger,
                f: *mut root::FILE,
                transfer_ownership: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger19SetOutputFileHandleEP8_IO_FILEb"]
            pub fn SBDebugger_SetOutputFileHandle(
                this: *mut root::lldb::SBDebugger,
                f: *mut root::FILE,
                transfer_ownership: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18SetErrorFileHandleEP8_IO_FILEb"]
            pub fn SBDebugger_SetErrorFileHandle(
                this: *mut root::lldb::SBDebugger,
                f: *mut root::FILE,
                transfer_ownership: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18GetInputFileHandleEv"]
            pub fn SBDebugger_GetInputFileHandle(
                this: *mut root::lldb::SBDebugger,
            ) -> *mut root::FILE;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger19GetOutputFileHandleEv"]
            pub fn SBDebugger_GetOutputFileHandle(
                this: *mut root::lldb::SBDebugger,
            ) -> *mut root::FILE;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18GetErrorFileHandleEv"]
            pub fn SBDebugger_GetErrorFileHandle(
                this: *mut root::lldb::SBDebugger,
            ) -> *mut root::FILE;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger14SetInputStringEPKc"]
            pub fn SBDebugger_SetInputString(
                this: *mut root::lldb::SBDebugger,
                data: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger12SetInputFileENS_6SBFileE"]
            pub fn SBDebugger_SetInputFile(
                this: *mut root::lldb::SBDebugger,
                file: root::lldb::SBFile,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger13SetOutputFileENS_6SBFileE"]
            pub fn SBDebugger_SetOutputFile(
                this: *mut root::lldb::SBDebugger,
                file: root::lldb::SBFile,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger12SetErrorFileENS_6SBFileE"]
            pub fn SBDebugger_SetErrorFile(
                this: *mut root::lldb::SBDebugger,
                file: root::lldb::SBFile,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger12SetInputFileESt10shared_ptrIN12lldb_private4FileEE"]
            pub fn SBDebugger_SetInputFile1(
                this: *mut root::lldb::SBDebugger,
                file: root::lldb::FileSP,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger13SetOutputFileESt10shared_ptrIN12lldb_private4FileEE"]
            pub fn SBDebugger_SetOutputFile1(
                this: *mut root::lldb::SBDebugger,
                file: root::lldb::FileSP,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger12SetErrorFileESt10shared_ptrIN12lldb_private4FileEE"]
            pub fn SBDebugger_SetErrorFile1(
                this: *mut root::lldb::SBDebugger,
                file: root::lldb::FileSP,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger12GetInputFileEv"]
            pub fn SBDebugger_GetInputFile(this: *mut root::lldb::SBDebugger)
                -> root::lldb::SBFile;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger13GetOutputFileEv"]
            pub fn SBDebugger_GetOutputFile(
                this: *mut root::lldb::SBDebugger,
            ) -> root::lldb::SBFile;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger12GetErrorFileEv"]
            pub fn SBDebugger_GetErrorFile(this: *mut root::lldb::SBDebugger)
                -> root::lldb::SBFile;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger22SaveInputTerminalStateEv"]
            pub fn SBDebugger_SaveInputTerminalState(this: *mut root::lldb::SBDebugger);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger25RestoreInputTerminalStateEv"]
            pub fn SBDebugger_RestoreInputTerminalState(this: *mut root::lldb::SBDebugger);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger21GetCommandInterpreterEv"]
            pub fn SBDebugger_GetCommandInterpreter(
                this: *mut root::lldb::SBDebugger,
            ) -> root::lldb::SBCommandInterpreter;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger13HandleCommandEPKc"]
            pub fn SBDebugger_HandleCommand(
                this: *mut root::lldb::SBDebugger,
                command: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger16RequestInterruptEv"]
            pub fn SBDebugger_RequestInterrupt(this: *mut root::lldb::SBDebugger);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger22CancelInterruptRequestEv"]
            pub fn SBDebugger_CancelInterruptRequest(this: *mut root::lldb::SBDebugger);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18InterruptRequestedEv"]
            pub fn SBDebugger_InterruptRequested(this: *mut root::lldb::SBDebugger) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger11GetListenerEv"]
            pub fn SBDebugger_GetListener(
                this: *mut root::lldb::SBDebugger,
            ) -> root::lldb::SBListener;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18HandleProcessEventERKNS_9SBProcessERKNS_7SBEventEP8_IO_FILES8_"]
            pub fn SBDebugger_HandleProcessEvent(
                this: *mut root::lldb::SBDebugger,
                process: *const root::lldb::SBProcess,
                event: *const root::lldb::SBEvent,
                out: *mut root::FILE,
                err: *mut root::FILE,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18HandleProcessEventERKNS_9SBProcessERKNS_7SBEventENS_6SBFileES7_"]
            pub fn SBDebugger_HandleProcessEvent1(
                this: *mut root::lldb::SBDebugger,
                process: *const root::lldb::SBProcess,
                event: *const root::lldb::SBEvent,
                out: root::lldb::SBFile,
                err: root::lldb::SBFile,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18HandleProcessEventERKNS_9SBProcessERKNS_7SBEventESt10shared_ptrIN12lldb_private4FileEESA_"]
            pub fn SBDebugger_HandleProcessEvent2(
                this: *mut root::lldb::SBDebugger,
                process: *const root::lldb::SBProcess,
                event: *const root::lldb::SBEvent,
                out: root::lldb::FileSP,
                err: root::lldb::FileSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger12CreateTargetEPKcS2_S2_bRNS_7SBErrorE"]
            pub fn SBDebugger_CreateTarget(
                this: *mut root::lldb::SBDebugger,
                filename: *const ::std::os::raw::c_char,
                target_triple: *const ::std::os::raw::c_char,
                platform_name: *const ::std::os::raw::c_char,
                add_dependent_modules: bool,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBTarget;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger35CreateTargetWithFileAndTargetTripleEPKcS2_"]
            pub fn SBDebugger_CreateTargetWithFileAndTargetTriple(
                this: *mut root::lldb::SBDebugger,
                filename: *const ::std::os::raw::c_char,
                target_triple: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTarget;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger27CreateTargetWithFileAndArchEPKcS2_"]
            pub fn SBDebugger_CreateTargetWithFileAndArch(
                this: *mut root::lldb::SBDebugger,
                filename: *const ::std::os::raw::c_char,
                archname: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTarget;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger12CreateTargetEPKc"]
            pub fn SBDebugger_CreateTarget1(
                this: *mut root::lldb::SBDebugger,
                filename: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTarget;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger14GetDummyTargetEv"]
            pub fn SBDebugger_GetDummyTarget(
                this: *mut root::lldb::SBDebugger,
            ) -> root::lldb::SBTarget;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger12DeleteTargetERNS_8SBTargetE"]
            pub fn SBDebugger_DeleteTarget(
                this: *mut root::lldb::SBDebugger,
                target: *mut root::lldb::SBTarget,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger16GetTargetAtIndexEj"]
            pub fn SBDebugger_GetTargetAtIndex(
                this: *mut root::lldb::SBDebugger,
                idx: u32,
            ) -> root::lldb::SBTarget;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger16GetIndexOfTargetENS_8SBTargetE"]
            pub fn SBDebugger_GetIndexOfTarget(
                this: *mut root::lldb::SBDebugger,
                target: root::lldb::SBTarget,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger23FindTargetWithProcessIDEm"]
            pub fn SBDebugger_FindTargetWithProcessID(
                this: *mut root::lldb::SBDebugger,
                pid: root::lldb::pid_t,
            ) -> root::lldb::SBTarget;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger25FindTargetWithFileAndArchEPKcS2_"]
            pub fn SBDebugger_FindTargetWithFileAndArch(
                this: *mut root::lldb::SBDebugger,
                filename: *const ::std::os::raw::c_char,
                arch: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTarget;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger13GetNumTargetsEv"]
            pub fn SBDebugger_GetNumTargets(this: *mut root::lldb::SBDebugger) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger17GetSelectedTargetEv"]
            pub fn SBDebugger_GetSelectedTarget(
                this: *mut root::lldb::SBDebugger,
            ) -> root::lldb::SBTarget;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger17SetSelectedTargetERNS_8SBTargetE"]
            pub fn SBDebugger_SetSelectedTarget(
                this: *mut root::lldb::SBDebugger,
                target: *mut root::lldb::SBTarget,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger19GetSelectedPlatformEv"]
            pub fn SBDebugger_GetSelectedPlatform(
                this: *mut root::lldb::SBDebugger,
            ) -> root::lldb::SBPlatform;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger19SetSelectedPlatformERNS_10SBPlatformE"]
            pub fn SBDebugger_SetSelectedPlatform(
                this: *mut root::lldb::SBDebugger,
                platform: *mut root::lldb::SBPlatform,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger15GetNumPlatformsEv"]
            pub fn SBDebugger_GetNumPlatforms(this: *mut root::lldb::SBDebugger) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18GetPlatformAtIndexEj"]
            pub fn SBDebugger_GetPlatformAtIndex(
                this: *mut root::lldb::SBDebugger,
                idx: u32,
            ) -> root::lldb::SBPlatform;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger24GetNumAvailablePlatformsEv"]
            pub fn SBDebugger_GetNumAvailablePlatforms(this: *mut root::lldb::SBDebugger) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger31GetAvailablePlatformInfoAtIndexEj"]
            pub fn SBDebugger_GetAvailablePlatformInfoAtIndex(
                this: *mut root::lldb::SBDebugger,
                idx: u32,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger16GetSourceManagerEv"]
            pub fn SBDebugger_GetSourceManager(
                this: *mut root::lldb::SBDebugger,
            ) -> root::lldb::SBSourceManager;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18SetCurrentPlatformEPKc"]
            pub fn SBDebugger_SetCurrentPlatform(
                this: *mut root::lldb::SBDebugger,
                platform_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger25SetCurrentPlatformSDKRootEPKc"]
            pub fn SBDebugger_SetCurrentPlatformSDKRoot(
                this: *mut root::lldb::SBDebugger,
                sysroot: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger20SetUseExternalEditorEb"]
            pub fn SBDebugger_SetUseExternalEditor(
                this: *mut root::lldb::SBDebugger,
                input: bool,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger20GetUseExternalEditorEv"]
            pub fn SBDebugger_GetUseExternalEditor(this: *mut root::lldb::SBDebugger) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger11SetUseColorEb"]
            pub fn SBDebugger_SetUseColor(
                this: *mut root::lldb::SBDebugger,
                use_color: bool,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBDebugger11GetUseColorEv"]
            pub fn SBDebugger_GetUseColor(this: *const root::lldb::SBDebugger) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger17SetUseSourceCacheEb"]
            pub fn SBDebugger_SetUseSourceCache(
                this: *mut root::lldb::SBDebugger,
                use_source_cache: bool,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBDebugger17GetUseSourceCacheEv"]
            pub fn SBDebugger_GetUseSourceCache(this: *const root::lldb::SBDebugger) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger22GetDefaultArchitectureEPcm"]
            pub fn SBDebugger_GetDefaultArchitecture(
                arch_name: *mut ::std::os::raw::c_char,
                arch_name_len: usize,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger22SetDefaultArchitectureEPKc"]
            pub fn SBDebugger_SetDefaultArchitecture(
                arch_name: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger20GetScriptingLanguageEPKc"]
            pub fn SBDebugger_GetScriptingLanguage(
                this: *mut root::lldb::SBDebugger,
                script_language_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::ScriptLanguage;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger24GetScriptInterpreterInfoENS_14ScriptLanguageE"]
            pub fn SBDebugger_GetScriptInterpreterInfo(
                this: *mut root::lldb::SBDebugger,
                arg1: root::lldb::ScriptLanguage,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger16GetVersionStringEv"]
            pub fn SBDebugger_GetVersionString() -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger14StateAsCStringENS_9StateTypeE"]
            pub fn SBDebugger_StateAsCString(
                state: root::lldb::StateType,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger21GetBuildConfigurationEv"]
            pub fn SBDebugger_GetBuildConfiguration() -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger19StateIsRunningStateENS_9StateTypeE"]
            pub fn SBDebugger_StateIsRunningState(state: root::lldb::StateType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger19StateIsStoppedStateENS_9StateTypeE"]
            pub fn SBDebugger_StateIsStoppedState(state: root::lldb::StateType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger9EnableLogEPKcPS2_"]
            pub fn SBDebugger_EnableLog(
                this: *mut root::lldb::SBDebugger,
                channel: *const ::std::os::raw::c_char,
                categories: *mut *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18SetLoggingCallbackEPFvPKcPvES3_"]
            pub fn SBDebugger_SetLoggingCallback(
                this: *mut root::lldb::SBDebugger,
                log_callback: root::lldb::LogOutputCallback,
                baton: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18SetDestroyCallbackEPFvmPvES1_"]
            pub fn SBDebugger_SetDestroyCallback(
                this: *mut root::lldb::SBDebugger,
                destroy_callback: root::lldb::SBDebuggerDestroyCallback,
                baton: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18AddDestroyCallbackEPFvmPvES1_"]
            pub fn SBDebugger_AddDestroyCallback(
                this: *mut root::lldb::SBDebugger,
                destroy_callback: root::lldb::SBDebuggerDestroyCallback,
                baton: *mut ::std::os::raw::c_void,
            ) -> root::lldb::callback_token_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger21RemoveDestroyCallbackEi"]
            pub fn SBDebugger_RemoveDestroyCallback(
                this: *mut root::lldb::SBDebugger,
                token: root::lldb::callback_token_t,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger13DispatchInputEPvPKvm"]
            pub fn SBDebugger_DispatchInput(
                this: *mut root::lldb::SBDebugger,
                baton: *mut ::std::os::raw::c_void,
                data: *const ::std::os::raw::c_void,
                data_len: usize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger13DispatchInputEPKvm"]
            pub fn SBDebugger_DispatchInput1(
                this: *mut root::lldb::SBDebugger,
                data: *const ::std::os::raw::c_void,
                data_len: usize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger22DispatchInputInterruptEv"]
            pub fn SBDebugger_DispatchInputInterrupt(this: *mut root::lldb::SBDebugger);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger22DispatchInputEndOfFileEv"]
            pub fn SBDebugger_DispatchInputEndOfFile(this: *mut root::lldb::SBDebugger);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger15PushInputReaderERNS_13SBInputReaderE"]
            pub fn SBDebugger_PushInputReader(
                this: *mut root::lldb::SBDebugger,
                reader: *mut root::lldb::SBInputReader,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger15GetInstanceNameEv"]
            pub fn SBDebugger_GetInstanceName(
                this: *mut root::lldb::SBDebugger,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18FindDebuggerWithIDEi"]
            pub fn SBDebugger_FindDebuggerWithID(
                id: ::std::os::raw::c_int,
            ) -> root::lldb::SBDebugger;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger19SetInternalVariableEPKcS2_S2_"]
            pub fn SBDebugger_SetInternalVariable(
                var_name: *const ::std::os::raw::c_char,
                value: *const ::std::os::raw::c_char,
                debugger_instance_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger24GetInternalVariableValueEPKcS2_"]
            pub fn SBDebugger_GetInternalVariableValue(
                var_name: *const ::std::os::raw::c_char,
                debugger_instance_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBStringList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger14GetDescriptionERNS_8SBStreamE"]
            pub fn SBDebugger_GetDescription(
                this: *mut root::lldb::SBDebugger,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBDebugger16GetTerminalWidthEv"]
            pub fn SBDebugger_GetTerminalWidth(this: *const root::lldb::SBDebugger) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger16SetTerminalWidthEj"]
            pub fn SBDebugger_SetTerminalWidth(this: *mut root::lldb::SBDebugger, term_width: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger5GetIDEv"]
            pub fn SBDebugger_GetID(this: *mut root::lldb::SBDebugger) -> root::lldb::user_id_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBDebugger9GetPromptEv"]
            pub fn SBDebugger_GetPrompt(
                this: *const root::lldb::SBDebugger,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger9SetPromptEPKc"]
            pub fn SBDebugger_SetPrompt(
                this: *mut root::lldb::SBDebugger,
                prompt: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBDebugger17GetReproducerPathEv"]
            pub fn SBDebugger_GetReproducerPath(
                this: *const root::lldb::SBDebugger,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBDebugger17GetScriptLanguageEv"]
            pub fn SBDebugger_GetScriptLanguage(
                this: *const root::lldb::SBDebugger,
            ) -> root::lldb::ScriptLanguage;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger17SetScriptLanguageENS_14ScriptLanguageE"]
            pub fn SBDebugger_SetScriptLanguage(
                this: *mut root::lldb::SBDebugger,
                script_lang: root::lldb::ScriptLanguage,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBDebugger15GetREPLLanguageEv"]
            pub fn SBDebugger_GetREPLLanguage(
                this: *const root::lldb::SBDebugger,
            ) -> root::lldb::LanguageType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger15SetREPLLanguageENS_12LanguageTypeE"]
            pub fn SBDebugger_SetREPLLanguage(
                this: *mut root::lldb::SBDebugger,
                repl_lang: root::lldb::LanguageType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBDebugger18GetCloseInputOnEOFEv"]
            pub fn SBDebugger_GetCloseInputOnEOF(this: *const root::lldb::SBDebugger) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18SetCloseInputOnEOFEb"]
            pub fn SBDebugger_SetCloseInputOnEOF(this: *mut root::lldb::SBDebugger, b: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger11GetCategoryEPKc"]
            pub fn SBDebugger_GetCategory(
                this: *mut root::lldb::SBDebugger,
                category_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTypeCategory;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger11GetCategoryENS_12LanguageTypeE"]
            pub fn SBDebugger_GetCategory1(
                this: *mut root::lldb::SBDebugger,
                lang_type: root::lldb::LanguageType,
            ) -> root::lldb::SBTypeCategory;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger14CreateCategoryEPKc"]
            pub fn SBDebugger_CreateCategory(
                this: *mut root::lldb::SBDebugger,
                category_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTypeCategory;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger14DeleteCategoryEPKc"]
            pub fn SBDebugger_DeleteCategory(
                this: *mut root::lldb::SBDebugger,
                category_name: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger16GetNumCategoriesEv"]
            pub fn SBDebugger_GetNumCategories(this: *mut root::lldb::SBDebugger) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18GetCategoryAtIndexEj"]
            pub fn SBDebugger_GetCategoryAtIndex(
                this: *mut root::lldb::SBDebugger,
                arg1: u32,
            ) -> root::lldb::SBTypeCategory;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger18GetDefaultCategoryEv"]
            pub fn SBDebugger_GetDefaultCategory(
                this: *mut root::lldb::SBDebugger,
            ) -> root::lldb::SBTypeCategory;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger16GetFormatForTypeENS_19SBTypeNameSpecifierE"]
            pub fn SBDebugger_GetFormatForType(
                this: *mut root::lldb::SBDebugger,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeFormat;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger17GetSummaryForTypeENS_19SBTypeNameSpecifierE"]
            pub fn SBDebugger_GetSummaryForType(
                this: *mut root::lldb::SBDebugger,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeSummary;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger16GetFilterForTypeENS_19SBTypeNameSpecifierE"]
            pub fn SBDebugger_GetFilterForType(
                this: *mut root::lldb::SBDebugger,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeFilter;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger19GetSyntheticForTypeENS_19SBTypeNameSpecifierE"]
            pub fn SBDebugger_GetSyntheticForType(
                this: *mut root::lldb::SBDebugger,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeSynthetic;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger21RunCommandInterpreterEbb"]
            pub fn SBDebugger_RunCommandInterpreter(
                this: *mut root::lldb::SBDebugger,
                auto_handle_events: bool,
                spawn_thread: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger21RunCommandInterpreterEbbRNS_30SBCommandInterpreterRunOptionsERiRbS4_"]
            pub fn SBDebugger_RunCommandInterpreter1(
                this: *mut root::lldb::SBDebugger,
                auto_handle_events: bool,
                spawn_thread: bool,
                options: *mut root::lldb::SBCommandInterpreterRunOptions,
                num_errors: *mut ::std::os::raw::c_int,
                quit_requested: *mut bool,
                stopped_for_crash: *mut bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger21RunCommandInterpreterERKNS_30SBCommandInterpreterRunOptionsE"]
            pub fn SBDebugger_RunCommandInterpreter2(
                this: *mut root::lldb::SBDebugger,
                options: *const root::lldb::SBCommandInterpreterRunOptions,
            ) -> root::lldb::SBCommandInterpreterRunResult;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger7RunREPLENS_12LanguageTypeEPKc"]
            pub fn SBDebugger_RunREPL(
                this: *mut root::lldb::SBDebugger,
                language: root::lldb::LanguageType,
                repl_options: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebugger17LoadTraceFromFileERNS_7SBErrorERKNS_10SBFileSpecE"]
            pub fn SBDebugger_LoadTraceFromFile(
                this: *mut root::lldb::SBDebugger,
                error: *mut root::lldb::SBError,
                trace_description_file: *const root::lldb::SBFileSpec,
            ) -> root::lldb::SBTrace;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebuggerC1Ev"]
            pub fn SBDebugger_SBDebugger(this: *mut root::lldb::SBDebugger);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebuggerC1ERKS0_"]
            pub fn SBDebugger_SBDebugger1(
                this: *mut root::lldb::SBDebugger,
                rhs: *const root::lldb::SBDebugger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebuggerC1ERKSt10shared_ptrIN12lldb_private8DebuggerEE"]
            pub fn SBDebugger_SBDebugger2(
                this: *mut root::lldb::SBDebugger,
                debugger_sp: *const root::lldb::DebuggerSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBDebuggerD1Ev"]
            pub fn SBDebugger_SBDebugger_destructor(this: *mut root::lldb::SBDebugger);
        }
        impl SBDebugger {
            #[inline]
            pub unsafe fn GetBroadcasterClass() -> *const ::std::os::raw::c_char {
                SBDebugger_GetBroadcasterClass()
            }
            #[inline]
            pub unsafe fn SupportsLanguage(language: root::lldb::LanguageType) -> bool {
                SBDebugger_SupportsLanguage(language)
            }
            #[inline]
            pub unsafe fn GetBroadcaster(&mut self) -> root::lldb::SBBroadcaster {
                SBDebugger_GetBroadcaster(self)
            }
            #[inline]
            pub unsafe fn GetProgressFromEvent(
                event: *const root::lldb::SBEvent,
                progress_id: *mut u64,
                completed: *mut u64,
                total: *mut u64,
                is_debugger_specific: *mut bool,
            ) -> *const ::std::os::raw::c_char {
                SBDebugger_GetProgressFromEvent(
                    event,
                    progress_id,
                    completed,
                    total,
                    is_debugger_specific,
                )
            }
            #[inline]
            pub unsafe fn GetProgressDataFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBStructuredData {
                SBDebugger_GetProgressDataFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetDiagnosticFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBStructuredData {
                SBDebugger_GetDiagnosticFromEvent(event)
            }
            #[inline]
            pub unsafe fn Initialize() {
                SBDebugger_Initialize()
            }
            #[inline]
            pub unsafe fn InitializeWithErrorHandling() -> root::lldb::SBError {
                SBDebugger_InitializeWithErrorHandling()
            }
            #[inline]
            pub unsafe fn PrintStackTraceOnError() {
                SBDebugger_PrintStackTraceOnError()
            }
            #[inline]
            pub unsafe fn PrintDiagnosticsOnError() {
                SBDebugger_PrintDiagnosticsOnError()
            }
            #[inline]
            pub unsafe fn Terminate() {
                SBDebugger_Terminate()
            }
            #[inline]
            pub unsafe fn Create() -> root::lldb::SBDebugger {
                SBDebugger_Create()
            }
            #[inline]
            pub unsafe fn Create1(source_init_files: bool) -> root::lldb::SBDebugger {
                SBDebugger_Create1(source_init_files)
            }
            #[inline]
            pub unsafe fn Create2(
                source_init_files: bool,
                log_callback: root::lldb::LogOutputCallback,
                baton: *mut ::std::os::raw::c_void,
            ) -> root::lldb::SBDebugger {
                SBDebugger_Create2(source_init_files, log_callback, baton)
            }
            #[inline]
            pub unsafe fn Destroy(debugger: *mut root::lldb::SBDebugger) {
                SBDebugger_Destroy(debugger)
            }
            #[inline]
            pub unsafe fn MemoryPressureDetected() {
                SBDebugger_MemoryPressureDetected()
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBDebugger_IsValid(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBDebugger_Clear(self)
            }
            #[inline]
            pub unsafe fn GetSetting(
                &mut self,
                setting: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBStructuredData {
                SBDebugger_GetSetting(self, setting)
            }
            #[inline]
            pub unsafe fn SetAsync(&mut self, b: bool) {
                SBDebugger_SetAsync(self, b)
            }
            #[inline]
            pub unsafe fn GetAsync(&mut self) -> bool {
                SBDebugger_GetAsync(self)
            }
            #[inline]
            pub unsafe fn SkipLLDBInitFiles(&mut self, b: bool) {
                SBDebugger_SkipLLDBInitFiles(self, b)
            }
            #[inline]
            pub unsafe fn SkipAppInitFiles(&mut self, b: bool) {
                SBDebugger_SkipAppInitFiles(self, b)
            }
            #[inline]
            pub unsafe fn SetInputFileHandle(
                &mut self,
                f: *mut root::FILE,
                transfer_ownership: bool,
            ) {
                SBDebugger_SetInputFileHandle(self, f, transfer_ownership)
            }
            #[inline]
            pub unsafe fn SetOutputFileHandle(
                &mut self,
                f: *mut root::FILE,
                transfer_ownership: bool,
            ) {
                SBDebugger_SetOutputFileHandle(self, f, transfer_ownership)
            }
            #[inline]
            pub unsafe fn SetErrorFileHandle(
                &mut self,
                f: *mut root::FILE,
                transfer_ownership: bool,
            ) {
                SBDebugger_SetErrorFileHandle(self, f, transfer_ownership)
            }
            #[inline]
            pub unsafe fn GetInputFileHandle(&mut self) -> *mut root::FILE {
                SBDebugger_GetInputFileHandle(self)
            }
            #[inline]
            pub unsafe fn GetOutputFileHandle(&mut self) -> *mut root::FILE {
                SBDebugger_GetOutputFileHandle(self)
            }
            #[inline]
            pub unsafe fn GetErrorFileHandle(&mut self) -> *mut root::FILE {
                SBDebugger_GetErrorFileHandle(self)
            }
            #[inline]
            pub unsafe fn SetInputString(
                &mut self,
                data: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError {
                SBDebugger_SetInputString(self, data)
            }
            #[inline]
            pub unsafe fn SetInputFile(&mut self, file: root::lldb::SBFile) -> root::lldb::SBError {
                SBDebugger_SetInputFile(self, file)
            }
            #[inline]
            pub unsafe fn SetOutputFile(
                &mut self,
                file: root::lldb::SBFile,
            ) -> root::lldb::SBError {
                SBDebugger_SetOutputFile(self, file)
            }
            #[inline]
            pub unsafe fn SetErrorFile(&mut self, file: root::lldb::SBFile) -> root::lldb::SBError {
                SBDebugger_SetErrorFile(self, file)
            }
            #[inline]
            pub unsafe fn SetInputFile1(
                &mut self,
                file: root::lldb::FileSP,
            ) -> root::lldb::SBError {
                SBDebugger_SetInputFile1(self, file)
            }
            #[inline]
            pub unsafe fn SetOutputFile1(
                &mut self,
                file: root::lldb::FileSP,
            ) -> root::lldb::SBError {
                SBDebugger_SetOutputFile1(self, file)
            }
            #[inline]
            pub unsafe fn SetErrorFile1(
                &mut self,
                file: root::lldb::FileSP,
            ) -> root::lldb::SBError {
                SBDebugger_SetErrorFile1(self, file)
            }
            #[inline]
            pub unsafe fn GetInputFile(&mut self) -> root::lldb::SBFile {
                SBDebugger_GetInputFile(self)
            }
            #[inline]
            pub unsafe fn GetOutputFile(&mut self) -> root::lldb::SBFile {
                SBDebugger_GetOutputFile(self)
            }
            #[inline]
            pub unsafe fn GetErrorFile(&mut self) -> root::lldb::SBFile {
                SBDebugger_GetErrorFile(self)
            }
            #[inline]
            pub unsafe fn SaveInputTerminalState(&mut self) {
                SBDebugger_SaveInputTerminalState(self)
            }
            #[inline]
            pub unsafe fn RestoreInputTerminalState(&mut self) {
                SBDebugger_RestoreInputTerminalState(self)
            }
            #[inline]
            pub unsafe fn GetCommandInterpreter(&mut self) -> root::lldb::SBCommandInterpreter {
                SBDebugger_GetCommandInterpreter(self)
            }
            #[inline]
            pub unsafe fn HandleCommand(&mut self, command: *const ::std::os::raw::c_char) {
                SBDebugger_HandleCommand(self, command)
            }
            #[inline]
            pub unsafe fn RequestInterrupt(&mut self) {
                SBDebugger_RequestInterrupt(self)
            }
            #[inline]
            pub unsafe fn CancelInterruptRequest(&mut self) {
                SBDebugger_CancelInterruptRequest(self)
            }
            #[inline]
            pub unsafe fn InterruptRequested(&mut self) -> bool {
                SBDebugger_InterruptRequested(self)
            }
            #[inline]
            pub unsafe fn GetListener(&mut self) -> root::lldb::SBListener {
                SBDebugger_GetListener(self)
            }
            #[inline]
            pub unsafe fn HandleProcessEvent(
                &mut self,
                process: *const root::lldb::SBProcess,
                event: *const root::lldb::SBEvent,
                out: *mut root::FILE,
                err: *mut root::FILE,
            ) {
                SBDebugger_HandleProcessEvent(self, process, event, out, err)
            }
            #[inline]
            pub unsafe fn HandleProcessEvent1(
                &mut self,
                process: *const root::lldb::SBProcess,
                event: *const root::lldb::SBEvent,
                out: root::lldb::SBFile,
                err: root::lldb::SBFile,
            ) {
                SBDebugger_HandleProcessEvent1(self, process, event, out, err)
            }
            #[inline]
            pub unsafe fn HandleProcessEvent2(
                &mut self,
                process: *const root::lldb::SBProcess,
                event: *const root::lldb::SBEvent,
                out: root::lldb::FileSP,
                err: root::lldb::FileSP,
            ) {
                SBDebugger_HandleProcessEvent2(self, process, event, out, err)
            }
            #[inline]
            pub unsafe fn CreateTarget(
                &mut self,
                filename: *const ::std::os::raw::c_char,
                target_triple: *const ::std::os::raw::c_char,
                platform_name: *const ::std::os::raw::c_char,
                add_dependent_modules: bool,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBTarget {
                SBDebugger_CreateTarget(
                    self,
                    filename,
                    target_triple,
                    platform_name,
                    add_dependent_modules,
                    error,
                )
            }
            #[inline]
            pub unsafe fn CreateTargetWithFileAndTargetTriple(
                &mut self,
                filename: *const ::std::os::raw::c_char,
                target_triple: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTarget {
                SBDebugger_CreateTargetWithFileAndTargetTriple(self, filename, target_triple)
            }
            #[inline]
            pub unsafe fn CreateTargetWithFileAndArch(
                &mut self,
                filename: *const ::std::os::raw::c_char,
                archname: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTarget {
                SBDebugger_CreateTargetWithFileAndArch(self, filename, archname)
            }
            #[inline]
            pub unsafe fn CreateTarget1(
                &mut self,
                filename: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTarget {
                SBDebugger_CreateTarget1(self, filename)
            }
            #[inline]
            pub unsafe fn GetDummyTarget(&mut self) -> root::lldb::SBTarget {
                SBDebugger_GetDummyTarget(self)
            }
            #[inline]
            pub unsafe fn DeleteTarget(&mut self, target: *mut root::lldb::SBTarget) -> bool {
                SBDebugger_DeleteTarget(self, target)
            }
            #[inline]
            pub unsafe fn GetTargetAtIndex(&mut self, idx: u32) -> root::lldb::SBTarget {
                SBDebugger_GetTargetAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetIndexOfTarget(&mut self, target: root::lldb::SBTarget) -> u32 {
                SBDebugger_GetIndexOfTarget(self, target)
            }
            #[inline]
            pub unsafe fn FindTargetWithProcessID(
                &mut self,
                pid: root::lldb::pid_t,
            ) -> root::lldb::SBTarget {
                SBDebugger_FindTargetWithProcessID(self, pid)
            }
            #[inline]
            pub unsafe fn FindTargetWithFileAndArch(
                &mut self,
                filename: *const ::std::os::raw::c_char,
                arch: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTarget {
                SBDebugger_FindTargetWithFileAndArch(self, filename, arch)
            }
            #[inline]
            pub unsafe fn GetNumTargets(&mut self) -> u32 {
                SBDebugger_GetNumTargets(self)
            }
            #[inline]
            pub unsafe fn GetSelectedTarget(&mut self) -> root::lldb::SBTarget {
                SBDebugger_GetSelectedTarget(self)
            }
            #[inline]
            pub unsafe fn SetSelectedTarget(&mut self, target: *mut root::lldb::SBTarget) {
                SBDebugger_SetSelectedTarget(self, target)
            }
            #[inline]
            pub unsafe fn GetSelectedPlatform(&mut self) -> root::lldb::SBPlatform {
                SBDebugger_GetSelectedPlatform(self)
            }
            #[inline]
            pub unsafe fn SetSelectedPlatform(&mut self, platform: *mut root::lldb::SBPlatform) {
                SBDebugger_SetSelectedPlatform(self, platform)
            }
            #[inline]
            pub unsafe fn GetNumPlatforms(&mut self) -> u32 {
                SBDebugger_GetNumPlatforms(self)
            }
            #[inline]
            pub unsafe fn GetPlatformAtIndex(&mut self, idx: u32) -> root::lldb::SBPlatform {
                SBDebugger_GetPlatformAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetNumAvailablePlatforms(&mut self) -> u32 {
                SBDebugger_GetNumAvailablePlatforms(self)
            }
            #[inline]
            pub unsafe fn GetAvailablePlatformInfoAtIndex(
                &mut self,
                idx: u32,
            ) -> root::lldb::SBStructuredData {
                SBDebugger_GetAvailablePlatformInfoAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetSourceManager(&mut self) -> root::lldb::SBSourceManager {
                SBDebugger_GetSourceManager(self)
            }
            #[inline]
            pub unsafe fn SetCurrentPlatform(
                &mut self,
                platform_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError {
                SBDebugger_SetCurrentPlatform(self, platform_name)
            }
            #[inline]
            pub unsafe fn SetCurrentPlatformSDKRoot(
                &mut self,
                sysroot: *const ::std::os::raw::c_char,
            ) -> bool {
                SBDebugger_SetCurrentPlatformSDKRoot(self, sysroot)
            }
            #[inline]
            pub unsafe fn SetUseExternalEditor(&mut self, input: bool) -> bool {
                SBDebugger_SetUseExternalEditor(self, input)
            }
            #[inline]
            pub unsafe fn GetUseExternalEditor(&mut self) -> bool {
                SBDebugger_GetUseExternalEditor(self)
            }
            #[inline]
            pub unsafe fn SetUseColor(&mut self, use_color: bool) -> bool {
                SBDebugger_SetUseColor(self, use_color)
            }
            #[inline]
            pub unsafe fn GetUseColor(&self) -> bool {
                SBDebugger_GetUseColor(self)
            }
            #[inline]
            pub unsafe fn SetUseSourceCache(&mut self, use_source_cache: bool) -> bool {
                SBDebugger_SetUseSourceCache(self, use_source_cache)
            }
            #[inline]
            pub unsafe fn GetUseSourceCache(&self) -> bool {
                SBDebugger_GetUseSourceCache(self)
            }
            #[inline]
            pub unsafe fn GetDefaultArchitecture(
                arch_name: *mut ::std::os::raw::c_char,
                arch_name_len: usize,
            ) -> bool {
                SBDebugger_GetDefaultArchitecture(arch_name, arch_name_len)
            }
            #[inline]
            pub unsafe fn SetDefaultArchitecture(arch_name: *const ::std::os::raw::c_char) -> bool {
                SBDebugger_SetDefaultArchitecture(arch_name)
            }
            #[inline]
            pub unsafe fn GetScriptingLanguage(
                &mut self,
                script_language_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::ScriptLanguage {
                SBDebugger_GetScriptingLanguage(self, script_language_name)
            }
            #[inline]
            pub unsafe fn GetScriptInterpreterInfo(
                &mut self,
                arg1: root::lldb::ScriptLanguage,
            ) -> root::lldb::SBStructuredData {
                SBDebugger_GetScriptInterpreterInfo(self, arg1)
            }
            #[inline]
            pub unsafe fn GetVersionString() -> *const ::std::os::raw::c_char {
                SBDebugger_GetVersionString()
            }
            #[inline]
            pub unsafe fn StateAsCString(
                state: root::lldb::StateType,
            ) -> *const ::std::os::raw::c_char {
                SBDebugger_StateAsCString(state)
            }
            #[inline]
            pub unsafe fn GetBuildConfiguration() -> root::lldb::SBStructuredData {
                SBDebugger_GetBuildConfiguration()
            }
            #[inline]
            pub unsafe fn StateIsRunningState(state: root::lldb::StateType) -> bool {
                SBDebugger_StateIsRunningState(state)
            }
            #[inline]
            pub unsafe fn StateIsStoppedState(state: root::lldb::StateType) -> bool {
                SBDebugger_StateIsStoppedState(state)
            }
            #[inline]
            pub unsafe fn EnableLog(
                &mut self,
                channel: *const ::std::os::raw::c_char,
                categories: *mut *const ::std::os::raw::c_char,
            ) -> bool {
                SBDebugger_EnableLog(self, channel, categories)
            }
            #[inline]
            pub unsafe fn SetLoggingCallback(
                &mut self,
                log_callback: root::lldb::LogOutputCallback,
                baton: *mut ::std::os::raw::c_void,
            ) {
                SBDebugger_SetLoggingCallback(self, log_callback, baton)
            }
            #[inline]
            pub unsafe fn SetDestroyCallback(
                &mut self,
                destroy_callback: root::lldb::SBDebuggerDestroyCallback,
                baton: *mut ::std::os::raw::c_void,
            ) {
                SBDebugger_SetDestroyCallback(self, destroy_callback, baton)
            }
            #[inline]
            pub unsafe fn AddDestroyCallback(
                &mut self,
                destroy_callback: root::lldb::SBDebuggerDestroyCallback,
                baton: *mut ::std::os::raw::c_void,
            ) -> root::lldb::callback_token_t {
                SBDebugger_AddDestroyCallback(self, destroy_callback, baton)
            }
            #[inline]
            pub unsafe fn RemoveDestroyCallback(
                &mut self,
                token: root::lldb::callback_token_t,
            ) -> bool {
                SBDebugger_RemoveDestroyCallback(self, token)
            }
            #[inline]
            pub unsafe fn DispatchInput(
                &mut self,
                baton: *mut ::std::os::raw::c_void,
                data: *const ::std::os::raw::c_void,
                data_len: usize,
            ) {
                SBDebugger_DispatchInput(self, baton, data, data_len)
            }
            #[inline]
            pub unsafe fn DispatchInput1(
                &mut self,
                data: *const ::std::os::raw::c_void,
                data_len: usize,
            ) {
                SBDebugger_DispatchInput1(self, data, data_len)
            }
            #[inline]
            pub unsafe fn DispatchInputInterrupt(&mut self) {
                SBDebugger_DispatchInputInterrupt(self)
            }
            #[inline]
            pub unsafe fn DispatchInputEndOfFile(&mut self) {
                SBDebugger_DispatchInputEndOfFile(self)
            }
            #[inline]
            pub unsafe fn PushInputReader(&mut self, reader: *mut root::lldb::SBInputReader) {
                SBDebugger_PushInputReader(self, reader)
            }
            #[inline]
            pub unsafe fn GetInstanceName(&mut self) -> *const ::std::os::raw::c_char {
                SBDebugger_GetInstanceName(self)
            }
            #[inline]
            pub unsafe fn FindDebuggerWithID(id: ::std::os::raw::c_int) -> root::lldb::SBDebugger {
                SBDebugger_FindDebuggerWithID(id)
            }
            #[inline]
            pub unsafe fn SetInternalVariable(
                var_name: *const ::std::os::raw::c_char,
                value: *const ::std::os::raw::c_char,
                debugger_instance_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError {
                SBDebugger_SetInternalVariable(var_name, value, debugger_instance_name)
            }
            #[inline]
            pub unsafe fn GetInternalVariableValue(
                var_name: *const ::std::os::raw::c_char,
                debugger_instance_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBStringList {
                SBDebugger_GetInternalVariableValue(var_name, debugger_instance_name)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBDebugger_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn GetTerminalWidth(&self) -> u32 {
                SBDebugger_GetTerminalWidth(self)
            }
            #[inline]
            pub unsafe fn SetTerminalWidth(&mut self, term_width: u32) {
                SBDebugger_SetTerminalWidth(self, term_width)
            }
            #[inline]
            pub unsafe fn GetID(&mut self) -> root::lldb::user_id_t {
                SBDebugger_GetID(self)
            }
            #[inline]
            pub unsafe fn GetPrompt(&self) -> *const ::std::os::raw::c_char {
                SBDebugger_GetPrompt(self)
            }
            #[inline]
            pub unsafe fn SetPrompt(&mut self, prompt: *const ::std::os::raw::c_char) {
                SBDebugger_SetPrompt(self, prompt)
            }
            #[inline]
            pub unsafe fn GetReproducerPath(&self) -> *const ::std::os::raw::c_char {
                SBDebugger_GetReproducerPath(self)
            }
            #[inline]
            pub unsafe fn GetScriptLanguage(&self) -> root::lldb::ScriptLanguage {
                SBDebugger_GetScriptLanguage(self)
            }
            #[inline]
            pub unsafe fn SetScriptLanguage(&mut self, script_lang: root::lldb::ScriptLanguage) {
                SBDebugger_SetScriptLanguage(self, script_lang)
            }
            #[inline]
            pub unsafe fn GetREPLLanguage(&self) -> root::lldb::LanguageType {
                SBDebugger_GetREPLLanguage(self)
            }
            #[inline]
            pub unsafe fn SetREPLLanguage(&mut self, repl_lang: root::lldb::LanguageType) {
                SBDebugger_SetREPLLanguage(self, repl_lang)
            }
            #[inline]
            pub unsafe fn GetCloseInputOnEOF(&self) -> bool {
                SBDebugger_GetCloseInputOnEOF(self)
            }
            #[inline]
            pub unsafe fn SetCloseInputOnEOF(&mut self, b: bool) {
                SBDebugger_SetCloseInputOnEOF(self, b)
            }
            #[inline]
            pub unsafe fn GetCategory(
                &mut self,
                category_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTypeCategory {
                SBDebugger_GetCategory(self, category_name)
            }
            #[inline]
            pub unsafe fn GetCategory1(
                &mut self,
                lang_type: root::lldb::LanguageType,
            ) -> root::lldb::SBTypeCategory {
                SBDebugger_GetCategory1(self, lang_type)
            }
            #[inline]
            pub unsafe fn CreateCategory(
                &mut self,
                category_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTypeCategory {
                SBDebugger_CreateCategory(self, category_name)
            }
            #[inline]
            pub unsafe fn DeleteCategory(
                &mut self,
                category_name: *const ::std::os::raw::c_char,
            ) -> bool {
                SBDebugger_DeleteCategory(self, category_name)
            }
            #[inline]
            pub unsafe fn GetNumCategories(&mut self) -> u32 {
                SBDebugger_GetNumCategories(self)
            }
            #[inline]
            pub unsafe fn GetCategoryAtIndex(&mut self, arg1: u32) -> root::lldb::SBTypeCategory {
                SBDebugger_GetCategoryAtIndex(self, arg1)
            }
            #[inline]
            pub unsafe fn GetDefaultCategory(&mut self) -> root::lldb::SBTypeCategory {
                SBDebugger_GetDefaultCategory(self)
            }
            #[inline]
            pub unsafe fn GetFormatForType(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeFormat {
                SBDebugger_GetFormatForType(self, arg1)
            }
            #[inline]
            pub unsafe fn GetSummaryForType(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeSummary {
                SBDebugger_GetSummaryForType(self, arg1)
            }
            #[inline]
            pub unsafe fn GetFilterForType(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeFilter {
                SBDebugger_GetFilterForType(self, arg1)
            }
            #[inline]
            pub unsafe fn GetSyntheticForType(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeSynthetic {
                SBDebugger_GetSyntheticForType(self, arg1)
            }
            #[inline]
            pub unsafe fn RunCommandInterpreter(
                &mut self,
                auto_handle_events: bool,
                spawn_thread: bool,
            ) {
                SBDebugger_RunCommandInterpreter(self, auto_handle_events, spawn_thread)
            }
            #[inline]
            pub unsafe fn RunCommandInterpreter1(
                &mut self,
                auto_handle_events: bool,
                spawn_thread: bool,
                options: *mut root::lldb::SBCommandInterpreterRunOptions,
                num_errors: *mut ::std::os::raw::c_int,
                quit_requested: *mut bool,
                stopped_for_crash: *mut bool,
            ) {
                SBDebugger_RunCommandInterpreter1(
                    self,
                    auto_handle_events,
                    spawn_thread,
                    options,
                    num_errors,
                    quit_requested,
                    stopped_for_crash,
                )
            }
            #[inline]
            pub unsafe fn RunCommandInterpreter2(
                &mut self,
                options: *const root::lldb::SBCommandInterpreterRunOptions,
            ) -> root::lldb::SBCommandInterpreterRunResult {
                SBDebugger_RunCommandInterpreter2(self, options)
            }
            #[inline]
            pub unsafe fn RunREPL(
                &mut self,
                language: root::lldb::LanguageType,
                repl_options: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError {
                SBDebugger_RunREPL(self, language, repl_options)
            }
            #[inline]
            pub unsafe fn LoadTraceFromFile(
                &mut self,
                error: *mut root::lldb::SBError,
                trace_description_file: *const root::lldb::SBFileSpec,
            ) -> root::lldb::SBTrace {
                SBDebugger_LoadTraceFromFile(self, error, trace_description_file)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBDebugger_SBDebugger(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBDebugger) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBDebugger_SBDebugger1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(debugger_sp: *const root::lldb::DebuggerSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBDebugger_SBDebugger2(__bindgen_tmp.as_mut_ptr(), debugger_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBDebugger_SBDebugger_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBScriptObject {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb14SBScriptObject7IsValidEv"]
            pub fn SBScriptObject_IsValid(this: *const root::lldb::SBScriptObject) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb14SBScriptObject10GetPointerEv"]
            pub fn SBScriptObject_GetPointer(
                this: *const root::lldb::SBScriptObject,
            ) -> root::lldb::ScriptObjectPtr;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb14SBScriptObject11GetLanguageEv"]
            pub fn SBScriptObject_GetLanguage(
                this: *const root::lldb::SBScriptObject,
            ) -> root::lldb::ScriptLanguage;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBScriptObject3getEv"]
            pub fn SBScriptObject_get(
                this: *mut root::lldb::SBScriptObject,
            ) -> *mut root::lldb_private::ScriptObject;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBScriptObject3refEv"]
            pub fn SBScriptObject_ref(
                this: *mut root::lldb::SBScriptObject,
            ) -> *mut root::lldb_private::ScriptObject;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb14SBScriptObject3refEv"]
            pub fn SBScriptObject_ref1(
                this: *const root::lldb::SBScriptObject,
            ) -> *const root::lldb_private::ScriptObject;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBScriptObjectC1EPvNS_14ScriptLanguageE"]
            pub fn SBScriptObject_SBScriptObject(
                this: *mut root::lldb::SBScriptObject,
                ptr: root::lldb::ScriptObjectPtr,
                lang: root::lldb::ScriptLanguage,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBScriptObjectC1ERKS0_"]
            pub fn SBScriptObject_SBScriptObject1(
                this: *mut root::lldb::SBScriptObject,
                rhs: *const root::lldb::SBScriptObject,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBScriptObjectD1Ev"]
            pub fn SBScriptObject_SBScriptObject_destructor(this: *mut root::lldb::SBScriptObject);
        }
        impl SBScriptObject {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBScriptObject_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetPointer(&self) -> root::lldb::ScriptObjectPtr {
                SBScriptObject_GetPointer(self)
            }
            #[inline]
            pub unsafe fn GetLanguage(&self) -> root::lldb::ScriptLanguage {
                SBScriptObject_GetLanguage(self)
            }
            #[inline]
            pub unsafe fn get(&mut self) -> *mut root::lldb_private::ScriptObject {
                SBScriptObject_get(self)
            }
            #[inline]
            pub unsafe fn ref_(&mut self) -> *mut root::lldb_private::ScriptObject {
                SBScriptObject_ref(self)
            }
            #[inline]
            pub unsafe fn ref1(&self) -> *const root::lldb_private::ScriptObject {
                SBScriptObject_ref1(self)
            }
            #[inline]
            pub unsafe fn new(
                ptr: root::lldb::ScriptObjectPtr,
                lang: root::lldb::ScriptLanguage,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBScriptObject_SBScriptObject(__bindgen_tmp.as_mut_ptr(), ptr, lang);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBScriptObject) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBScriptObject_SBScriptObject1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBScriptObject_SBScriptObject_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBStructuredData {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData7IsValidEv"]
            pub fn SBStructuredData_IsValid(this: *const root::lldb::SBStructuredData) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBStructuredData11SetFromJSONERNS_8SBStreamE"]
            pub fn SBStructuredData_SetFromJSON(
                this: *mut root::lldb::SBStructuredData,
                stream: *mut root::lldb::SBStream,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBStructuredData11SetFromJSONEPKc"]
            pub fn SBStructuredData_SetFromJSON1(
                this: *mut root::lldb::SBStructuredData,
                json: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBStructuredData5ClearEv"]
            pub fn SBStructuredData_Clear(this: *mut root::lldb::SBStructuredData);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData9GetAsJSONERNS_8SBStreamE"]
            pub fn SBStructuredData_GetAsJSON(
                this: *const root::lldb::SBStructuredData,
                stream: *mut root::lldb::SBStream,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData14GetDescriptionERNS_8SBStreamE"]
            pub fn SBStructuredData_GetDescription(
                this: *const root::lldb::SBStructuredData,
                stream: *mut root::lldb::SBStream,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData7GetTypeEv"]
            pub fn SBStructuredData_GetType(
                this: *const root::lldb::SBStructuredData,
            ) -> root::lldb::StructuredDataType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData7GetSizeEv"]
            pub fn SBStructuredData_GetSize(this: *const root::lldb::SBStructuredData) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData7GetKeysERNS_12SBStringListE"]
            pub fn SBStructuredData_GetKeys(
                this: *const root::lldb::SBStructuredData,
                keys: *mut root::lldb::SBStringList,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData14GetValueForKeyEPKc"]
            pub fn SBStructuredData_GetValueForKey(
                this: *const root::lldb::SBStructuredData,
                key: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData14GetItemAtIndexEm"]
            pub fn SBStructuredData_GetItemAtIndex(
                this: *const root::lldb::SBStructuredData,
                idx: usize,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData23GetUnsignedIntegerValueEm"]
            pub fn SBStructuredData_GetUnsignedIntegerValue(
                this: *const root::lldb::SBStructuredData,
                fail_value: u64,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData21GetSignedIntegerValueEl"]
            pub fn SBStructuredData_GetSignedIntegerValue(
                this: *const root::lldb::SBStructuredData,
                fail_value: i64,
            ) -> i64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData15GetIntegerValueEm"]
            pub fn SBStructuredData_GetIntegerValue(
                this: *const root::lldb::SBStructuredData,
                fail_value: u64,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData13GetFloatValueEd"]
            pub fn SBStructuredData_GetFloatValue(
                this: *const root::lldb::SBStructuredData,
                fail_value: f64,
            ) -> f64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData15GetBooleanValueEb"]
            pub fn SBStructuredData_GetBooleanValue(
                this: *const root::lldb::SBStructuredData,
                fail_value: bool,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData14GetStringValueEPcm"]
            pub fn SBStructuredData_GetStringValue(
                this: *const root::lldb::SBStructuredData,
                dst: *mut ::std::os::raw::c_char,
                dst_len: usize,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBStructuredData15GetGenericValueEv"]
            pub fn SBStructuredData_GetGenericValue(
                this: *const root::lldb::SBStructuredData,
            ) -> root::lldb::SBScriptObject;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBStructuredDataC1Ev"]
            pub fn SBStructuredData_SBStructuredData(this: *mut root::lldb::SBStructuredData);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBStructuredDataC1ERKS0_"]
            pub fn SBStructuredData_SBStructuredData1(
                this: *mut root::lldb::SBStructuredData,
                rhs: *const root::lldb::SBStructuredData,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBStructuredDataC1ENS_14SBScriptObjectERKNS_10SBDebuggerE"]
            pub fn SBStructuredData_SBStructuredData2(
                this: *mut root::lldb::SBStructuredData,
                obj: root::lldb::SBScriptObject,
                debugger: *const root::lldb::SBDebugger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBStructuredDataC1ERKN12lldb_private18StructuredDataImplE"]
            pub fn SBStructuredData_SBStructuredData3(
                this: *mut root::lldb::SBStructuredData,
                impl_: *const root::lldb_private::StructuredDataImpl,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBStructuredDataC1ERKSt10shared_ptrIN12lldb_private5EventEE"]
            pub fn SBStructuredData_SBStructuredData4(
                this: *mut root::lldb::SBStructuredData,
                event_sp: *const root::lldb::EventSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBStructuredDataD1Ev"]
            pub fn SBStructuredData_SBStructuredData_destructor(
                this: *mut root::lldb::SBStructuredData,
            );
        }
        impl SBStructuredData {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBStructuredData_IsValid(self)
            }
            #[inline]
            pub unsafe fn SetFromJSON(
                &mut self,
                stream: *mut root::lldb::SBStream,
            ) -> root::lldb::SBError {
                SBStructuredData_SetFromJSON(self, stream)
            }
            #[inline]
            pub unsafe fn SetFromJSON1(
                &mut self,
                json: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError {
                SBStructuredData_SetFromJSON1(self, json)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBStructuredData_Clear(self)
            }
            #[inline]
            pub unsafe fn GetAsJSON(
                &self,
                stream: *mut root::lldb::SBStream,
            ) -> root::lldb::SBError {
                SBStructuredData_GetAsJSON(self, stream)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &self,
                stream: *mut root::lldb::SBStream,
            ) -> root::lldb::SBError {
                SBStructuredData_GetDescription(self, stream)
            }
            #[inline]
            pub unsafe fn GetType(&self) -> root::lldb::StructuredDataType {
                SBStructuredData_GetType(self)
            }
            #[inline]
            pub unsafe fn GetSize(&self) -> usize {
                SBStructuredData_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetKeys(&self, keys: *mut root::lldb::SBStringList) -> bool {
                SBStructuredData_GetKeys(self, keys)
            }
            #[inline]
            pub unsafe fn GetValueForKey(
                &self,
                key: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBStructuredData {
                SBStructuredData_GetValueForKey(self, key)
            }
            #[inline]
            pub unsafe fn GetItemAtIndex(&self, idx: usize) -> root::lldb::SBStructuredData {
                SBStructuredData_GetItemAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetUnsignedIntegerValue(&self, fail_value: u64) -> u64 {
                SBStructuredData_GetUnsignedIntegerValue(self, fail_value)
            }
            #[inline]
            pub unsafe fn GetSignedIntegerValue(&self, fail_value: i64) -> i64 {
                SBStructuredData_GetSignedIntegerValue(self, fail_value)
            }
            #[inline]
            pub unsafe fn GetIntegerValue(&self, fail_value: u64) -> u64 {
                SBStructuredData_GetIntegerValue(self, fail_value)
            }
            #[inline]
            pub unsafe fn GetFloatValue(&self, fail_value: f64) -> f64 {
                SBStructuredData_GetFloatValue(self, fail_value)
            }
            #[inline]
            pub unsafe fn GetBooleanValue(&self, fail_value: bool) -> bool {
                SBStructuredData_GetBooleanValue(self, fail_value)
            }
            #[inline]
            pub unsafe fn GetStringValue(
                &self,
                dst: *mut ::std::os::raw::c_char,
                dst_len: usize,
            ) -> usize {
                SBStructuredData_GetStringValue(self, dst, dst_len)
            }
            #[inline]
            pub unsafe fn GetGenericValue(&self) -> root::lldb::SBScriptObject {
                SBStructuredData_GetGenericValue(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBStructuredData_SBStructuredData(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBStructuredData) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBStructuredData_SBStructuredData1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                obj: root::lldb::SBScriptObject,
                debugger: *const root::lldb::SBDebugger,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBStructuredData_SBStructuredData2(__bindgen_tmp.as_mut_ptr(), obj, debugger);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(impl_: *const root::lldb_private::StructuredDataImpl) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBStructuredData_SBStructuredData3(__bindgen_tmp.as_mut_ptr(), impl_);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(event_sp: *const root::lldb::EventSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBStructuredData_SBStructuredData4(__bindgen_tmp.as_mut_ptr(), event_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBStructuredData_SBStructuredData_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBCommandInterpreter {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        pub const SBCommandInterpreter_eBroadcastBitThreadShouldExit:
            root::lldb::SBCommandInterpreter__bindgen_ty_1 = 1;
        pub const SBCommandInterpreter_eBroadcastBitResetPrompt:
            root::lldb::SBCommandInterpreter__bindgen_ty_1 = 2;
        pub const SBCommandInterpreter_eBroadcastBitQuitCommandReceived:
            root::lldb::SBCommandInterpreter__bindgen_ty_1 = 4;
        pub const SBCommandInterpreter_eBroadcastBitAsynchronousOutputData:
            root::lldb::SBCommandInterpreter__bindgen_ty_1 = 8;
        pub const SBCommandInterpreter_eBroadcastBitAsynchronousErrorData:
            root::lldb::SBCommandInterpreter__bindgen_ty_1 = 16;
        pub type SBCommandInterpreter__bindgen_ty_1 = ::std::os::raw::c_uint;
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter24GetArgumentTypeAsCStringENS_19CommandArgumentTypeE"]
            pub fn SBCommandInterpreter_GetArgumentTypeAsCString(
                arg_type: root::lldb::CommandArgumentType,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter31GetArgumentDescriptionAsCStringENS_19CommandArgumentTypeE"]
            pub fn SBCommandInterpreter_GetArgumentDescriptionAsCString(
                arg_type: root::lldb::CommandArgumentType,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter30EventIsCommandInterpreterEventERKNS_7SBEventE"]
            pub fn SBCommandInterpreter_EventIsCommandInterpreterEvent(
                event: *const root::lldb::SBEvent,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb20SBCommandInterpreter7IsValidEv"]
            pub fn SBCommandInterpreter_IsValid(
                this: *const root::lldb::SBCommandInterpreter,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter13CommandExistsEPKc"]
            pub fn SBCommandInterpreter_CommandExists(
                this: *mut root::lldb::SBCommandInterpreter,
                cmd: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter17UserCommandExistsEPKc"]
            pub fn SBCommandInterpreter_UserCommandExists(
                this: *mut root::lldb::SBCommandInterpreter,
                cmd: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter11AliasExistsEPKc"]
            pub fn SBCommandInterpreter_AliasExists(
                this: *mut root::lldb::SBCommandInterpreter,
                cmd: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter14GetBroadcasterEv"]
            pub fn SBCommandInterpreter_GetBroadcaster(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> root::lldb::SBBroadcaster;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter19GetBroadcasterClassEv"]
            pub fn SBCommandInterpreter_GetBroadcasterClass() -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter11HasCommandsEv"]
            pub fn SBCommandInterpreter_HasCommands(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter10HasAliasesEv"]
            pub fn SBCommandInterpreter_HasAliases(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter15HasAliasOptionsEv"]
            pub fn SBCommandInterpreter_HasAliasOptions(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter13IsInteractiveEv"]
            pub fn SBCommandInterpreter_IsInteractive(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter10GetProcessEv"]
            pub fn SBCommandInterpreter_GetProcess(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter11GetDebuggerEv"]
            pub fn SBCommandInterpreter_GetDebugger(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> root::lldb::SBDebugger;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter19AddMultiwordCommandEPKcS2_"]
            pub fn SBCommandInterpreter_AddMultiwordCommand(
                this: *mut root::lldb::SBCommandInterpreter,
                name: *const ::std::os::raw::c_char,
                help: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter10AddCommandEPKcPNS_24SBCommandPluginInterfaceES2_"]
            pub fn SBCommandInterpreter_AddCommand(
                this: *mut root::lldb::SBCommandInterpreter,
                name: *const ::std::os::raw::c_char,
                impl_: *mut root::lldb::SBCommandPluginInterface,
                help: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter10AddCommandEPKcPNS_24SBCommandPluginInterfaceES2_S2_"]
            pub fn SBCommandInterpreter_AddCommand1(
                this: *mut root::lldb::SBCommandInterpreter,
                name: *const ::std::os::raw::c_char,
                impl_: *mut root::lldb::SBCommandPluginInterface,
                help: *const ::std::os::raw::c_char,
                syntax: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter10AddCommandEPKcPNS_24SBCommandPluginInterfaceES2_S2_S2_"]
            pub fn SBCommandInterpreter_AddCommand2(
                this: *mut root::lldb::SBCommandInterpreter,
                name: *const ::std::os::raw::c_char,
                impl_: *mut root::lldb::SBCommandPluginInterface,
                help: *const ::std::os::raw::c_char,
                syntax: *const ::std::os::raw::c_char,
                auto_repeat_command: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter31SourceInitFileInGlobalDirectoryERNS_21SBCommandReturnObjectE"]
            pub fn SBCommandInterpreter_SourceInitFileInGlobalDirectory(
                this: *mut root::lldb::SBCommandInterpreter,
                result: *mut root::lldb::SBCommandReturnObject,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter29SourceInitFileInHomeDirectoryERNS_21SBCommandReturnObjectE"]
            pub fn SBCommandInterpreter_SourceInitFileInHomeDirectory(
                this: *mut root::lldb::SBCommandInterpreter,
                result: *mut root::lldb::SBCommandReturnObject,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter29SourceInitFileInHomeDirectoryERNS_21SBCommandReturnObjectEb"]
            pub fn SBCommandInterpreter_SourceInitFileInHomeDirectory1(
                this: *mut root::lldb::SBCommandInterpreter,
                result: *mut root::lldb::SBCommandReturnObject,
                is_repl: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter39SourceInitFileInCurrentWorkingDirectoryERNS_21SBCommandReturnObjectE"]
            pub fn SBCommandInterpreter_SourceInitFileInCurrentWorkingDirectory(
                this: *mut root::lldb::SBCommandInterpreter,
                result: *mut root::lldb::SBCommandReturnObject,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter13HandleCommandEPKcRNS_21SBCommandReturnObjectEb"]
            pub fn SBCommandInterpreter_HandleCommand(
                this: *mut root::lldb::SBCommandInterpreter,
                command_line: *const ::std::os::raw::c_char,
                result: *mut root::lldb::SBCommandReturnObject,
                add_to_history: bool,
            ) -> root::lldb::ReturnStatus;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter13HandleCommandEPKcRNS_18SBExecutionContextERNS_21SBCommandReturnObjectEb"]
            pub fn SBCommandInterpreter_HandleCommand1(
                this: *mut root::lldb::SBCommandInterpreter,
                command_line: *const ::std::os::raw::c_char,
                exe_ctx: *mut root::lldb::SBExecutionContext,
                result: *mut root::lldb::SBCommandReturnObject,
                add_to_history: bool,
            ) -> root::lldb::ReturnStatus;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter22HandleCommandsFromFileERNS_10SBFileSpecERNS_18SBExecutionContextERNS_30SBCommandInterpreterRunOptionsENS_21SBCommandReturnObjectE"]
            pub fn SBCommandInterpreter_HandleCommandsFromFile(
                this: *mut root::lldb::SBCommandInterpreter,
                file: *mut root::lldb::SBFileSpec,
                override_context: *mut root::lldb::SBExecutionContext,
                options: *mut root::lldb::SBCommandInterpreterRunOptions,
                result: root::lldb::SBCommandReturnObject,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter16HandleCompletionEPKcS2_S2_iiRNS_12SBStringListE"]
            pub fn SBCommandInterpreter_HandleCompletion(
                this: *mut root::lldb::SBCommandInterpreter,
                current_line: *const ::std::os::raw::c_char,
                cursor: *const ::std::os::raw::c_char,
                last_char: *const ::std::os::raw::c_char,
                match_start_point: ::std::os::raw::c_int,
                max_return_elements: ::std::os::raw::c_int,
                matches: *mut root::lldb::SBStringList,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter16HandleCompletionEPKcjiiRNS_12SBStringListE"]
            pub fn SBCommandInterpreter_HandleCompletion1(
                this: *mut root::lldb::SBCommandInterpreter,
                current_line: *const ::std::os::raw::c_char,
                cursor_pos: u32,
                match_start_point: ::std::os::raw::c_int,
                max_return_elements: ::std::os::raw::c_int,
                matches: *mut root::lldb::SBStringList,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter32HandleCompletionWithDescriptionsEPKcS2_S2_iiRNS_12SBStringListES4_"]
            pub fn SBCommandInterpreter_HandleCompletionWithDescriptions(
                this: *mut root::lldb::SBCommandInterpreter,
                current_line: *const ::std::os::raw::c_char,
                cursor: *const ::std::os::raw::c_char,
                last_char: *const ::std::os::raw::c_char,
                match_start_point: ::std::os::raw::c_int,
                max_return_elements: ::std::os::raw::c_int,
                matches: *mut root::lldb::SBStringList,
                descriptions: *mut root::lldb::SBStringList,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter32HandleCompletionWithDescriptionsEPKcjiiRNS_12SBStringListES4_"]
            pub fn SBCommandInterpreter_HandleCompletionWithDescriptions1(
                this: *mut root::lldb::SBCommandInterpreter,
                current_line: *const ::std::os::raw::c_char,
                cursor_pos: u32,
                match_start_point: ::std::os::raw::c_int,
                max_return_elements: ::std::os::raw::c_int,
                matches: *mut root::lldb::SBStringList,
                descriptions: *mut root::lldb::SBStringList,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb20SBCommandInterpreter14WasInterruptedEv"]
            pub fn SBCommandInterpreter_WasInterrupted(
                this: *const root::lldb::SBCommandInterpreter,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter16InterruptCommandEv"]
            pub fn SBCommandInterpreter_InterruptCommand(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter26SetCommandOverrideCallbackEPKcPFbPvPS2_ES3_"]
            pub fn SBCommandInterpreter_SetCommandOverrideCallback(
                this: *mut root::lldb::SBCommandInterpreter,
                command_name: *const ::std::os::raw::c_char,
                callback: root::lldb::CommandOverrideCallback,
                baton: *mut ::std::os::raw::c_void,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter8IsActiveEv"]
            pub fn SBCommandInterpreter_IsActive(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter27GetIOHandlerControlSequenceEc"]
            pub fn SBCommandInterpreter_GetIOHandlerControlSequence(
                this: *mut root::lldb::SBCommandInterpreter,
                ch: ::std::os::raw::c_char,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter15GetPromptOnQuitEv"]
            pub fn SBCommandInterpreter_GetPromptOnQuit(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter15SetPromptOnQuitEb"]
            pub fn SBCommandInterpreter_SetPromptOnQuit(
                this: *mut root::lldb::SBCommandInterpreter,
                b: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter19AllowExitCodeOnQuitEb"]
            pub fn SBCommandInterpreter_AllowExitCodeOnQuit(
                this: *mut root::lldb::SBCommandInterpreter,
                allow: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter21HasCustomQuitExitCodeEv"]
            pub fn SBCommandInterpreter_HasCustomQuitExitCode(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter13GetQuitStatusEv"]
            pub fn SBCommandInterpreter_GetQuitStatus(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter14ResolveCommandEPKcRNS_21SBCommandReturnObjectE"]
            pub fn SBCommandInterpreter_ResolveCommand(
                this: *mut root::lldb::SBCommandInterpreter,
                command_line: *const ::std::os::raw::c_char,
                result: *mut root::lldb::SBCommandReturnObject,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter13GetStatisticsEv"]
            pub fn SBCommandInterpreter_GetStatistics(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter13GetTranscriptEv"]
            pub fn SBCommandInterpreter_GetTranscript(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> root::lldb::SBStructuredData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter3refEv"]
            pub fn SBCommandInterpreter_ref(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> *mut root::lldb_private::CommandInterpreter;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter3getEv"]
            pub fn SBCommandInterpreter_get(
                this: *mut root::lldb::SBCommandInterpreter,
            ) -> *mut root::lldb_private::CommandInterpreter;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreter5resetEPN12lldb_private18CommandInterpreterE"]
            pub fn SBCommandInterpreter_reset(
                this: *mut root::lldb::SBCommandInterpreter,
                arg1: *mut root::lldb_private::CommandInterpreter,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreterC1Ev"]
            pub fn SBCommandInterpreter_SBCommandInterpreter(
                this: *mut root::lldb::SBCommandInterpreter,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreterC1ERKS0_"]
            pub fn SBCommandInterpreter_SBCommandInterpreter1(
                this: *mut root::lldb::SBCommandInterpreter,
                rhs: *const root::lldb::SBCommandInterpreter,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreterC1EPN12lldb_private18CommandInterpreterE"]
            pub fn SBCommandInterpreter_SBCommandInterpreter2(
                this: *mut root::lldb::SBCommandInterpreter,
                interpreter_ptr: *mut root::lldb_private::CommandInterpreter,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBCommandInterpreterD1Ev"]
            pub fn SBCommandInterpreter_SBCommandInterpreter_destructor(
                this: *mut root::lldb::SBCommandInterpreter,
            );
        }
        impl SBCommandInterpreter {
            #[inline]
            pub unsafe fn GetArgumentTypeAsCString(
                arg_type: root::lldb::CommandArgumentType,
            ) -> *const ::std::os::raw::c_char {
                SBCommandInterpreter_GetArgumentTypeAsCString(arg_type)
            }
            #[inline]
            pub unsafe fn GetArgumentDescriptionAsCString(
                arg_type: root::lldb::CommandArgumentType,
            ) -> *const ::std::os::raw::c_char {
                SBCommandInterpreter_GetArgumentDescriptionAsCString(arg_type)
            }
            #[inline]
            pub unsafe fn EventIsCommandInterpreterEvent(
                event: *const root::lldb::SBEvent,
            ) -> bool {
                SBCommandInterpreter_EventIsCommandInterpreterEvent(event)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBCommandInterpreter_IsValid(self)
            }
            #[inline]
            pub unsafe fn CommandExists(&mut self, cmd: *const ::std::os::raw::c_char) -> bool {
                SBCommandInterpreter_CommandExists(self, cmd)
            }
            #[inline]
            pub unsafe fn UserCommandExists(&mut self, cmd: *const ::std::os::raw::c_char) -> bool {
                SBCommandInterpreter_UserCommandExists(self, cmd)
            }
            #[inline]
            pub unsafe fn AliasExists(&mut self, cmd: *const ::std::os::raw::c_char) -> bool {
                SBCommandInterpreter_AliasExists(self, cmd)
            }
            #[inline]
            pub unsafe fn GetBroadcaster(&mut self) -> root::lldb::SBBroadcaster {
                SBCommandInterpreter_GetBroadcaster(self)
            }
            #[inline]
            pub unsafe fn GetBroadcasterClass() -> *const ::std::os::raw::c_char {
                SBCommandInterpreter_GetBroadcasterClass()
            }
            #[inline]
            pub unsafe fn HasCommands(&mut self) -> bool {
                SBCommandInterpreter_HasCommands(self)
            }
            #[inline]
            pub unsafe fn HasAliases(&mut self) -> bool {
                SBCommandInterpreter_HasAliases(self)
            }
            #[inline]
            pub unsafe fn HasAliasOptions(&mut self) -> bool {
                SBCommandInterpreter_HasAliasOptions(self)
            }
            #[inline]
            pub unsafe fn IsInteractive(&mut self) -> bool {
                SBCommandInterpreter_IsInteractive(self)
            }
            #[inline]
            pub unsafe fn GetProcess(&mut self) -> root::lldb::SBProcess {
                SBCommandInterpreter_GetProcess(self)
            }
            #[inline]
            pub unsafe fn GetDebugger(&mut self) -> root::lldb::SBDebugger {
                SBCommandInterpreter_GetDebugger(self)
            }
            #[inline]
            pub unsafe fn AddMultiwordCommand(
                &mut self,
                name: *const ::std::os::raw::c_char,
                help: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand {
                SBCommandInterpreter_AddMultiwordCommand(self, name, help)
            }
            #[inline]
            pub unsafe fn AddCommand(
                &mut self,
                name: *const ::std::os::raw::c_char,
                impl_: *mut root::lldb::SBCommandPluginInterface,
                help: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand {
                SBCommandInterpreter_AddCommand(self, name, impl_, help)
            }
            #[inline]
            pub unsafe fn AddCommand1(
                &mut self,
                name: *const ::std::os::raw::c_char,
                impl_: *mut root::lldb::SBCommandPluginInterface,
                help: *const ::std::os::raw::c_char,
                syntax: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand {
                SBCommandInterpreter_AddCommand1(self, name, impl_, help, syntax)
            }
            #[inline]
            pub unsafe fn AddCommand2(
                &mut self,
                name: *const ::std::os::raw::c_char,
                impl_: *mut root::lldb::SBCommandPluginInterface,
                help: *const ::std::os::raw::c_char,
                syntax: *const ::std::os::raw::c_char,
                auto_repeat_command: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand {
                SBCommandInterpreter_AddCommand2(
                    self,
                    name,
                    impl_,
                    help,
                    syntax,
                    auto_repeat_command,
                )
            }
            #[inline]
            pub unsafe fn SourceInitFileInGlobalDirectory(
                &mut self,
                result: *mut root::lldb::SBCommandReturnObject,
            ) {
                SBCommandInterpreter_SourceInitFileInGlobalDirectory(self, result)
            }
            #[inline]
            pub unsafe fn SourceInitFileInHomeDirectory(
                &mut self,
                result: *mut root::lldb::SBCommandReturnObject,
            ) {
                SBCommandInterpreter_SourceInitFileInHomeDirectory(self, result)
            }
            #[inline]
            pub unsafe fn SourceInitFileInHomeDirectory1(
                &mut self,
                result: *mut root::lldb::SBCommandReturnObject,
                is_repl: bool,
            ) {
                SBCommandInterpreter_SourceInitFileInHomeDirectory1(self, result, is_repl)
            }
            #[inline]
            pub unsafe fn SourceInitFileInCurrentWorkingDirectory(
                &mut self,
                result: *mut root::lldb::SBCommandReturnObject,
            ) {
                SBCommandInterpreter_SourceInitFileInCurrentWorkingDirectory(self, result)
            }
            #[inline]
            pub unsafe fn HandleCommand(
                &mut self,
                command_line: *const ::std::os::raw::c_char,
                result: *mut root::lldb::SBCommandReturnObject,
                add_to_history: bool,
            ) -> root::lldb::ReturnStatus {
                SBCommandInterpreter_HandleCommand(self, command_line, result, add_to_history)
            }
            #[inline]
            pub unsafe fn HandleCommand1(
                &mut self,
                command_line: *const ::std::os::raw::c_char,
                exe_ctx: *mut root::lldb::SBExecutionContext,
                result: *mut root::lldb::SBCommandReturnObject,
                add_to_history: bool,
            ) -> root::lldb::ReturnStatus {
                SBCommandInterpreter_HandleCommand1(
                    self,
                    command_line,
                    exe_ctx,
                    result,
                    add_to_history,
                )
            }
            #[inline]
            pub unsafe fn HandleCommandsFromFile(
                &mut self,
                file: *mut root::lldb::SBFileSpec,
                override_context: *mut root::lldb::SBExecutionContext,
                options: *mut root::lldb::SBCommandInterpreterRunOptions,
                result: root::lldb::SBCommandReturnObject,
            ) {
                SBCommandInterpreter_HandleCommandsFromFile(
                    self,
                    file,
                    override_context,
                    options,
                    result,
                )
            }
            #[inline]
            pub unsafe fn HandleCompletion(
                &mut self,
                current_line: *const ::std::os::raw::c_char,
                cursor: *const ::std::os::raw::c_char,
                last_char: *const ::std::os::raw::c_char,
                match_start_point: ::std::os::raw::c_int,
                max_return_elements: ::std::os::raw::c_int,
                matches: *mut root::lldb::SBStringList,
            ) -> ::std::os::raw::c_int {
                SBCommandInterpreter_HandleCompletion(
                    self,
                    current_line,
                    cursor,
                    last_char,
                    match_start_point,
                    max_return_elements,
                    matches,
                )
            }
            #[inline]
            pub unsafe fn HandleCompletion1(
                &mut self,
                current_line: *const ::std::os::raw::c_char,
                cursor_pos: u32,
                match_start_point: ::std::os::raw::c_int,
                max_return_elements: ::std::os::raw::c_int,
                matches: *mut root::lldb::SBStringList,
            ) -> ::std::os::raw::c_int {
                SBCommandInterpreter_HandleCompletion1(
                    self,
                    current_line,
                    cursor_pos,
                    match_start_point,
                    max_return_elements,
                    matches,
                )
            }
            #[inline]
            pub unsafe fn HandleCompletionWithDescriptions(
                &mut self,
                current_line: *const ::std::os::raw::c_char,
                cursor: *const ::std::os::raw::c_char,
                last_char: *const ::std::os::raw::c_char,
                match_start_point: ::std::os::raw::c_int,
                max_return_elements: ::std::os::raw::c_int,
                matches: *mut root::lldb::SBStringList,
                descriptions: *mut root::lldb::SBStringList,
            ) -> ::std::os::raw::c_int {
                SBCommandInterpreter_HandleCompletionWithDescriptions(
                    self,
                    current_line,
                    cursor,
                    last_char,
                    match_start_point,
                    max_return_elements,
                    matches,
                    descriptions,
                )
            }
            #[inline]
            pub unsafe fn HandleCompletionWithDescriptions1(
                &mut self,
                current_line: *const ::std::os::raw::c_char,
                cursor_pos: u32,
                match_start_point: ::std::os::raw::c_int,
                max_return_elements: ::std::os::raw::c_int,
                matches: *mut root::lldb::SBStringList,
                descriptions: *mut root::lldb::SBStringList,
            ) -> ::std::os::raw::c_int {
                SBCommandInterpreter_HandleCompletionWithDescriptions1(
                    self,
                    current_line,
                    cursor_pos,
                    match_start_point,
                    max_return_elements,
                    matches,
                    descriptions,
                )
            }
            #[inline]
            pub unsafe fn WasInterrupted(&self) -> bool {
                SBCommandInterpreter_WasInterrupted(self)
            }
            #[inline]
            pub unsafe fn InterruptCommand(&mut self) -> bool {
                SBCommandInterpreter_InterruptCommand(self)
            }
            #[inline]
            pub unsafe fn SetCommandOverrideCallback(
                &mut self,
                command_name: *const ::std::os::raw::c_char,
                callback: root::lldb::CommandOverrideCallback,
                baton: *mut ::std::os::raw::c_void,
            ) -> bool {
                SBCommandInterpreter_SetCommandOverrideCallback(self, command_name, callback, baton)
            }
            #[inline]
            pub unsafe fn IsActive(&mut self) -> bool {
                SBCommandInterpreter_IsActive(self)
            }
            #[inline]
            pub unsafe fn GetIOHandlerControlSequence(
                &mut self,
                ch: ::std::os::raw::c_char,
            ) -> *const ::std::os::raw::c_char {
                SBCommandInterpreter_GetIOHandlerControlSequence(self, ch)
            }
            #[inline]
            pub unsafe fn GetPromptOnQuit(&mut self) -> bool {
                SBCommandInterpreter_GetPromptOnQuit(self)
            }
            #[inline]
            pub unsafe fn SetPromptOnQuit(&mut self, b: bool) {
                SBCommandInterpreter_SetPromptOnQuit(self, b)
            }
            #[inline]
            pub unsafe fn AllowExitCodeOnQuit(&mut self, allow: bool) {
                SBCommandInterpreter_AllowExitCodeOnQuit(self, allow)
            }
            #[inline]
            pub unsafe fn HasCustomQuitExitCode(&mut self) -> bool {
                SBCommandInterpreter_HasCustomQuitExitCode(self)
            }
            #[inline]
            pub unsafe fn GetQuitStatus(&mut self) -> ::std::os::raw::c_int {
                SBCommandInterpreter_GetQuitStatus(self)
            }
            #[inline]
            pub unsafe fn ResolveCommand(
                &mut self,
                command_line: *const ::std::os::raw::c_char,
                result: *mut root::lldb::SBCommandReturnObject,
            ) {
                SBCommandInterpreter_ResolveCommand(self, command_line, result)
            }
            #[inline]
            pub unsafe fn GetStatistics(&mut self) -> root::lldb::SBStructuredData {
                SBCommandInterpreter_GetStatistics(self)
            }
            #[inline]
            pub unsafe fn GetTranscript(&mut self) -> root::lldb::SBStructuredData {
                SBCommandInterpreter_GetTranscript(self)
            }
            #[inline]
            pub unsafe fn ref_(&mut self) -> *mut root::lldb_private::CommandInterpreter {
                SBCommandInterpreter_ref(self)
            }
            #[inline]
            pub unsafe fn get(&mut self) -> *mut root::lldb_private::CommandInterpreter {
                SBCommandInterpreter_get(self)
            }
            #[inline]
            pub unsafe fn reset(&mut self, arg1: *mut root::lldb_private::CommandInterpreter) {
                SBCommandInterpreter_reset(self, arg1)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCommandInterpreter_SBCommandInterpreter(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBCommandInterpreter) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCommandInterpreter_SBCommandInterpreter1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                interpreter_ptr: *mut root::lldb_private::CommandInterpreter,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCommandInterpreter_SBCommandInterpreter2(
                    __bindgen_tmp.as_mut_ptr(),
                    interpreter_ptr,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBCommandInterpreter_SBCommandInterpreter_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBCommandPluginInterface {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBCommand {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBCommand7IsValidEv"]
            pub fn SBCommand_IsValid(this: *mut root::lldb::SBCommand) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBCommand7GetNameEv"]
            pub fn SBCommand_GetName(
                this: *mut root::lldb::SBCommand,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBCommand7GetHelpEv"]
            pub fn SBCommand_GetHelp(
                this: *mut root::lldb::SBCommand,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBCommand11GetHelpLongEv"]
            pub fn SBCommand_GetHelpLong(
                this: *mut root::lldb::SBCommand,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBCommand7SetHelpEPKc"]
            pub fn SBCommand_SetHelp(
                this: *mut root::lldb::SBCommand,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBCommand11SetHelpLongEPKc"]
            pub fn SBCommand_SetHelpLong(
                this: *mut root::lldb::SBCommand,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBCommand8GetFlagsEv"]
            pub fn SBCommand_GetFlags(this: *mut root::lldb::SBCommand) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBCommand8SetFlagsEj"]
            pub fn SBCommand_SetFlags(this: *mut root::lldb::SBCommand, flags: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBCommand19AddMultiwordCommandEPKcS2_"]
            pub fn SBCommand_AddMultiwordCommand(
                this: *mut root::lldb::SBCommand,
                name: *const ::std::os::raw::c_char,
                help: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBCommand10AddCommandEPKcPNS_24SBCommandPluginInterfaceES2_"]
            pub fn SBCommand_AddCommand(
                this: *mut root::lldb::SBCommand,
                name: *const ::std::os::raw::c_char,
                impl_: *mut root::lldb::SBCommandPluginInterface,
                help: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBCommand10AddCommandEPKcPNS_24SBCommandPluginInterfaceES2_S2_"]
            pub fn SBCommand_AddCommand1(
                this: *mut root::lldb::SBCommand,
                name: *const ::std::os::raw::c_char,
                impl_: *mut root::lldb::SBCommandPluginInterface,
                help: *const ::std::os::raw::c_char,
                syntax: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBCommand10AddCommandEPKcPNS_24SBCommandPluginInterfaceES2_S2_S2_"]
            pub fn SBCommand_AddCommand2(
                this: *mut root::lldb::SBCommand,
                name: *const ::std::os::raw::c_char,
                impl_: *mut root::lldb::SBCommandPluginInterface,
                help: *const ::std::os::raw::c_char,
                syntax: *const ::std::os::raw::c_char,
                auto_repeat_command: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb9SBCommandC1Ev"]
            pub fn SBCommand_SBCommand(this: *mut root::lldb::SBCommand);
        }
        impl SBCommand {
            #[inline]
            pub unsafe fn IsValid(&mut self) -> bool {
                SBCommand_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetName(&mut self) -> *const ::std::os::raw::c_char {
                SBCommand_GetName(self)
            }
            #[inline]
            pub unsafe fn GetHelp(&mut self) -> *const ::std::os::raw::c_char {
                SBCommand_GetHelp(self)
            }
            #[inline]
            pub unsafe fn GetHelpLong(&mut self) -> *const ::std::os::raw::c_char {
                SBCommand_GetHelpLong(self)
            }
            #[inline]
            pub unsafe fn SetHelp(&mut self, arg1: *const ::std::os::raw::c_char) {
                SBCommand_SetHelp(self, arg1)
            }
            #[inline]
            pub unsafe fn SetHelpLong(&mut self, arg1: *const ::std::os::raw::c_char) {
                SBCommand_SetHelpLong(self, arg1)
            }
            #[inline]
            pub unsafe fn GetFlags(&mut self) -> u32 {
                SBCommand_GetFlags(self)
            }
            #[inline]
            pub unsafe fn SetFlags(&mut self, flags: u32) {
                SBCommand_SetFlags(self, flags)
            }
            #[inline]
            pub unsafe fn AddMultiwordCommand(
                &mut self,
                name: *const ::std::os::raw::c_char,
                help: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand {
                SBCommand_AddMultiwordCommand(self, name, help)
            }
            #[inline]
            pub unsafe fn AddCommand(
                &mut self,
                name: *const ::std::os::raw::c_char,
                impl_: *mut root::lldb::SBCommandPluginInterface,
                help: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand {
                SBCommand_AddCommand(self, name, impl_, help)
            }
            #[inline]
            pub unsafe fn AddCommand1(
                &mut self,
                name: *const ::std::os::raw::c_char,
                impl_: *mut root::lldb::SBCommandPluginInterface,
                help: *const ::std::os::raw::c_char,
                syntax: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand {
                SBCommand_AddCommand1(self, name, impl_, help, syntax)
            }
            #[inline]
            pub unsafe fn AddCommand2(
                &mut self,
                name: *const ::std::os::raw::c_char,
                impl_: *mut root::lldb::SBCommandPluginInterface,
                help: *const ::std::os::raw::c_char,
                syntax: *const ::std::os::raw::c_char,
                auto_repeat_command: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBCommand {
                SBCommand_AddCommand2(self, name, impl_, help, syntax, auto_repeat_command)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCommand_SBCommand(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBCommandInterpreterRunOptions {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb30SBCommandInterpreterRunOptions17GetStopOnContinueEv"]
            pub fn SBCommandInterpreterRunOptions_GetStopOnContinue(
                this: *const root::lldb::SBCommandInterpreterRunOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb30SBCommandInterpreterRunOptions17SetStopOnContinueEb"]
            pub fn SBCommandInterpreterRunOptions_SetStopOnContinue(
                this: *mut root::lldb::SBCommandInterpreterRunOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb30SBCommandInterpreterRunOptions14GetStopOnErrorEv"]
            pub fn SBCommandInterpreterRunOptions_GetStopOnError(
                this: *const root::lldb::SBCommandInterpreterRunOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb30SBCommandInterpreterRunOptions14SetStopOnErrorEb"]
            pub fn SBCommandInterpreterRunOptions_SetStopOnError(
                this: *mut root::lldb::SBCommandInterpreterRunOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb30SBCommandInterpreterRunOptions14GetStopOnCrashEv"]
            pub fn SBCommandInterpreterRunOptions_GetStopOnCrash(
                this: *const root::lldb::SBCommandInterpreterRunOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb30SBCommandInterpreterRunOptions14SetStopOnCrashEb"]
            pub fn SBCommandInterpreterRunOptions_SetStopOnCrash(
                this: *mut root::lldb::SBCommandInterpreterRunOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb30SBCommandInterpreterRunOptions15GetEchoCommandsEv"]
            pub fn SBCommandInterpreterRunOptions_GetEchoCommands(
                this: *const root::lldb::SBCommandInterpreterRunOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb30SBCommandInterpreterRunOptions15SetEchoCommandsEb"]
            pub fn SBCommandInterpreterRunOptions_SetEchoCommands(
                this: *mut root::lldb::SBCommandInterpreterRunOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb30SBCommandInterpreterRunOptions22GetEchoCommentCommandsEv"]
            pub fn SBCommandInterpreterRunOptions_GetEchoCommentCommands(
                this: *const root::lldb::SBCommandInterpreterRunOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb30SBCommandInterpreterRunOptions22SetEchoCommentCommandsEb"]
            pub fn SBCommandInterpreterRunOptions_SetEchoCommentCommands(
                this: *mut root::lldb::SBCommandInterpreterRunOptions,
                echo: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb30SBCommandInterpreterRunOptions15GetPrintResultsEv"]
            pub fn SBCommandInterpreterRunOptions_GetPrintResults(
                this: *const root::lldb::SBCommandInterpreterRunOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb30SBCommandInterpreterRunOptions15SetPrintResultsEb"]
            pub fn SBCommandInterpreterRunOptions_SetPrintResults(
                this: *mut root::lldb::SBCommandInterpreterRunOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb30SBCommandInterpreterRunOptions14GetPrintErrorsEv"]
            pub fn SBCommandInterpreterRunOptions_GetPrintErrors(
                this: *const root::lldb::SBCommandInterpreterRunOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb30SBCommandInterpreterRunOptions14SetPrintErrorsEb"]
            pub fn SBCommandInterpreterRunOptions_SetPrintErrors(
                this: *mut root::lldb::SBCommandInterpreterRunOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb30SBCommandInterpreterRunOptions15GetAddToHistoryEv"]
            pub fn SBCommandInterpreterRunOptions_GetAddToHistory(
                this: *const root::lldb::SBCommandInterpreterRunOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb30SBCommandInterpreterRunOptions15SetAddToHistoryEb"]
            pub fn SBCommandInterpreterRunOptions_SetAddToHistory(
                this: *mut root::lldb::SBCommandInterpreterRunOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb30SBCommandInterpreterRunOptions19GetAutoHandleEventsEv"]
            pub fn SBCommandInterpreterRunOptions_GetAutoHandleEvents(
                this: *const root::lldb::SBCommandInterpreterRunOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb30SBCommandInterpreterRunOptions19SetAutoHandleEventsEb"]
            pub fn SBCommandInterpreterRunOptions_SetAutoHandleEvents(
                this: *mut root::lldb::SBCommandInterpreterRunOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb30SBCommandInterpreterRunOptions14GetSpawnThreadEv"]
            pub fn SBCommandInterpreterRunOptions_GetSpawnThread(
                this: *const root::lldb::SBCommandInterpreterRunOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb30SBCommandInterpreterRunOptions14SetSpawnThreadEb"]
            pub fn SBCommandInterpreterRunOptions_SetSpawnThread(
                this: *mut root::lldb::SBCommandInterpreterRunOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb30SBCommandInterpreterRunOptions15GetAllowRepeatsEv"]
            pub fn SBCommandInterpreterRunOptions_GetAllowRepeats(
                this: *const root::lldb::SBCommandInterpreterRunOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb30SBCommandInterpreterRunOptions15SetAllowRepeatsEb"]
            pub fn SBCommandInterpreterRunOptions_SetAllowRepeats(
                this: *mut root::lldb::SBCommandInterpreterRunOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb30SBCommandInterpreterRunOptionsC1Ev"]
            pub fn SBCommandInterpreterRunOptions_SBCommandInterpreterRunOptions(
                this: *mut root::lldb::SBCommandInterpreterRunOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb30SBCommandInterpreterRunOptionsC1ERKS0_"]
            pub fn SBCommandInterpreterRunOptions_SBCommandInterpreterRunOptions1(
                this: *mut root::lldb::SBCommandInterpreterRunOptions,
                rhs: *const root::lldb::SBCommandInterpreterRunOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb30SBCommandInterpreterRunOptionsD1Ev"]
            pub fn SBCommandInterpreterRunOptions_SBCommandInterpreterRunOptions_destructor(
                this: *mut root::lldb::SBCommandInterpreterRunOptions,
            );
        }
        impl SBCommandInterpreterRunOptions {
            #[inline]
            pub unsafe fn GetStopOnContinue(&self) -> bool {
                SBCommandInterpreterRunOptions_GetStopOnContinue(self)
            }
            #[inline]
            pub unsafe fn SetStopOnContinue(&mut self, arg1: bool) {
                SBCommandInterpreterRunOptions_SetStopOnContinue(self, arg1)
            }
            #[inline]
            pub unsafe fn GetStopOnError(&self) -> bool {
                SBCommandInterpreterRunOptions_GetStopOnError(self)
            }
            #[inline]
            pub unsafe fn SetStopOnError(&mut self, arg1: bool) {
                SBCommandInterpreterRunOptions_SetStopOnError(self, arg1)
            }
            #[inline]
            pub unsafe fn GetStopOnCrash(&self) -> bool {
                SBCommandInterpreterRunOptions_GetStopOnCrash(self)
            }
            #[inline]
            pub unsafe fn SetStopOnCrash(&mut self, arg1: bool) {
                SBCommandInterpreterRunOptions_SetStopOnCrash(self, arg1)
            }
            #[inline]
            pub unsafe fn GetEchoCommands(&self) -> bool {
                SBCommandInterpreterRunOptions_GetEchoCommands(self)
            }
            #[inline]
            pub unsafe fn SetEchoCommands(&mut self, arg1: bool) {
                SBCommandInterpreterRunOptions_SetEchoCommands(self, arg1)
            }
            #[inline]
            pub unsafe fn GetEchoCommentCommands(&self) -> bool {
                SBCommandInterpreterRunOptions_GetEchoCommentCommands(self)
            }
            #[inline]
            pub unsafe fn SetEchoCommentCommands(&mut self, echo: bool) {
                SBCommandInterpreterRunOptions_SetEchoCommentCommands(self, echo)
            }
            #[inline]
            pub unsafe fn GetPrintResults(&self) -> bool {
                SBCommandInterpreterRunOptions_GetPrintResults(self)
            }
            #[inline]
            pub unsafe fn SetPrintResults(&mut self, arg1: bool) {
                SBCommandInterpreterRunOptions_SetPrintResults(self, arg1)
            }
            #[inline]
            pub unsafe fn GetPrintErrors(&self) -> bool {
                SBCommandInterpreterRunOptions_GetPrintErrors(self)
            }
            #[inline]
            pub unsafe fn SetPrintErrors(&mut self, arg1: bool) {
                SBCommandInterpreterRunOptions_SetPrintErrors(self, arg1)
            }
            #[inline]
            pub unsafe fn GetAddToHistory(&self) -> bool {
                SBCommandInterpreterRunOptions_GetAddToHistory(self)
            }
            #[inline]
            pub unsafe fn SetAddToHistory(&mut self, arg1: bool) {
                SBCommandInterpreterRunOptions_SetAddToHistory(self, arg1)
            }
            #[inline]
            pub unsafe fn GetAutoHandleEvents(&self) -> bool {
                SBCommandInterpreterRunOptions_GetAutoHandleEvents(self)
            }
            #[inline]
            pub unsafe fn SetAutoHandleEvents(&mut self, arg1: bool) {
                SBCommandInterpreterRunOptions_SetAutoHandleEvents(self, arg1)
            }
            #[inline]
            pub unsafe fn GetSpawnThread(&self) -> bool {
                SBCommandInterpreterRunOptions_GetSpawnThread(self)
            }
            #[inline]
            pub unsafe fn SetSpawnThread(&mut self, arg1: bool) {
                SBCommandInterpreterRunOptions_SetSpawnThread(self, arg1)
            }
            #[inline]
            pub unsafe fn GetAllowRepeats(&self) -> bool {
                SBCommandInterpreterRunOptions_GetAllowRepeats(self)
            }
            #[inline]
            pub unsafe fn SetAllowRepeats(&mut self, arg1: bool) {
                SBCommandInterpreterRunOptions_SetAllowRepeats(self, arg1)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCommandInterpreterRunOptions_SBCommandInterpreterRunOptions(
                    __bindgen_tmp.as_mut_ptr(),
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBCommandInterpreterRunOptions) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCommandInterpreterRunOptions_SBCommandInterpreterRunOptions1(
                    __bindgen_tmp.as_mut_ptr(),
                    rhs,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBCommandInterpreterRunOptions_SBCommandInterpreterRunOptions_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBCommandInterpreterRunResult {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb29SBCommandInterpreterRunResult17GetNumberOfErrorsEv"]
            pub fn SBCommandInterpreterRunResult_GetNumberOfErrors(
                this: *const root::lldb::SBCommandInterpreterRunResult,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb29SBCommandInterpreterRunResult9GetResultEv"]
            pub fn SBCommandInterpreterRunResult_GetResult(
                this: *const root::lldb::SBCommandInterpreterRunResult,
            ) -> root::lldb::CommandInterpreterResult;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb29SBCommandInterpreterRunResultC1Ev"]
            pub fn SBCommandInterpreterRunResult_SBCommandInterpreterRunResult(
                this: *mut root::lldb::SBCommandInterpreterRunResult,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb29SBCommandInterpreterRunResultC1ERKS0_"]
            pub fn SBCommandInterpreterRunResult_SBCommandInterpreterRunResult1(
                this: *mut root::lldb::SBCommandInterpreterRunResult,
                rhs: *const root::lldb::SBCommandInterpreterRunResult,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb29SBCommandInterpreterRunResultD1Ev"]
            pub fn SBCommandInterpreterRunResult_SBCommandInterpreterRunResult_destructor(
                this: *mut root::lldb::SBCommandInterpreterRunResult,
            );
        }
        impl SBCommandInterpreterRunResult {
            #[inline]
            pub unsafe fn GetNumberOfErrors(&self) -> ::std::os::raw::c_int {
                SBCommandInterpreterRunResult_GetNumberOfErrors(self)
            }
            #[inline]
            pub unsafe fn GetResult(&self) -> root::lldb::CommandInterpreterResult {
                SBCommandInterpreterRunResult_GetResult(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCommandInterpreterRunResult_SBCommandInterpreterRunResult(
                    __bindgen_tmp.as_mut_ptr(),
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBCommandInterpreterRunResult) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCommandInterpreterRunResult_SBCommandInterpreterRunResult1(
                    __bindgen_tmp.as_mut_ptr(),
                    rhs,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBCommandInterpreterRunResult_SBCommandInterpreterRunResult_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBCommandReturnObject {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb21SBCommandReturnObject7IsValidEv"]
            pub fn SBCommandReturnObject_IsValid(
                this: *const root::lldb::SBCommandReturnObject,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject9GetOutputEv"]
            pub fn SBCommandReturnObject_GetOutput(
                this: *mut root::lldb::SBCommandReturnObject,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject8GetErrorEv"]
            pub fn SBCommandReturnObject_GetError(
                this: *mut root::lldb::SBCommandReturnObject,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject9PutOutputEP8_IO_FILE"]
            pub fn SBCommandReturnObject_PutOutput(
                this: *mut root::lldb::SBCommandReturnObject,
                fh: *mut root::FILE,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject9PutOutputENS_6SBFileE"]
            pub fn SBCommandReturnObject_PutOutput1(
                this: *mut root::lldb::SBCommandReturnObject,
                file: root::lldb::SBFile,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject9PutOutputESt10shared_ptrIN12lldb_private4FileEE"]
            pub fn SBCommandReturnObject_PutOutput2(
                this: *mut root::lldb::SBCommandReturnObject,
                BORROWED: root::lldb::FileSP,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject13GetOutputSizeEv"]
            pub fn SBCommandReturnObject_GetOutputSize(
                this: *mut root::lldb::SBCommandReturnObject,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject12GetErrorSizeEv"]
            pub fn SBCommandReturnObject_GetErrorSize(
                this: *mut root::lldb::SBCommandReturnObject,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject8PutErrorEP8_IO_FILE"]
            pub fn SBCommandReturnObject_PutError(
                this: *mut root::lldb::SBCommandReturnObject,
                fh: *mut root::FILE,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject8PutErrorENS_6SBFileE"]
            pub fn SBCommandReturnObject_PutError1(
                this: *mut root::lldb::SBCommandReturnObject,
                file: root::lldb::SBFile,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject8PutErrorESt10shared_ptrIN12lldb_private4FileEE"]
            pub fn SBCommandReturnObject_PutError2(
                this: *mut root::lldb::SBCommandReturnObject,
                BORROWED: root::lldb::FileSP,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject5ClearEv"]
            pub fn SBCommandReturnObject_Clear(this: *mut root::lldb::SBCommandReturnObject);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject9GetStatusEv"]
            pub fn SBCommandReturnObject_GetStatus(
                this: *mut root::lldb::SBCommandReturnObject,
            ) -> root::lldb::ReturnStatus;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject9SetStatusENS_12ReturnStatusE"]
            pub fn SBCommandReturnObject_SetStatus(
                this: *mut root::lldb::SBCommandReturnObject,
                status: root::lldb::ReturnStatus,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject9SucceededEv"]
            pub fn SBCommandReturnObject_Succeeded(
                this: *mut root::lldb::SBCommandReturnObject,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject9HasResultEv"]
            pub fn SBCommandReturnObject_HasResult(
                this: *mut root::lldb::SBCommandReturnObject,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject13AppendMessageEPKc"]
            pub fn SBCommandReturnObject_AppendMessage(
                this: *mut root::lldb::SBCommandReturnObject,
                message: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject13AppendWarningEPKc"]
            pub fn SBCommandReturnObject_AppendWarning(
                this: *mut root::lldb::SBCommandReturnObject,
                message: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject14GetDescriptionERNS_8SBStreamE"]
            pub fn SBCommandReturnObject_GetDescription(
                this: *mut root::lldb::SBCommandReturnObject,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject22SetImmediateOutputFileEP8_IO_FILE"]
            pub fn SBCommandReturnObject_SetImmediateOutputFile(
                this: *mut root::lldb::SBCommandReturnObject,
                fh: *mut root::FILE,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject21SetImmediateErrorFileEP8_IO_FILE"]
            pub fn SBCommandReturnObject_SetImmediateErrorFile(
                this: *mut root::lldb::SBCommandReturnObject,
                fh: *mut root::FILE,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject22SetImmediateOutputFileEP8_IO_FILEb"]
            pub fn SBCommandReturnObject_SetImmediateOutputFile1(
                this: *mut root::lldb::SBCommandReturnObject,
                fh: *mut root::FILE,
                transfer_ownership: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject21SetImmediateErrorFileEP8_IO_FILEb"]
            pub fn SBCommandReturnObject_SetImmediateErrorFile1(
                this: *mut root::lldb::SBCommandReturnObject,
                fh: *mut root::FILE,
                transfer_ownership: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject22SetImmediateOutputFileENS_6SBFileE"]
            pub fn SBCommandReturnObject_SetImmediateOutputFile2(
                this: *mut root::lldb::SBCommandReturnObject,
                file: root::lldb::SBFile,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject21SetImmediateErrorFileENS_6SBFileE"]
            pub fn SBCommandReturnObject_SetImmediateErrorFile2(
                this: *mut root::lldb::SBCommandReturnObject,
                file: root::lldb::SBFile,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject22SetImmediateOutputFileESt10shared_ptrIN12lldb_private4FileEE"]
            pub fn SBCommandReturnObject_SetImmediateOutputFile3(
                this: *mut root::lldb::SBCommandReturnObject,
                BORROWED: root::lldb::FileSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject21SetImmediateErrorFileESt10shared_ptrIN12lldb_private4FileEE"]
            pub fn SBCommandReturnObject_SetImmediateErrorFile3(
                this: *mut root::lldb::SBCommandReturnObject,
                BORROWED: root::lldb::FileSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject10PutCStringEPKci"]
            pub fn SBCommandReturnObject_PutCString(
                this: *mut root::lldb::SBCommandReturnObject,
                string: *const ::std::os::raw::c_char,
                len: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject6PrintfEPKcz"]
            pub fn SBCommandReturnObject_Printf(
                this: *mut root::lldb::SBCommandReturnObject,
                format: *const ::std::os::raw::c_char,
                ...
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject9GetOutputEb"]
            pub fn SBCommandReturnObject_GetOutput1(
                this: *mut root::lldb::SBCommandReturnObject,
                only_if_no_immediate: bool,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject8GetErrorEb"]
            pub fn SBCommandReturnObject_GetError1(
                this: *mut root::lldb::SBCommandReturnObject,
                only_if_no_immediate: bool,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject8SetErrorERNS_7SBErrorEPKc"]
            pub fn SBCommandReturnObject_SetError(
                this: *mut root::lldb::SBCommandReturnObject,
                error: *mut root::lldb::SBError,
                fallback_error_cstr: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObject8SetErrorEPKc"]
            pub fn SBCommandReturnObject_SetError1(
                this: *mut root::lldb::SBCommandReturnObject,
                error_cstr: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb21SBCommandReturnObject3getEv"]
            pub fn SBCommandReturnObject_get(
                this: *const root::lldb::SBCommandReturnObject,
            ) -> *mut root::lldb_private::CommandReturnObject;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObjectC1Ev"]
            pub fn SBCommandReturnObject_SBCommandReturnObject(
                this: *mut root::lldb::SBCommandReturnObject,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObjectC1ERKS0_"]
            pub fn SBCommandReturnObject_SBCommandReturnObject1(
                this: *mut root::lldb::SBCommandReturnObject,
                rhs: *const root::lldb::SBCommandReturnObject,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObjectC1ERN12lldb_private19CommandReturnObjectE"]
            pub fn SBCommandReturnObject_SBCommandReturnObject2(
                this: *mut root::lldb::SBCommandReturnObject,
                ref_: *mut root::lldb_private::CommandReturnObject,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb21SBCommandReturnObjectD1Ev"]
            pub fn SBCommandReturnObject_SBCommandReturnObject_destructor(
                this: *mut root::lldb::SBCommandReturnObject,
            );
        }
        impl SBCommandReturnObject {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBCommandReturnObject_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetOutput(&mut self) -> *const ::std::os::raw::c_char {
                SBCommandReturnObject_GetOutput(self)
            }
            #[inline]
            pub unsafe fn GetError(&mut self) -> *const ::std::os::raw::c_char {
                SBCommandReturnObject_GetError(self)
            }
            #[inline]
            pub unsafe fn PutOutput(&mut self, fh: *mut root::FILE) -> usize {
                SBCommandReturnObject_PutOutput(self, fh)
            }
            #[inline]
            pub unsafe fn PutOutput1(&mut self, file: root::lldb::SBFile) -> usize {
                SBCommandReturnObject_PutOutput1(self, file)
            }
            #[inline]
            pub unsafe fn PutOutput2(&mut self, BORROWED: root::lldb::FileSP) -> usize {
                SBCommandReturnObject_PutOutput2(self, BORROWED)
            }
            #[inline]
            pub unsafe fn GetOutputSize(&mut self) -> usize {
                SBCommandReturnObject_GetOutputSize(self)
            }
            #[inline]
            pub unsafe fn GetErrorSize(&mut self) -> usize {
                SBCommandReturnObject_GetErrorSize(self)
            }
            #[inline]
            pub unsafe fn PutError(&mut self, fh: *mut root::FILE) -> usize {
                SBCommandReturnObject_PutError(self, fh)
            }
            #[inline]
            pub unsafe fn PutError1(&mut self, file: root::lldb::SBFile) -> usize {
                SBCommandReturnObject_PutError1(self, file)
            }
            #[inline]
            pub unsafe fn PutError2(&mut self, BORROWED: root::lldb::FileSP) -> usize {
                SBCommandReturnObject_PutError2(self, BORROWED)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBCommandReturnObject_Clear(self)
            }
            #[inline]
            pub unsafe fn GetStatus(&mut self) -> root::lldb::ReturnStatus {
                SBCommandReturnObject_GetStatus(self)
            }
            #[inline]
            pub unsafe fn SetStatus(&mut self, status: root::lldb::ReturnStatus) {
                SBCommandReturnObject_SetStatus(self, status)
            }
            #[inline]
            pub unsafe fn Succeeded(&mut self) -> bool {
                SBCommandReturnObject_Succeeded(self)
            }
            #[inline]
            pub unsafe fn HasResult(&mut self) -> bool {
                SBCommandReturnObject_HasResult(self)
            }
            #[inline]
            pub unsafe fn AppendMessage(&mut self, message: *const ::std::os::raw::c_char) {
                SBCommandReturnObject_AppendMessage(self, message)
            }
            #[inline]
            pub unsafe fn AppendWarning(&mut self, message: *const ::std::os::raw::c_char) {
                SBCommandReturnObject_AppendWarning(self, message)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBCommandReturnObject_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn SetImmediateOutputFile(&mut self, fh: *mut root::FILE) {
                SBCommandReturnObject_SetImmediateOutputFile(self, fh)
            }
            #[inline]
            pub unsafe fn SetImmediateErrorFile(&mut self, fh: *mut root::FILE) {
                SBCommandReturnObject_SetImmediateErrorFile(self, fh)
            }
            #[inline]
            pub unsafe fn SetImmediateOutputFile1(
                &mut self,
                fh: *mut root::FILE,
                transfer_ownership: bool,
            ) {
                SBCommandReturnObject_SetImmediateOutputFile1(self, fh, transfer_ownership)
            }
            #[inline]
            pub unsafe fn SetImmediateErrorFile1(
                &mut self,
                fh: *mut root::FILE,
                transfer_ownership: bool,
            ) {
                SBCommandReturnObject_SetImmediateErrorFile1(self, fh, transfer_ownership)
            }
            #[inline]
            pub unsafe fn SetImmediateOutputFile2(&mut self, file: root::lldb::SBFile) {
                SBCommandReturnObject_SetImmediateOutputFile2(self, file)
            }
            #[inline]
            pub unsafe fn SetImmediateErrorFile2(&mut self, file: root::lldb::SBFile) {
                SBCommandReturnObject_SetImmediateErrorFile2(self, file)
            }
            #[inline]
            pub unsafe fn SetImmediateOutputFile3(&mut self, BORROWED: root::lldb::FileSP) {
                SBCommandReturnObject_SetImmediateOutputFile3(self, BORROWED)
            }
            #[inline]
            pub unsafe fn SetImmediateErrorFile3(&mut self, BORROWED: root::lldb::FileSP) {
                SBCommandReturnObject_SetImmediateErrorFile3(self, BORROWED)
            }
            #[inline]
            pub unsafe fn PutCString(
                &mut self,
                string: *const ::std::os::raw::c_char,
                len: ::std::os::raw::c_int,
            ) {
                SBCommandReturnObject_PutCString(self, string, len)
            }
            #[inline]
            pub unsafe fn GetOutput1(
                &mut self,
                only_if_no_immediate: bool,
            ) -> *const ::std::os::raw::c_char {
                SBCommandReturnObject_GetOutput1(self, only_if_no_immediate)
            }
            #[inline]
            pub unsafe fn GetError1(
                &mut self,
                only_if_no_immediate: bool,
            ) -> *const ::std::os::raw::c_char {
                SBCommandReturnObject_GetError1(self, only_if_no_immediate)
            }
            #[inline]
            pub unsafe fn SetError(
                &mut self,
                error: *mut root::lldb::SBError,
                fallback_error_cstr: *const ::std::os::raw::c_char,
            ) {
                SBCommandReturnObject_SetError(self, error, fallback_error_cstr)
            }
            #[inline]
            pub unsafe fn SetError1(&mut self, error_cstr: *const ::std::os::raw::c_char) {
                SBCommandReturnObject_SetError1(self, error_cstr)
            }
            #[inline]
            pub unsafe fn get(&self) -> *mut root::lldb_private::CommandReturnObject {
                SBCommandReturnObject_get(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCommandReturnObject_SBCommandReturnObject(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBCommandReturnObject) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCommandReturnObject_SBCommandReturnObject1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(ref_: *mut root::lldb_private::CommandReturnObject) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCommandReturnObject_SBCommandReturnObject2(__bindgen_tmp.as_mut_ptr(), ref_);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBCommandReturnObject_SBCommandReturnObject_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBCommunication {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        pub const SBCommunication_eBroadcastBitDisconnected:
            root::lldb::SBCommunication__bindgen_ty_1 = 1;
        pub const SBCommunication_eBroadcastBitReadThreadGotBytes:
            root::lldb::SBCommunication__bindgen_ty_1 = 2;
        pub const SBCommunication_eBroadcastBitReadThreadDidExit:
            root::lldb::SBCommunication__bindgen_ty_1 = 4;
        pub const SBCommunication_eBroadcastBitReadThreadShouldExit:
            root::lldb::SBCommunication__bindgen_ty_1 = 8;
        pub const SBCommunication_eBroadcastBitPacketAvailable:
            root::lldb::SBCommunication__bindgen_ty_1 = 16;
        pub const SBCommunication_eAllEventBits: root::lldb::SBCommunication__bindgen_ty_1 =
            4294967295;
        pub type SBCommunication__bindgen_ty_1 = ::std::os::raw::c_uint;
        pub type SBCommunication_ReadThreadBytesReceived = u64;
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb15SBCommunication7IsValidEv"]
            pub fn SBCommunication_IsValid(this: *const root::lldb::SBCommunication) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunication14GetBroadcasterEv"]
            pub fn SBCommunication_GetBroadcaster(
                this: *mut root::lldb::SBCommunication,
            ) -> root::lldb::SBBroadcaster;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunication19GetBroadcasterClassEv"]
            pub fn SBCommunication_GetBroadcasterClass() -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunication18AdoptFileDesriptorEib"]
            pub fn SBCommunication_AdoptFileDesriptor(
                this: *mut root::lldb::SBCommunication,
                fd: ::std::os::raw::c_int,
                owns_fd: bool,
            ) -> root::lldb::ConnectionStatus;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunication7ConnectEPKc"]
            pub fn SBCommunication_Connect(
                this: *mut root::lldb::SBCommunication,
                url: *const ::std::os::raw::c_char,
            ) -> root::lldb::ConnectionStatus;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunication10DisconnectEv"]
            pub fn SBCommunication_Disconnect(
                this: *mut root::lldb::SBCommunication,
            ) -> root::lldb::ConnectionStatus;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb15SBCommunication11IsConnectedEv"]
            pub fn SBCommunication_IsConnected(this: *const root::lldb::SBCommunication) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunication13GetCloseOnEOFEv"]
            pub fn SBCommunication_GetCloseOnEOF(this: *mut root::lldb::SBCommunication) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunication13SetCloseOnEOFEb"]
            pub fn SBCommunication_SetCloseOnEOF(this: *mut root::lldb::SBCommunication, b: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunication4ReadEPvmjRNS_16ConnectionStatusE"]
            pub fn SBCommunication_Read(
                this: *mut root::lldb::SBCommunication,
                dst: *mut ::std::os::raw::c_void,
                dst_len: usize,
                timeout_usec: u32,
                status: *mut root::lldb::ConnectionStatus,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunication5WriteEPKvmRNS_16ConnectionStatusE"]
            pub fn SBCommunication_Write(
                this: *mut root::lldb::SBCommunication,
                src: *const ::std::os::raw::c_void,
                src_len: usize,
                status: *mut root::lldb::ConnectionStatus,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunication15ReadThreadStartEv"]
            pub fn SBCommunication_ReadThreadStart(this: *mut root::lldb::SBCommunication) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunication14ReadThreadStopEv"]
            pub fn SBCommunication_ReadThreadStop(this: *mut root::lldb::SBCommunication) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunication19ReadThreadIsRunningEv"]
            pub fn SBCommunication_ReadThreadIsRunning(
                this: *mut root::lldb::SBCommunication,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunication34SetReadThreadBytesReceivedCallbackEPFvPvPKvmES1_"]
            pub fn SBCommunication_SetReadThreadBytesReceivedCallback(
                this: *mut root::lldb::SBCommunication,
                callback: root::lldb::SBCommunication_ReadThreadBytesReceived,
                callback_baton: *mut ::std::os::raw::c_void,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunicationC1Ev"]
            pub fn SBCommunication_SBCommunication(this: *mut root::lldb::SBCommunication);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunicationC1EPKc"]
            pub fn SBCommunication_SBCommunication1(
                this: *mut root::lldb::SBCommunication,
                broadcaster_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBCommunicationD1Ev"]
            pub fn SBCommunication_SBCommunication_destructor(
                this: *mut root::lldb::SBCommunication,
            );
        }
        impl SBCommunication {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBCommunication_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetBroadcaster(&mut self) -> root::lldb::SBBroadcaster {
                SBCommunication_GetBroadcaster(self)
            }
            #[inline]
            pub unsafe fn GetBroadcasterClass() -> *const ::std::os::raw::c_char {
                SBCommunication_GetBroadcasterClass()
            }
            #[inline]
            pub unsafe fn AdoptFileDesriptor(
                &mut self,
                fd: ::std::os::raw::c_int,
                owns_fd: bool,
            ) -> root::lldb::ConnectionStatus {
                SBCommunication_AdoptFileDesriptor(self, fd, owns_fd)
            }
            #[inline]
            pub unsafe fn Connect(
                &mut self,
                url: *const ::std::os::raw::c_char,
            ) -> root::lldb::ConnectionStatus {
                SBCommunication_Connect(self, url)
            }
            #[inline]
            pub unsafe fn Disconnect(&mut self) -> root::lldb::ConnectionStatus {
                SBCommunication_Disconnect(self)
            }
            #[inline]
            pub unsafe fn IsConnected(&self) -> bool {
                SBCommunication_IsConnected(self)
            }
            #[inline]
            pub unsafe fn GetCloseOnEOF(&mut self) -> bool {
                SBCommunication_GetCloseOnEOF(self)
            }
            #[inline]
            pub unsafe fn SetCloseOnEOF(&mut self, b: bool) {
                SBCommunication_SetCloseOnEOF(self, b)
            }
            #[inline]
            pub unsafe fn Read(
                &mut self,
                dst: *mut ::std::os::raw::c_void,
                dst_len: usize,
                timeout_usec: u32,
                status: *mut root::lldb::ConnectionStatus,
            ) -> usize {
                SBCommunication_Read(self, dst, dst_len, timeout_usec, status)
            }
            #[inline]
            pub unsafe fn Write(
                &mut self,
                src: *const ::std::os::raw::c_void,
                src_len: usize,
                status: *mut root::lldb::ConnectionStatus,
            ) -> usize {
                SBCommunication_Write(self, src, src_len, status)
            }
            #[inline]
            pub unsafe fn ReadThreadStart(&mut self) -> bool {
                SBCommunication_ReadThreadStart(self)
            }
            #[inline]
            pub unsafe fn ReadThreadStop(&mut self) -> bool {
                SBCommunication_ReadThreadStop(self)
            }
            #[inline]
            pub unsafe fn ReadThreadIsRunning(&mut self) -> bool {
                SBCommunication_ReadThreadIsRunning(self)
            }
            #[inline]
            pub unsafe fn SetReadThreadBytesReceivedCallback(
                &mut self,
                callback: root::lldb::SBCommunication_ReadThreadBytesReceived,
                callback_baton: *mut ::std::os::raw::c_void,
            ) -> bool {
                SBCommunication_SetReadThreadBytesReceivedCallback(self, callback, callback_baton)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCommunication_SBCommunication(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(broadcaster_name: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBCommunication_SBCommunication1(__bindgen_tmp.as_mut_ptr(), broadcaster_name);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBCommunication_SBCommunication_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBDeclaration {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBDeclaration7IsValidEv"]
            pub fn SBDeclaration_IsValid(this: *const root::lldb::SBDeclaration) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBDeclaration11GetFileSpecEv"]
            pub fn SBDeclaration_GetFileSpec(
                this: *const root::lldb::SBDeclaration,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBDeclaration7GetLineEv"]
            pub fn SBDeclaration_GetLine(this: *const root::lldb::SBDeclaration) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBDeclaration9GetColumnEv"]
            pub fn SBDeclaration_GetColumn(this: *const root::lldb::SBDeclaration) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBDeclaration11SetFileSpecENS_10SBFileSpecE"]
            pub fn SBDeclaration_SetFileSpec(
                this: *mut root::lldb::SBDeclaration,
                filespec: root::lldb::SBFileSpec,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBDeclaration7SetLineEj"]
            pub fn SBDeclaration_SetLine(this: *mut root::lldb::SBDeclaration, line: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBDeclaration9SetColumnEj"]
            pub fn SBDeclaration_SetColumn(this: *mut root::lldb::SBDeclaration, column: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBDeclaration14GetDescriptionERNS_8SBStreamE"]
            pub fn SBDeclaration_GetDescription(
                this: *mut root::lldb::SBDeclaration,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBDeclaration3getEv"]
            pub fn SBDeclaration_get(
                this: *mut root::lldb::SBDeclaration,
            ) -> *mut root::lldb_private::Declaration;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBDeclarationC1Ev"]
            pub fn SBDeclaration_SBDeclaration(this: *mut root::lldb::SBDeclaration);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBDeclarationC1ERKS0_"]
            pub fn SBDeclaration_SBDeclaration1(
                this: *mut root::lldb::SBDeclaration,
                rhs: *const root::lldb::SBDeclaration,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBDeclarationD1Ev"]
            pub fn SBDeclaration_SBDeclaration_destructor(this: *mut root::lldb::SBDeclaration);
        }
        impl SBDeclaration {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBDeclaration_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetFileSpec(&self) -> root::lldb::SBFileSpec {
                SBDeclaration_GetFileSpec(self)
            }
            #[inline]
            pub unsafe fn GetLine(&self) -> u32 {
                SBDeclaration_GetLine(self)
            }
            #[inline]
            pub unsafe fn GetColumn(&self) -> u32 {
                SBDeclaration_GetColumn(self)
            }
            #[inline]
            pub unsafe fn SetFileSpec(&mut self, filespec: root::lldb::SBFileSpec) {
                SBDeclaration_SetFileSpec(self, filespec)
            }
            #[inline]
            pub unsafe fn SetLine(&mut self, line: u32) {
                SBDeclaration_SetLine(self, line)
            }
            #[inline]
            pub unsafe fn SetColumn(&mut self, column: u32) {
                SBDeclaration_SetColumn(self, column)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBDeclaration_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn get(&mut self) -> *mut root::lldb_private::Declaration {
                SBDeclaration_get(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBDeclaration_SBDeclaration(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBDeclaration) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBDeclaration_SBDeclaration1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBDeclaration_SBDeclaration_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBEnvironment {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBEnvironment3GetEPKc"]
            pub fn SBEnvironment_Get(
                this: *mut root::lldb::SBEnvironment,
                name: *const ::std::os::raw::c_char,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBEnvironment12GetNumValuesEv"]
            pub fn SBEnvironment_GetNumValues(this: *mut root::lldb::SBEnvironment) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBEnvironment14GetNameAtIndexEm"]
            pub fn SBEnvironment_GetNameAtIndex(
                this: *mut root::lldb::SBEnvironment,
                index: usize,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBEnvironment15GetValueAtIndexEm"]
            pub fn SBEnvironment_GetValueAtIndex(
                this: *mut root::lldb::SBEnvironment,
                index: usize,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBEnvironment10GetEntriesEv"]
            pub fn SBEnvironment_GetEntries(
                this: *mut root::lldb::SBEnvironment,
            ) -> root::lldb::SBStringList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBEnvironment8PutEntryEPKc"]
            pub fn SBEnvironment_PutEntry(
                this: *mut root::lldb::SBEnvironment,
                name_and_value: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBEnvironment10SetEntriesERKNS_12SBStringListEb"]
            pub fn SBEnvironment_SetEntries(
                this: *mut root::lldb::SBEnvironment,
                entries: *const root::lldb::SBStringList,
                append: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBEnvironment3SetEPKcS2_b"]
            pub fn SBEnvironment_Set(
                this: *mut root::lldb::SBEnvironment,
                name: *const ::std::os::raw::c_char,
                value: *const ::std::os::raw::c_char,
                overwrite: bool,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBEnvironment5UnsetEPKc"]
            pub fn SBEnvironment_Unset(
                this: *mut root::lldb::SBEnvironment,
                name: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBEnvironment5ClearEv"]
            pub fn SBEnvironment_Clear(this: *mut root::lldb::SBEnvironment);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBEnvironment3refEv"]
            pub fn SBEnvironment_ref(
                this: *const root::lldb::SBEnvironment,
            ) -> *mut root::lldb_private::Environment;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBEnvironmentC1Ev"]
            pub fn SBEnvironment_SBEnvironment(this: *mut root::lldb::SBEnvironment);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBEnvironmentC1ERKS0_"]
            pub fn SBEnvironment_SBEnvironment1(
                this: *mut root::lldb::SBEnvironment,
                rhs: *const root::lldb::SBEnvironment,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBEnvironmentC1EN12lldb_private11EnvironmentE"]
            pub fn SBEnvironment_SBEnvironment2(
                this: *mut root::lldb::SBEnvironment,
                rhs: root::lldb_private::Environment,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBEnvironmentD1Ev"]
            pub fn SBEnvironment_SBEnvironment_destructor(this: *mut root::lldb::SBEnvironment);
        }
        impl SBEnvironment {
            #[inline]
            pub unsafe fn Get(
                &mut self,
                name: *const ::std::os::raw::c_char,
            ) -> *const ::std::os::raw::c_char {
                SBEnvironment_Get(self, name)
            }
            #[inline]
            pub unsafe fn GetNumValues(&mut self) -> usize {
                SBEnvironment_GetNumValues(self)
            }
            #[inline]
            pub unsafe fn GetNameAtIndex(&mut self, index: usize) -> *const ::std::os::raw::c_char {
                SBEnvironment_GetNameAtIndex(self, index)
            }
            #[inline]
            pub unsafe fn GetValueAtIndex(
                &mut self,
                index: usize,
            ) -> *const ::std::os::raw::c_char {
                SBEnvironment_GetValueAtIndex(self, index)
            }
            #[inline]
            pub unsafe fn GetEntries(&mut self) -> root::lldb::SBStringList {
                SBEnvironment_GetEntries(self)
            }
            #[inline]
            pub unsafe fn PutEntry(&mut self, name_and_value: *const ::std::os::raw::c_char) {
                SBEnvironment_PutEntry(self, name_and_value)
            }
            #[inline]
            pub unsafe fn SetEntries(
                &mut self,
                entries: *const root::lldb::SBStringList,
                append: bool,
            ) {
                SBEnvironment_SetEntries(self, entries, append)
            }
            #[inline]
            pub unsafe fn Set(
                &mut self,
                name: *const ::std::os::raw::c_char,
                value: *const ::std::os::raw::c_char,
                overwrite: bool,
            ) -> bool {
                SBEnvironment_Set(self, name, value, overwrite)
            }
            #[inline]
            pub unsafe fn Unset(&mut self, name: *const ::std::os::raw::c_char) -> bool {
                SBEnvironment_Unset(self, name)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBEnvironment_Clear(self)
            }
            #[inline]
            pub unsafe fn ref_(&self) -> *mut root::lldb_private::Environment {
                SBEnvironment_ref(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBEnvironment_SBEnvironment(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBEnvironment) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBEnvironment_SBEnvironment1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(rhs: root::lldb_private::Environment) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBEnvironment_SBEnvironment2(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBEnvironment_SBEnvironment_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBEvent {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 3usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBEvent7IsValidEv"]
            pub fn SBEvent_IsValid(this: *const root::lldb::SBEvent) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBEvent13GetDataFlavorEv"]
            pub fn SBEvent_GetDataFlavor(
                this: *mut root::lldb::SBEvent,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBEvent7GetTypeEv"]
            pub fn SBEvent_GetType(this: *const root::lldb::SBEvent) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBEvent14GetBroadcasterEv"]
            pub fn SBEvent_GetBroadcaster(
                this: *const root::lldb::SBEvent,
            ) -> root::lldb::SBBroadcaster;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBEvent19GetBroadcasterClassEv"]
            pub fn SBEvent_GetBroadcasterClass(
                this: *const root::lldb::SBEvent,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBEvent21BroadcasterMatchesPtrEPKNS_13SBBroadcasterE"]
            pub fn SBEvent_BroadcasterMatchesPtr(
                this: *mut root::lldb::SBEvent,
                broadcaster: *const root::lldb::SBBroadcaster,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBEvent21BroadcasterMatchesRefERKNS_13SBBroadcasterE"]
            pub fn SBEvent_BroadcasterMatchesRef(
                this: *mut root::lldb::SBEvent,
                broadcaster: *const root::lldb::SBBroadcaster,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBEvent5ClearEv"]
            pub fn SBEvent_Clear(this: *mut root::lldb::SBEvent);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBEvent19GetCStringFromEventERKS0_"]
            pub fn SBEvent_GetCStringFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBEvent14GetDescriptionERNS_8SBStreamE"]
            pub fn SBEvent_GetDescription(
                this: *mut root::lldb::SBEvent,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBEvent14GetDescriptionERNS_8SBStreamE"]
            pub fn SBEvent_GetDescription1(
                this: *const root::lldb::SBEvent,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBEvent5GetSPEv"]
            pub fn SBEvent_GetSP(this: *const root::lldb::SBEvent) -> *mut root::lldb::EventSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBEvent5resetERSt10shared_ptrIN12lldb_private5EventEE"]
            pub fn SBEvent_reset(
                this: *mut root::lldb::SBEvent,
                event_sp: *mut root::lldb::EventSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBEvent5resetEPN12lldb_private5EventE"]
            pub fn SBEvent_reset1(
                this: *mut root::lldb::SBEvent,
                event: *mut root::lldb_private::Event,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb7SBEvent3getEv"]
            pub fn SBEvent_get(this: *const root::lldb::SBEvent) -> *mut root::lldb_private::Event;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBEventC1Ev"]
            pub fn SBEvent_SBEvent(this: *mut root::lldb::SBEvent);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBEventC1ERKS0_"]
            pub fn SBEvent_SBEvent1(
                this: *mut root::lldb::SBEvent,
                rhs: *const root::lldb::SBEvent,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBEventC1EjPKcj"]
            pub fn SBEvent_SBEvent2(
                this: *mut root::lldb::SBEvent,
                event: u32,
                cstr: *const ::std::os::raw::c_char,
                cstr_len: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBEventC1ERSt10shared_ptrIN12lldb_private5EventEE"]
            pub fn SBEvent_SBEvent3(
                this: *mut root::lldb::SBEvent,
                event_sp: *mut root::lldb::EventSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBEventC1EPN12lldb_private5EventE"]
            pub fn SBEvent_SBEvent4(
                this: *mut root::lldb::SBEvent,
                event: *mut root::lldb_private::Event,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBEventD1Ev"]
            pub fn SBEvent_SBEvent_destructor(this: *mut root::lldb::SBEvent);
        }
        impl SBEvent {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBEvent_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetDataFlavor(&mut self) -> *const ::std::os::raw::c_char {
                SBEvent_GetDataFlavor(self)
            }
            #[inline]
            pub unsafe fn GetType(&self) -> u32 {
                SBEvent_GetType(self)
            }
            #[inline]
            pub unsafe fn GetBroadcaster(&self) -> root::lldb::SBBroadcaster {
                SBEvent_GetBroadcaster(self)
            }
            #[inline]
            pub unsafe fn GetBroadcasterClass(&self) -> *const ::std::os::raw::c_char {
                SBEvent_GetBroadcasterClass(self)
            }
            #[inline]
            pub unsafe fn BroadcasterMatchesPtr(
                &mut self,
                broadcaster: *const root::lldb::SBBroadcaster,
            ) -> bool {
                SBEvent_BroadcasterMatchesPtr(self, broadcaster)
            }
            #[inline]
            pub unsafe fn BroadcasterMatchesRef(
                &mut self,
                broadcaster: *const root::lldb::SBBroadcaster,
            ) -> bool {
                SBEvent_BroadcasterMatchesRef(self, broadcaster)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBEvent_Clear(self)
            }
            #[inline]
            pub unsafe fn GetCStringFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> *const ::std::os::raw::c_char {
                SBEvent_GetCStringFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBEvent_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn GetDescription1(&self, description: *mut root::lldb::SBStream) -> bool {
                SBEvent_GetDescription1(self, description)
            }
            #[inline]
            pub unsafe fn GetSP(&self) -> *mut root::lldb::EventSP {
                SBEvent_GetSP(self)
            }
            #[inline]
            pub unsafe fn reset(&mut self, event_sp: *mut root::lldb::EventSP) {
                SBEvent_reset(self, event_sp)
            }
            #[inline]
            pub unsafe fn reset1(&mut self, event: *mut root::lldb_private::Event) {
                SBEvent_reset1(self, event)
            }
            #[inline]
            pub unsafe fn get(&self) -> *mut root::lldb_private::Event {
                SBEvent_get(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBEvent_SBEvent(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBEvent) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBEvent_SBEvent1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                event: u32,
                cstr: *const ::std::os::raw::c_char,
                cstr_len: u32,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBEvent_SBEvent2(__bindgen_tmp.as_mut_ptr(), event, cstr, cstr_len);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(event_sp: *mut root::lldb::EventSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBEvent_SBEvent3(__bindgen_tmp.as_mut_ptr(), event_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(event: *mut root::lldb_private::Event) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBEvent_SBEvent4(__bindgen_tmp.as_mut_ptr(), event);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBEvent_SBEvent_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBExecutionContext {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBExecutionContext9GetTargetEv"]
            pub fn SBExecutionContext_GetTarget(
                this: *const root::lldb::SBExecutionContext,
            ) -> root::lldb::SBTarget;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBExecutionContext10GetProcessEv"]
            pub fn SBExecutionContext_GetProcess(
                this: *const root::lldb::SBExecutionContext,
            ) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBExecutionContext9GetThreadEv"]
            pub fn SBExecutionContext_GetThread(
                this: *const root::lldb::SBExecutionContext,
            ) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBExecutionContext8GetFrameEv"]
            pub fn SBExecutionContext_GetFrame(
                this: *const root::lldb::SBExecutionContext,
            ) -> root::lldb::SBFrame;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBExecutionContext3getEv"]
            pub fn SBExecutionContext_get(
                this: *const root::lldb::SBExecutionContext,
            ) -> *mut root::lldb_private::ExecutionContextRef;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBExecutionContextC1Ev"]
            pub fn SBExecutionContext_SBExecutionContext(this: *mut root::lldb::SBExecutionContext);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBExecutionContextC1ERKS0_"]
            pub fn SBExecutionContext_SBExecutionContext1(
                this: *mut root::lldb::SBExecutionContext,
                rhs: *const root::lldb::SBExecutionContext,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBExecutionContextC1ERKNS_8SBTargetE"]
            pub fn SBExecutionContext_SBExecutionContext2(
                this: *mut root::lldb::SBExecutionContext,
                target: *const root::lldb::SBTarget,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBExecutionContextC1ERKNS_9SBProcessE"]
            pub fn SBExecutionContext_SBExecutionContext3(
                this: *mut root::lldb::SBExecutionContext,
                process: *const root::lldb::SBProcess,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBExecutionContextC1ENS_8SBThreadE"]
            pub fn SBExecutionContext_SBExecutionContext4(
                this: *mut root::lldb::SBExecutionContext,
                thread: root::lldb::SBThread,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBExecutionContextC1ERKNS_7SBFrameE"]
            pub fn SBExecutionContext_SBExecutionContext5(
                this: *mut root::lldb::SBExecutionContext,
                frame: *const root::lldb::SBFrame,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBExecutionContextC1ESt10shared_ptrIN12lldb_private19ExecutionContextRefEE"]
            pub fn SBExecutionContext_SBExecutionContext6(
                this: *mut root::lldb::SBExecutionContext,
                exe_ctx_ref_sp: root::lldb::ExecutionContextRefSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBExecutionContextD1Ev"]
            pub fn SBExecutionContext_SBExecutionContext_destructor(
                this: *mut root::lldb::SBExecutionContext,
            );
        }
        impl SBExecutionContext {
            #[inline]
            pub unsafe fn GetTarget(&self) -> root::lldb::SBTarget {
                SBExecutionContext_GetTarget(self)
            }
            #[inline]
            pub unsafe fn GetProcess(&self) -> root::lldb::SBProcess {
                SBExecutionContext_GetProcess(self)
            }
            #[inline]
            pub unsafe fn GetThread(&self) -> root::lldb::SBThread {
                SBExecutionContext_GetThread(self)
            }
            #[inline]
            pub unsafe fn GetFrame(&self) -> root::lldb::SBFrame {
                SBExecutionContext_GetFrame(self)
            }
            #[inline]
            pub unsafe fn get(&self) -> *mut root::lldb_private::ExecutionContextRef {
                SBExecutionContext_get(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBExecutionContext_SBExecutionContext(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBExecutionContext) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBExecutionContext_SBExecutionContext1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(target: *const root::lldb::SBTarget) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBExecutionContext_SBExecutionContext2(__bindgen_tmp.as_mut_ptr(), target);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(process: *const root::lldb::SBProcess) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBExecutionContext_SBExecutionContext3(__bindgen_tmp.as_mut_ptr(), process);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(thread: root::lldb::SBThread) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBExecutionContext_SBExecutionContext4(__bindgen_tmp.as_mut_ptr(), thread);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new5(frame: *const root::lldb::SBFrame) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBExecutionContext_SBExecutionContext5(__bindgen_tmp.as_mut_ptr(), frame);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new6(exe_ctx_ref_sp: root::lldb::ExecutionContextRefSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBExecutionContext_SBExecutionContext6(__bindgen_tmp.as_mut_ptr(), exe_ctx_ref_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBExecutionContext_SBExecutionContext_destructor(self)
            }
        }
        pub const SBSourceLanguageName_eLanguageNameAda: root::lldb::SBSourceLanguageName = 1;
        pub const SBSourceLanguageName_eLanguageNameBLISS: root::lldb::SBSourceLanguageName = 2;
        pub const SBSourceLanguageName_eLanguageNameC: root::lldb::SBSourceLanguageName = 3;
        pub const SBSourceLanguageName_eLanguageNameC_plus_plus: root::lldb::SBSourceLanguageName =
            4;
        pub const SBSourceLanguageName_eLanguageNameCobol: root::lldb::SBSourceLanguageName = 5;
        pub const SBSourceLanguageName_eLanguageNameCrystal: root::lldb::SBSourceLanguageName = 6;
        pub const SBSourceLanguageName_eLanguageNameD: root::lldb::SBSourceLanguageName = 7;
        pub const SBSourceLanguageName_eLanguageNameDylan: root::lldb::SBSourceLanguageName = 8;
        pub const SBSourceLanguageName_eLanguageNameFortran: root::lldb::SBSourceLanguageName = 9;
        pub const SBSourceLanguageName_eLanguageNameGo: root::lldb::SBSourceLanguageName = 10;
        pub const SBSourceLanguageName_eLanguageNameHaskell: root::lldb::SBSourceLanguageName = 11;
        pub const SBSourceLanguageName_eLanguageNameJava: root::lldb::SBSourceLanguageName = 12;
        pub const SBSourceLanguageName_eLanguageNameJulia: root::lldb::SBSourceLanguageName = 13;
        pub const SBSourceLanguageName_eLanguageNameKotlin: root::lldb::SBSourceLanguageName = 14;
        pub const SBSourceLanguageName_eLanguageNameModula2: root::lldb::SBSourceLanguageName = 15;
        pub const SBSourceLanguageName_eLanguageNameModula3: root::lldb::SBSourceLanguageName = 16;
        pub const SBSourceLanguageName_eLanguageNameObjC: root::lldb::SBSourceLanguageName = 17;
        pub const SBSourceLanguageName_eLanguageNameObjC_plus_plus:
            root::lldb::SBSourceLanguageName = 18;
        pub const SBSourceLanguageName_eLanguageNameOCaml: root::lldb::SBSourceLanguageName = 19;
        pub const SBSourceLanguageName_eLanguageNameOpenCL_C: root::lldb::SBSourceLanguageName = 20;
        pub const SBSourceLanguageName_eLanguageNamePascal: root::lldb::SBSourceLanguageName = 21;
        pub const SBSourceLanguageName_eLanguageNamePLI: root::lldb::SBSourceLanguageName = 22;
        pub const SBSourceLanguageName_eLanguageNamePython: root::lldb::SBSourceLanguageName = 23;
        pub const SBSourceLanguageName_eLanguageNameRenderScript: root::lldb::SBSourceLanguageName =
            24;
        pub const SBSourceLanguageName_eLanguageNameRust: root::lldb::SBSourceLanguageName = 25;
        pub const SBSourceLanguageName_eLanguageNameSwift: root::lldb::SBSourceLanguageName = 26;
        pub const SBSourceLanguageName_eLanguageNameUPC: root::lldb::SBSourceLanguageName = 27;
        pub const SBSourceLanguageName_eLanguageNameZig: root::lldb::SBSourceLanguageName = 28;
        pub const SBSourceLanguageName_eLanguageNameAssembly: root::lldb::SBSourceLanguageName = 29;
        pub const SBSourceLanguageName_eLanguageNameC_sharp: root::lldb::SBSourceLanguageName = 30;
        pub const SBSourceLanguageName_eLanguageNameMojo: root::lldb::SBSourceLanguageName = 31;
        pub const SBSourceLanguageName_eLanguageNameGLSL: root::lldb::SBSourceLanguageName = 32;
        pub const SBSourceLanguageName_eLanguageNameGLSL_ES: root::lldb::SBSourceLanguageName = 33;
        pub const SBSourceLanguageName_eLanguageNameHLSL: root::lldb::SBSourceLanguageName = 34;
        pub const SBSourceLanguageName_eLanguageNameOpenCL_CPP: root::lldb::SBSourceLanguageName =
            35;
        pub const SBSourceLanguageName_eLanguageNameCPP_for_OpenCL:
            root::lldb::SBSourceLanguageName = 36;
        pub const SBSourceLanguageName_eLanguageNameSYCL: root::lldb::SBSourceLanguageName = 37;
        pub const SBSourceLanguageName_eLanguageNameRuby: root::lldb::SBSourceLanguageName = 38;
        pub const SBSourceLanguageName_eLanguageNameMove: root::lldb::SBSourceLanguageName = 39;
        pub const SBSourceLanguageName_eLanguageNameHylo: root::lldb::SBSourceLanguageName = 40;
        pub type SBSourceLanguageName = u16;
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBExpressionOptions {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBExpressionOptions19GetCoerceResultToIdEv"]
            pub fn SBExpressionOptions_GetCoerceResultToId(
                this: *const root::lldb::SBExpressionOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions19SetCoerceResultToIdEb"]
            pub fn SBExpressionOptions_SetCoerceResultToId(
                this: *mut root::lldb::SBExpressionOptions,
                coerce: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBExpressionOptions16GetUnwindOnErrorEv"]
            pub fn SBExpressionOptions_GetUnwindOnError(
                this: *const root::lldb::SBExpressionOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions16SetUnwindOnErrorEb"]
            pub fn SBExpressionOptions_SetUnwindOnError(
                this: *mut root::lldb::SBExpressionOptions,
                unwind: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBExpressionOptions20GetIgnoreBreakpointsEv"]
            pub fn SBExpressionOptions_GetIgnoreBreakpoints(
                this: *const root::lldb::SBExpressionOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions20SetIgnoreBreakpointsEb"]
            pub fn SBExpressionOptions_SetIgnoreBreakpoints(
                this: *mut root::lldb::SBExpressionOptions,
                ignore: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBExpressionOptions20GetFetchDynamicValueEv"]
            pub fn SBExpressionOptions_GetFetchDynamicValue(
                this: *const root::lldb::SBExpressionOptions,
            ) -> root::lldb::DynamicValueType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions20SetFetchDynamicValueENS_16DynamicValueTypeE"]
            pub fn SBExpressionOptions_SetFetchDynamicValue(
                this: *mut root::lldb::SBExpressionOptions,
                dynamic: root::lldb::DynamicValueType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBExpressionOptions24GetTimeoutInMicroSecondsEv"]
            pub fn SBExpressionOptions_GetTimeoutInMicroSeconds(
                this: *const root::lldb::SBExpressionOptions,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions24SetTimeoutInMicroSecondsEj"]
            pub fn SBExpressionOptions_SetTimeoutInMicroSeconds(
                this: *mut root::lldb::SBExpressionOptions,
                timeout: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBExpressionOptions33GetOneThreadTimeoutInMicroSecondsEv"]
            pub fn SBExpressionOptions_GetOneThreadTimeoutInMicroSeconds(
                this: *const root::lldb::SBExpressionOptions,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions33SetOneThreadTimeoutInMicroSecondsEj"]
            pub fn SBExpressionOptions_SetOneThreadTimeoutInMicroSeconds(
                this: *mut root::lldb::SBExpressionOptions,
                timeout: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBExpressionOptions16GetTryAllThreadsEv"]
            pub fn SBExpressionOptions_GetTryAllThreads(
                this: *const root::lldb::SBExpressionOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions16SetTryAllThreadsEb"]
            pub fn SBExpressionOptions_SetTryAllThreads(
                this: *mut root::lldb::SBExpressionOptions,
                run_others: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBExpressionOptions13GetStopOthersEv"]
            pub fn SBExpressionOptions_GetStopOthers(
                this: *const root::lldb::SBExpressionOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions13SetStopOthersEb"]
            pub fn SBExpressionOptions_SetStopOthers(
                this: *mut root::lldb::SBExpressionOptions,
                stop_others: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBExpressionOptions17GetTrapExceptionsEv"]
            pub fn SBExpressionOptions_GetTrapExceptions(
                this: *const root::lldb::SBExpressionOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions17SetTrapExceptionsEb"]
            pub fn SBExpressionOptions_SetTrapExceptions(
                this: *mut root::lldb::SBExpressionOptions,
                trap_exceptions: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions11SetLanguageENS_12LanguageTypeE"]
            pub fn SBExpressionOptions_SetLanguage(
                this: *mut root::lldb::SBExpressionOptions,
                language: root::lldb::LanguageType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions11SetLanguageENS_20SBSourceLanguageNameEj"]
            pub fn SBExpressionOptions_SetLanguage1(
                this: *mut root::lldb::SBExpressionOptions,
                name: root::lldb::SBSourceLanguageName,
                version: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions17SetCancelCallbackEPFbNS_25ExpressionEvaluationPhaseEPvES2_"]
            pub fn SBExpressionOptions_SetCancelCallback(
                this: *mut root::lldb::SBExpressionOptions,
                callback: root::lldb::ExpressionCancelCallback,
                baton: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions20GetGenerateDebugInfoEv"]
            pub fn SBExpressionOptions_GetGenerateDebugInfo(
                this: *mut root::lldb::SBExpressionOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions20SetGenerateDebugInfoEb"]
            pub fn SBExpressionOptions_SetGenerateDebugInfo(
                this: *mut root::lldb::SBExpressionOptions,
                b: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions27GetSuppressPersistentResultEv"]
            pub fn SBExpressionOptions_GetSuppressPersistentResult(
                this: *mut root::lldb::SBExpressionOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions27SetSuppressPersistentResultEb"]
            pub fn SBExpressionOptions_SetSuppressPersistentResult(
                this: *mut root::lldb::SBExpressionOptions,
                b: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBExpressionOptions9GetPrefixEv"]
            pub fn SBExpressionOptions_GetPrefix(
                this: *const root::lldb::SBExpressionOptions,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions9SetPrefixEPKc"]
            pub fn SBExpressionOptions_SetPrefix(
                this: *mut root::lldb::SBExpressionOptions,
                prefix: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions18SetAutoApplyFixItsEb"]
            pub fn SBExpressionOptions_SetAutoApplyFixIts(
                this: *mut root::lldb::SBExpressionOptions,
                b: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions18GetAutoApplyFixItsEv"]
            pub fn SBExpressionOptions_GetAutoApplyFixIts(
                this: *mut root::lldb::SBExpressionOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions20SetRetriesWithFixItsEm"]
            pub fn SBExpressionOptions_SetRetriesWithFixIts(
                this: *mut root::lldb::SBExpressionOptions,
                retries: u64,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions20GetRetriesWithFixItsEv"]
            pub fn SBExpressionOptions_GetRetriesWithFixIts(
                this: *mut root::lldb::SBExpressionOptions,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions11GetTopLevelEv"]
            pub fn SBExpressionOptions_GetTopLevel(
                this: *mut root::lldb::SBExpressionOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions11SetTopLevelEb"]
            pub fn SBExpressionOptions_SetTopLevel(
                this: *mut root::lldb::SBExpressionOptions,
                b: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions11GetAllowJITEv"]
            pub fn SBExpressionOptions_GetAllowJIT(
                this: *mut root::lldb::SBExpressionOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptions11SetAllowJITEb"]
            pub fn SBExpressionOptions_SetAllowJIT(
                this: *mut root::lldb::SBExpressionOptions,
                allow: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBExpressionOptions3getEv"]
            pub fn SBExpressionOptions_get(
                this: *const root::lldb::SBExpressionOptions,
            ) -> *mut root::lldb_private::EvaluateExpressionOptions;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBExpressionOptions3refEv"]
            pub fn SBExpressionOptions_ref(
                this: *const root::lldb::SBExpressionOptions,
            ) -> *mut root::lldb_private::EvaluateExpressionOptions;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptionsC1Ev"]
            pub fn SBExpressionOptions_SBExpressionOptions(
                this: *mut root::lldb::SBExpressionOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptionsC1ERKS0_"]
            pub fn SBExpressionOptions_SBExpressionOptions1(
                this: *mut root::lldb::SBExpressionOptions,
                rhs: *const root::lldb::SBExpressionOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBExpressionOptionsD1Ev"]
            pub fn SBExpressionOptions_SBExpressionOptions_destructor(
                this: *mut root::lldb::SBExpressionOptions,
            );
        }
        impl SBExpressionOptions {
            #[inline]
            pub unsafe fn GetCoerceResultToId(&self) -> bool {
                SBExpressionOptions_GetCoerceResultToId(self)
            }
            #[inline]
            pub unsafe fn SetCoerceResultToId(&mut self, coerce: bool) {
                SBExpressionOptions_SetCoerceResultToId(self, coerce)
            }
            #[inline]
            pub unsafe fn GetUnwindOnError(&self) -> bool {
                SBExpressionOptions_GetUnwindOnError(self)
            }
            #[inline]
            pub unsafe fn SetUnwindOnError(&mut self, unwind: bool) {
                SBExpressionOptions_SetUnwindOnError(self, unwind)
            }
            #[inline]
            pub unsafe fn GetIgnoreBreakpoints(&self) -> bool {
                SBExpressionOptions_GetIgnoreBreakpoints(self)
            }
            #[inline]
            pub unsafe fn SetIgnoreBreakpoints(&mut self, ignore: bool) {
                SBExpressionOptions_SetIgnoreBreakpoints(self, ignore)
            }
            #[inline]
            pub unsafe fn GetFetchDynamicValue(&self) -> root::lldb::DynamicValueType {
                SBExpressionOptions_GetFetchDynamicValue(self)
            }
            #[inline]
            pub unsafe fn SetFetchDynamicValue(&mut self, dynamic: root::lldb::DynamicValueType) {
                SBExpressionOptions_SetFetchDynamicValue(self, dynamic)
            }
            #[inline]
            pub unsafe fn GetTimeoutInMicroSeconds(&self) -> u32 {
                SBExpressionOptions_GetTimeoutInMicroSeconds(self)
            }
            #[inline]
            pub unsafe fn SetTimeoutInMicroSeconds(&mut self, timeout: u32) {
                SBExpressionOptions_SetTimeoutInMicroSeconds(self, timeout)
            }
            #[inline]
            pub unsafe fn GetOneThreadTimeoutInMicroSeconds(&self) -> u32 {
                SBExpressionOptions_GetOneThreadTimeoutInMicroSeconds(self)
            }
            #[inline]
            pub unsafe fn SetOneThreadTimeoutInMicroSeconds(&mut self, timeout: u32) {
                SBExpressionOptions_SetOneThreadTimeoutInMicroSeconds(self, timeout)
            }
            #[inline]
            pub unsafe fn GetTryAllThreads(&self) -> bool {
                SBExpressionOptions_GetTryAllThreads(self)
            }
            #[inline]
            pub unsafe fn SetTryAllThreads(&mut self, run_others: bool) {
                SBExpressionOptions_SetTryAllThreads(self, run_others)
            }
            #[inline]
            pub unsafe fn GetStopOthers(&self) -> bool {
                SBExpressionOptions_GetStopOthers(self)
            }
            #[inline]
            pub unsafe fn SetStopOthers(&mut self, stop_others: bool) {
                SBExpressionOptions_SetStopOthers(self, stop_others)
            }
            #[inline]
            pub unsafe fn GetTrapExceptions(&self) -> bool {
                SBExpressionOptions_GetTrapExceptions(self)
            }
            #[inline]
            pub unsafe fn SetTrapExceptions(&mut self, trap_exceptions: bool) {
                SBExpressionOptions_SetTrapExceptions(self, trap_exceptions)
            }
            #[inline]
            pub unsafe fn SetLanguage(&mut self, language: root::lldb::LanguageType) {
                SBExpressionOptions_SetLanguage(self, language)
            }
            #[inline]
            pub unsafe fn SetLanguage1(
                &mut self,
                name: root::lldb::SBSourceLanguageName,
                version: u32,
            ) {
                SBExpressionOptions_SetLanguage1(self, name, version)
            }
            #[inline]
            pub unsafe fn SetCancelCallback(
                &mut self,
                callback: root::lldb::ExpressionCancelCallback,
                baton: *mut ::std::os::raw::c_void,
            ) {
                SBExpressionOptions_SetCancelCallback(self, callback, baton)
            }
            #[inline]
            pub unsafe fn GetGenerateDebugInfo(&mut self) -> bool {
                SBExpressionOptions_GetGenerateDebugInfo(self)
            }
            #[inline]
            pub unsafe fn SetGenerateDebugInfo(&mut self, b: bool) {
                SBExpressionOptions_SetGenerateDebugInfo(self, b)
            }
            #[inline]
            pub unsafe fn GetSuppressPersistentResult(&mut self) -> bool {
                SBExpressionOptions_GetSuppressPersistentResult(self)
            }
            #[inline]
            pub unsafe fn SetSuppressPersistentResult(&mut self, b: bool) {
                SBExpressionOptions_SetSuppressPersistentResult(self, b)
            }
            #[inline]
            pub unsafe fn GetPrefix(&self) -> *const ::std::os::raw::c_char {
                SBExpressionOptions_GetPrefix(self)
            }
            #[inline]
            pub unsafe fn SetPrefix(&mut self, prefix: *const ::std::os::raw::c_char) {
                SBExpressionOptions_SetPrefix(self, prefix)
            }
            #[inline]
            pub unsafe fn SetAutoApplyFixIts(&mut self, b: bool) {
                SBExpressionOptions_SetAutoApplyFixIts(self, b)
            }
            #[inline]
            pub unsafe fn GetAutoApplyFixIts(&mut self) -> bool {
                SBExpressionOptions_GetAutoApplyFixIts(self)
            }
            #[inline]
            pub unsafe fn SetRetriesWithFixIts(&mut self, retries: u64) {
                SBExpressionOptions_SetRetriesWithFixIts(self, retries)
            }
            #[inline]
            pub unsafe fn GetRetriesWithFixIts(&mut self) -> u64 {
                SBExpressionOptions_GetRetriesWithFixIts(self)
            }
            #[inline]
            pub unsafe fn GetTopLevel(&mut self) -> bool {
                SBExpressionOptions_GetTopLevel(self)
            }
            #[inline]
            pub unsafe fn SetTopLevel(&mut self, b: bool) {
                SBExpressionOptions_SetTopLevel(self, b)
            }
            #[inline]
            pub unsafe fn GetAllowJIT(&mut self) -> bool {
                SBExpressionOptions_GetAllowJIT(self)
            }
            #[inline]
            pub unsafe fn SetAllowJIT(&mut self, allow: bool) {
                SBExpressionOptions_SetAllowJIT(self, allow)
            }
            #[inline]
            pub unsafe fn get(&self) -> *mut root::lldb_private::EvaluateExpressionOptions {
                SBExpressionOptions_get(self)
            }
            #[inline]
            pub unsafe fn ref_(&self) -> *mut root::lldb_private::EvaluateExpressionOptions {
                SBExpressionOptions_ref(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBExpressionOptions_SBExpressionOptions(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBExpressionOptions) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBExpressionOptions_SBExpressionOptions1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBExpressionOptions_SBExpressionOptions_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBFile {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBFile4ReadEPhmPm"]
            pub fn SBFile_Read(
                this: *mut root::lldb::SBFile,
                buf: *mut u8,
                num_bytes: usize,
                OUTPUT: *mut usize,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBFile5WriteEPKhmPm"]
            pub fn SBFile_Write(
                this: *mut root::lldb::SBFile,
                buf: *const u8,
                num_bytes: usize,
                OUTPUT: *mut usize,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBFile5FlushEv"]
            pub fn SBFile_Flush(this: *mut root::lldb::SBFile) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb6SBFile7IsValidEv"]
            pub fn SBFile_IsValid(this: *const root::lldb::SBFile) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBFile5CloseEv"]
            pub fn SBFile_Close(this: *mut root::lldb::SBFile) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb6SBFile7GetFileEv"]
            pub fn SBFile_GetFile(this: *const root::lldb::SBFile) -> root::lldb::FileSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBFileC1Ev"]
            pub fn SBFile_SBFile(this: *mut root::lldb::SBFile);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBFileC1ESt10shared_ptrIN12lldb_private4FileEE"]
            pub fn SBFile_SBFile1(this: *mut root::lldb::SBFile, file_sp: root::lldb::FileSP);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBFileC1ERKS0_"]
            pub fn SBFile_SBFile2(this: *mut root::lldb::SBFile, rhs: *const root::lldb::SBFile);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBFileC1EP8_IO_FILEb"]
            pub fn SBFile_SBFile3(
                this: *mut root::lldb::SBFile,
                file: *mut root::FILE,
                transfer_ownership: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBFileC1EiPKcb"]
            pub fn SBFile_SBFile4(
                this: *mut root::lldb::SBFile,
                fd: ::std::os::raw::c_int,
                mode: *const ::std::os::raw::c_char,
                transfer_ownership: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb6SBFileD1Ev"]
            pub fn SBFile_SBFile_destructor(this: *mut root::lldb::SBFile);
        }
        impl SBFile {
            #[inline]
            pub unsafe fn Read(
                &mut self,
                buf: *mut u8,
                num_bytes: usize,
                OUTPUT: *mut usize,
            ) -> root::lldb::SBError {
                SBFile_Read(self, buf, num_bytes, OUTPUT)
            }
            #[inline]
            pub unsafe fn Write(
                &mut self,
                buf: *const u8,
                num_bytes: usize,
                OUTPUT: *mut usize,
            ) -> root::lldb::SBError {
                SBFile_Write(self, buf, num_bytes, OUTPUT)
            }
            #[inline]
            pub unsafe fn Flush(&mut self) -> root::lldb::SBError {
                SBFile_Flush(self)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBFile_IsValid(self)
            }
            #[inline]
            pub unsafe fn Close(&mut self) -> root::lldb::SBError {
                SBFile_Close(self)
            }
            #[inline]
            pub unsafe fn GetFile(&self) -> root::lldb::FileSP {
                SBFile_GetFile(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFile_SBFile(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(file_sp: root::lldb::FileSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFile_SBFile1(__bindgen_tmp.as_mut_ptr(), file_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(rhs: *const root::lldb::SBFile) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFile_SBFile2(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(file: *mut root::FILE, transfer_ownership: bool) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFile_SBFile3(__bindgen_tmp.as_mut_ptr(), file, transfer_ownership);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(
                fd: ::std::os::raw::c_int,
                mode: *const ::std::os::raw::c_char,
                transfer_ownership: bool,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFile_SBFile4(__bindgen_tmp.as_mut_ptr(), fd, mode, transfer_ownership);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBFile_SBFile_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBFormat {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBFormat16GetFormatEntrySPEv"]
            pub fn SBFormat_GetFormatEntrySP(
                this: *const root::lldb::SBFormat,
            ) -> root::lldb::FormatEntrySP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBFormatC1Ev"]
            pub fn SBFormat_SBFormat(this: *mut root::lldb::SBFormat);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBFormatC1EPKcRNS_7SBErrorE"]
            pub fn SBFormat_SBFormat1(
                this: *mut root::lldb::SBFormat,
                format: *const ::std::os::raw::c_char,
                error: *mut root::lldb::SBError,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBFormatC1ERKS0_"]
            pub fn SBFormat_SBFormat2(
                this: *mut root::lldb::SBFormat,
                rhs: *const root::lldb::SBFormat,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBFormatD1Ev"]
            pub fn SBFormat_SBFormat_destructor(this: *mut root::lldb::SBFormat);
        }
        impl SBFormat {
            #[inline]
            pub unsafe fn GetFormatEntrySP(&self) -> root::lldb::FormatEntrySP {
                SBFormat_GetFormatEntrySP(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFormat_SBFormat(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                format: *const ::std::os::raw::c_char,
                error: *mut root::lldb::SBError,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFormat_SBFormat1(__bindgen_tmp.as_mut_ptr(), format, error);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(rhs: *const root::lldb::SBFormat) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBFormat_SBFormat2(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBFormat_SBFormat_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(1))]
        #[derive(Debug)]
        pub struct SBHostOS {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBHostOS18GetProgramFileSpecEv"]
            pub fn SBHostOS_GetProgramFileSpec() -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBHostOS17GetLLDBPythonPathEv"]
            pub fn SBHostOS_GetLLDBPythonPath() -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBHostOS11GetLLDBPathENS_8PathTypeE"]
            pub fn SBHostOS_GetLLDBPath(path_type: root::lldb::PathType) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBHostOS20GetUserHomeDirectoryEv"]
            pub fn SBHostOS_GetUserHomeDirectory() -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBHostOS13ThreadCreatedEPKc"]
            pub fn SBHostOS_ThreadCreated(name: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBHostOS12ThreadCreateEPKcPFPvS3_ES3_PNS_7SBErrorE"]
            pub fn SBHostOS_ThreadCreate(
                name: *const ::std::os::raw::c_char,
                thread_function: root::lldb::thread_func_t,
                thread_arg: *mut ::std::os::raw::c_void,
                err: *mut root::lldb::SBError,
            ) -> root::lldb::thread_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBHostOS12ThreadCancelEmPNS_7SBErrorE"]
            pub fn SBHostOS_ThreadCancel(
                thread: root::lldb::thread_t,
                err: *mut root::lldb::SBError,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBHostOS12ThreadDetachEmPNS_7SBErrorE"]
            pub fn SBHostOS_ThreadDetach(
                thread: root::lldb::thread_t,
                err: *mut root::lldb::SBError,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBHostOS10ThreadJoinEmPPvPNS_7SBErrorE"]
            pub fn SBHostOS_ThreadJoin(
                thread: root::lldb::thread_t,
                result: *mut root::lldb::thread_result_t,
                err: *mut root::lldb::SBError,
            ) -> bool;
        }
        impl SBHostOS {
            #[inline]
            pub unsafe fn GetProgramFileSpec() -> root::lldb::SBFileSpec {
                SBHostOS_GetProgramFileSpec()
            }
            #[inline]
            pub unsafe fn GetLLDBPythonPath() -> root::lldb::SBFileSpec {
                SBHostOS_GetLLDBPythonPath()
            }
            #[inline]
            pub unsafe fn GetLLDBPath(path_type: root::lldb::PathType) -> root::lldb::SBFileSpec {
                SBHostOS_GetLLDBPath(path_type)
            }
            #[inline]
            pub unsafe fn GetUserHomeDirectory() -> root::lldb::SBFileSpec {
                SBHostOS_GetUserHomeDirectory()
            }
            #[inline]
            pub unsafe fn ThreadCreated(name: *const ::std::os::raw::c_char) {
                SBHostOS_ThreadCreated(name)
            }
            #[inline]
            pub unsafe fn ThreadCreate(
                name: *const ::std::os::raw::c_char,
                thread_function: root::lldb::thread_func_t,
                thread_arg: *mut ::std::os::raw::c_void,
                err: *mut root::lldb::SBError,
            ) -> root::lldb::thread_t {
                SBHostOS_ThreadCreate(name, thread_function, thread_arg, err)
            }
            #[inline]
            pub unsafe fn ThreadCancel(
                thread: root::lldb::thread_t,
                err: *mut root::lldb::SBError,
            ) -> bool {
                SBHostOS_ThreadCancel(thread, err)
            }
            #[inline]
            pub unsafe fn ThreadDetach(
                thread: root::lldb::thread_t,
                err: *mut root::lldb::SBError,
            ) -> bool {
                SBHostOS_ThreadDetach(thread, err)
            }
            #[inline]
            pub unsafe fn ThreadJoin(
                thread: root::lldb::thread_t,
                result: *mut root::lldb::thread_result_t,
                err: *mut root::lldb::SBError,
            ) -> bool {
                SBHostOS_ThreadJoin(thread, result, err)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBInstruction {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction7IsValidEv"]
            pub fn SBInstruction_IsValid(this: *mut root::lldb::SBInstruction) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction10GetAddressEv"]
            pub fn SBInstruction_GetAddress(
                this: *mut root::lldb::SBInstruction,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction11GetMnemonicENS_8SBTargetE"]
            pub fn SBInstruction_GetMnemonic(
                this: *mut root::lldb::SBInstruction,
                target: root::lldb::SBTarget,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction11GetOperandsENS_8SBTargetE"]
            pub fn SBInstruction_GetOperands(
                this: *mut root::lldb::SBInstruction,
                target: root::lldb::SBTarget,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction10GetCommentENS_8SBTargetE"]
            pub fn SBInstruction_GetComment(
                this: *mut root::lldb::SBInstruction,
                target: root::lldb::SBTarget,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction18GetControlFlowKindENS_8SBTargetE"]
            pub fn SBInstruction_GetControlFlowKind(
                this: *mut root::lldb::SBInstruction,
                target: root::lldb::SBTarget,
            ) -> root::lldb::InstructionControlFlowKind;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction7GetDataENS_8SBTargetE"]
            pub fn SBInstruction_GetData(
                this: *mut root::lldb::SBInstruction,
                target: root::lldb::SBTarget,
            ) -> root::lldb::SBData;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction11GetByteSizeEv"]
            pub fn SBInstruction_GetByteSize(this: *mut root::lldb::SBInstruction) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction10DoesBranchEv"]
            pub fn SBInstruction_DoesBranch(this: *mut root::lldb::SBInstruction) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction12HasDelaySlotEv"]
            pub fn SBInstruction_HasDelaySlot(this: *mut root::lldb::SBInstruction) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction16CanSetBreakpointEv"]
            pub fn SBInstruction_CanSetBreakpoint(this: *mut root::lldb::SBInstruction) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction5PrintEP8_IO_FILE"]
            pub fn SBInstruction_Print(this: *mut root::lldb::SBInstruction, out: *mut root::FILE);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction5PrintENS_6SBFileE"]
            pub fn SBInstruction_Print1(
                this: *mut root::lldb::SBInstruction,
                out: root::lldb::SBFile,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction5PrintESt10shared_ptrIN12lldb_private4FileEE"]
            pub fn SBInstruction_Print2(
                this: *mut root::lldb::SBInstruction,
                BORROWED: root::lldb::FileSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction14GetDescriptionERNS_8SBStreamE"]
            pub fn SBInstruction_GetDescription(
                this: *mut root::lldb::SBInstruction,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction16EmulateWithFrameERNS_7SBFrameEj"]
            pub fn SBInstruction_EmulateWithFrame(
                this: *mut root::lldb::SBInstruction,
                frame: *mut root::lldb::SBFrame,
                evaluate_options: u32,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction13DumpEmulationEPKc"]
            pub fn SBInstruction_DumpEmulation(
                this: *mut root::lldb::SBInstruction,
                triple: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction13TestEmulationERNS_8SBStreamEPKc"]
            pub fn SBInstruction_TestEmulation(
                this: *mut root::lldb::SBInstruction,
                output_stream: *mut root::lldb::SBStream,
                test_file: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction9SetOpaqueERKSt10shared_ptrIN12lldb_private12DisassemblerEERKS1_INS2_11InstructionEE"]
            pub fn SBInstruction_SetOpaque(
                this: *mut root::lldb::SBInstruction,
                disasm_sp: *const root::lldb::DisassemblerSP,
                inst_sp: *const root::lldb::InstructionSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstruction9GetOpaqueEv"]
            pub fn SBInstruction_GetOpaque(
                this: *mut root::lldb::SBInstruction,
            ) -> root::lldb::InstructionSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstructionC1Ev"]
            pub fn SBInstruction_SBInstruction(this: *mut root::lldb::SBInstruction);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstructionC1ERKS0_"]
            pub fn SBInstruction_SBInstruction1(
                this: *mut root::lldb::SBInstruction,
                rhs: *const root::lldb::SBInstruction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstructionC1ERKSt10shared_ptrIN12lldb_private12DisassemblerEERKS1_INS2_11InstructionEE"]
            pub fn SBInstruction_SBInstruction2(
                this: *mut root::lldb::SBInstruction,
                disasm_sp: *const root::lldb::DisassemblerSP,
                inst_sp: *const root::lldb::InstructionSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBInstructionD1Ev"]
            pub fn SBInstruction_SBInstruction_destructor(this: *mut root::lldb::SBInstruction);
        }
        impl SBInstruction {
            #[inline]
            pub unsafe fn IsValid(&mut self) -> bool {
                SBInstruction_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetAddress(&mut self) -> root::lldb::SBAddress {
                SBInstruction_GetAddress(self)
            }
            #[inline]
            pub unsafe fn GetMnemonic(
                &mut self,
                target: root::lldb::SBTarget,
            ) -> *const ::std::os::raw::c_char {
                SBInstruction_GetMnemonic(self, target)
            }
            #[inline]
            pub unsafe fn GetOperands(
                &mut self,
                target: root::lldb::SBTarget,
            ) -> *const ::std::os::raw::c_char {
                SBInstruction_GetOperands(self, target)
            }
            #[inline]
            pub unsafe fn GetComment(
                &mut self,
                target: root::lldb::SBTarget,
            ) -> *const ::std::os::raw::c_char {
                SBInstruction_GetComment(self, target)
            }
            #[inline]
            pub unsafe fn GetControlFlowKind(
                &mut self,
                target: root::lldb::SBTarget,
            ) -> root::lldb::InstructionControlFlowKind {
                SBInstruction_GetControlFlowKind(self, target)
            }
            #[inline]
            pub unsafe fn GetData(&mut self, target: root::lldb::SBTarget) -> root::lldb::SBData {
                SBInstruction_GetData(self, target)
            }
            #[inline]
            pub unsafe fn GetByteSize(&mut self) -> usize {
                SBInstruction_GetByteSize(self)
            }
            #[inline]
            pub unsafe fn DoesBranch(&mut self) -> bool {
                SBInstruction_DoesBranch(self)
            }
            #[inline]
            pub unsafe fn HasDelaySlot(&mut self) -> bool {
                SBInstruction_HasDelaySlot(self)
            }
            #[inline]
            pub unsafe fn CanSetBreakpoint(&mut self) -> bool {
                SBInstruction_CanSetBreakpoint(self)
            }
            #[inline]
            pub unsafe fn Print(&mut self, out: *mut root::FILE) {
                SBInstruction_Print(self, out)
            }
            #[inline]
            pub unsafe fn Print1(&mut self, out: root::lldb::SBFile) {
                SBInstruction_Print1(self, out)
            }
            #[inline]
            pub unsafe fn Print2(&mut self, BORROWED: root::lldb::FileSP) {
                SBInstruction_Print2(self, BORROWED)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBInstruction_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn EmulateWithFrame(
                &mut self,
                frame: *mut root::lldb::SBFrame,
                evaluate_options: u32,
            ) -> bool {
                SBInstruction_EmulateWithFrame(self, frame, evaluate_options)
            }
            #[inline]
            pub unsafe fn DumpEmulation(&mut self, triple: *const ::std::os::raw::c_char) -> bool {
                SBInstruction_DumpEmulation(self, triple)
            }
            #[inline]
            pub unsafe fn TestEmulation(
                &mut self,
                output_stream: *mut root::lldb::SBStream,
                test_file: *const ::std::os::raw::c_char,
            ) -> bool {
                SBInstruction_TestEmulation(self, output_stream, test_file)
            }
            #[inline]
            pub unsafe fn SetOpaque(
                &mut self,
                disasm_sp: *const root::lldb::DisassemblerSP,
                inst_sp: *const root::lldb::InstructionSP,
            ) {
                SBInstruction_SetOpaque(self, disasm_sp, inst_sp)
            }
            #[inline]
            pub unsafe fn GetOpaque(&mut self) -> root::lldb::InstructionSP {
                SBInstruction_GetOpaque(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBInstruction_SBInstruction(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBInstruction) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBInstruction_SBInstruction1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                disasm_sp: *const root::lldb::DisassemblerSP,
                inst_sp: *const root::lldb::InstructionSP,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBInstruction_SBInstruction2(__bindgen_tmp.as_mut_ptr(), disasm_sp, inst_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBInstruction_SBInstruction_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(1))]
        #[derive(Debug)]
        pub struct SBLanguageRuntime {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBLanguageRuntime25GetLanguageTypeFromStringEPKc"]
            pub fn SBLanguageRuntime_GetLanguageTypeFromString(
                string: *const ::std::os::raw::c_char,
            ) -> root::lldb::LanguageType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBLanguageRuntime22GetNameForLanguageTypeENS_12LanguageTypeE"]
            pub fn SBLanguageRuntime_GetNameForLanguageType(
                language: root::lldb::LanguageType,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBLanguageRuntime19LanguageIsCPlusPlusENS_12LanguageTypeE"]
            pub fn SBLanguageRuntime_LanguageIsCPlusPlus(
                language: root::lldb::LanguageType,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBLanguageRuntime14LanguageIsObjCENS_12LanguageTypeE"]
            pub fn SBLanguageRuntime_LanguageIsObjC(language: root::lldb::LanguageType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBLanguageRuntime17LanguageIsCFamilyENS_12LanguageTypeE"]
            pub fn SBLanguageRuntime_LanguageIsCFamily(language: root::lldb::LanguageType) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBLanguageRuntime35SupportsExceptionBreakpointsOnThrowENS_12LanguageTypeE"]
            pub fn SBLanguageRuntime_SupportsExceptionBreakpointsOnThrow(
                language: root::lldb::LanguageType,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBLanguageRuntime35SupportsExceptionBreakpointsOnCatchENS_12LanguageTypeE"]
            pub fn SBLanguageRuntime_SupportsExceptionBreakpointsOnCatch(
                language: root::lldb::LanguageType,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBLanguageRuntime26GetThrowKeywordForLanguageENS_12LanguageTypeE"]
            pub fn SBLanguageRuntime_GetThrowKeywordForLanguage(
                language: root::lldb::LanguageType,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBLanguageRuntime26GetCatchKeywordForLanguageENS_12LanguageTypeE"]
            pub fn SBLanguageRuntime_GetCatchKeywordForLanguage(
                language: root::lldb::LanguageType,
            ) -> *const ::std::os::raw::c_char;
        }
        impl SBLanguageRuntime {
            #[inline]
            pub unsafe fn GetLanguageTypeFromString(
                string: *const ::std::os::raw::c_char,
            ) -> root::lldb::LanguageType {
                SBLanguageRuntime_GetLanguageTypeFromString(string)
            }
            #[inline]
            pub unsafe fn GetNameForLanguageType(
                language: root::lldb::LanguageType,
            ) -> *const ::std::os::raw::c_char {
                SBLanguageRuntime_GetNameForLanguageType(language)
            }
            #[inline]
            pub unsafe fn LanguageIsCPlusPlus(language: root::lldb::LanguageType) -> bool {
                SBLanguageRuntime_LanguageIsCPlusPlus(language)
            }
            #[inline]
            pub unsafe fn LanguageIsObjC(language: root::lldb::LanguageType) -> bool {
                SBLanguageRuntime_LanguageIsObjC(language)
            }
            #[inline]
            pub unsafe fn LanguageIsCFamily(language: root::lldb::LanguageType) -> bool {
                SBLanguageRuntime_LanguageIsCFamily(language)
            }
            #[inline]
            pub unsafe fn SupportsExceptionBreakpointsOnThrow(
                language: root::lldb::LanguageType,
            ) -> bool {
                SBLanguageRuntime_SupportsExceptionBreakpointsOnThrow(language)
            }
            #[inline]
            pub unsafe fn SupportsExceptionBreakpointsOnCatch(
                language: root::lldb::LanguageType,
            ) -> bool {
                SBLanguageRuntime_SupportsExceptionBreakpointsOnCatch(language)
            }
            #[inline]
            pub unsafe fn GetThrowKeywordForLanguage(
                language: root::lldb::LanguageType,
            ) -> *const ::std::os::raw::c_char {
                SBLanguageRuntime_GetThrowKeywordForLanguage(language)
            }
            #[inline]
            pub unsafe fn GetCatchKeywordForLanguage(
                language: root::lldb::LanguageType,
            ) -> *const ::std::os::raw::c_char {
                SBLanguageRuntime_GetCatchKeywordForLanguage(language)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBListener {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 3usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener8AddEventERKNS_7SBEventE"]
            pub fn SBListener_AddEvent(
                this: *mut root::lldb::SBListener,
                event: *const root::lldb::SBEvent,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener5ClearEv"]
            pub fn SBListener_Clear(this: *mut root::lldb::SBListener);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb10SBListener7IsValidEv"]
            pub fn SBListener_IsValid(this: *const root::lldb::SBListener) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener27StartListeningForEventClassERNS_10SBDebuggerEPKcj"]
            pub fn SBListener_StartListeningForEventClass(
                this: *mut root::lldb::SBListener,
                debugger: *mut root::lldb::SBDebugger,
                broadcaster_class: *const ::std::os::raw::c_char,
                event_mask: u32,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener26StopListeningForEventClassERNS_10SBDebuggerEPKcj"]
            pub fn SBListener_StopListeningForEventClass(
                this: *mut root::lldb::SBListener,
                debugger: *mut root::lldb::SBDebugger,
                broadcaster_class: *const ::std::os::raw::c_char,
                event_mask: u32,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener23StartListeningForEventsERKNS_13SBBroadcasterEj"]
            pub fn SBListener_StartListeningForEvents(
                this: *mut root::lldb::SBListener,
                broadcaster: *const root::lldb::SBBroadcaster,
                event_mask: u32,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener22StopListeningForEventsERKNS_13SBBroadcasterEj"]
            pub fn SBListener_StopListeningForEvents(
                this: *mut root::lldb::SBListener,
                broadcaster: *const root::lldb::SBBroadcaster,
                event_mask: u32,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener12WaitForEventEjRNS_7SBEventE"]
            pub fn SBListener_WaitForEvent(
                this: *mut root::lldb::SBListener,
                num_seconds: u32,
                event: *mut root::lldb::SBEvent,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener26WaitForEventForBroadcasterEjRKNS_13SBBroadcasterERNS_7SBEventE"]
            pub fn SBListener_WaitForEventForBroadcaster(
                this: *mut root::lldb::SBListener,
                num_seconds: u32,
                broadcaster: *const root::lldb::SBBroadcaster,
                sb_event: *mut root::lldb::SBEvent,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener34WaitForEventForBroadcasterWithTypeEjRKNS_13SBBroadcasterEjRNS_7SBEventE"]
            pub fn SBListener_WaitForEventForBroadcasterWithType(
                this: *mut root::lldb::SBListener,
                num_seconds: u32,
                broadcaster: *const root::lldb::SBBroadcaster,
                event_type_mask: u32,
                sb_event: *mut root::lldb::SBEvent,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener15PeekAtNextEventERNS_7SBEventE"]
            pub fn SBListener_PeekAtNextEvent(
                this: *mut root::lldb::SBListener,
                sb_event: *mut root::lldb::SBEvent,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener29PeekAtNextEventForBroadcasterERKNS_13SBBroadcasterERNS_7SBEventE"]
            pub fn SBListener_PeekAtNextEventForBroadcaster(
                this: *mut root::lldb::SBListener,
                broadcaster: *const root::lldb::SBBroadcaster,
                sb_event: *mut root::lldb::SBEvent,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener37PeekAtNextEventForBroadcasterWithTypeERKNS_13SBBroadcasterEjRNS_7SBEventE"]
            pub fn SBListener_PeekAtNextEventForBroadcasterWithType(
                this: *mut root::lldb::SBListener,
                broadcaster: *const root::lldb::SBBroadcaster,
                event_type_mask: u32,
                sb_event: *mut root::lldb::SBEvent,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener12GetNextEventERNS_7SBEventE"]
            pub fn SBListener_GetNextEvent(
                this: *mut root::lldb::SBListener,
                sb_event: *mut root::lldb::SBEvent,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener26GetNextEventForBroadcasterERKNS_13SBBroadcasterERNS_7SBEventE"]
            pub fn SBListener_GetNextEventForBroadcaster(
                this: *mut root::lldb::SBListener,
                broadcaster: *const root::lldb::SBBroadcaster,
                sb_event: *mut root::lldb::SBEvent,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener34GetNextEventForBroadcasterWithTypeERKNS_13SBBroadcasterEjRNS_7SBEventE"]
            pub fn SBListener_GetNextEventForBroadcasterWithType(
                this: *mut root::lldb::SBListener,
                broadcaster: *const root::lldb::SBBroadcaster,
                event_type_mask: u32,
                sb_event: *mut root::lldb::SBEvent,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener20HandleBroadcastEventERKNS_7SBEventE"]
            pub fn SBListener_HandleBroadcastEvent(
                this: *mut root::lldb::SBListener,
                event: *const root::lldb::SBEvent,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListener5GetSPEv"]
            pub fn SBListener_GetSP(this: *mut root::lldb::SBListener) -> root::lldb::ListenerSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListenerC1Ev"]
            pub fn SBListener_SBListener(this: *mut root::lldb::SBListener);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListenerC1EPKc"]
            pub fn SBListener_SBListener1(
                this: *mut root::lldb::SBListener,
                name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListenerC1ERKS0_"]
            pub fn SBListener_SBListener2(
                this: *mut root::lldb::SBListener,
                rhs: *const root::lldb::SBListener,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListenerC1ERKSt10shared_ptrIN12lldb_private8ListenerEE"]
            pub fn SBListener_SBListener3(
                this: *mut root::lldb::SBListener,
                listener_sp: *const root::lldb::ListenerSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb10SBListenerD1Ev"]
            pub fn SBListener_SBListener_destructor(this: *mut root::lldb::SBListener);
        }
        impl SBListener {
            #[inline]
            pub unsafe fn AddEvent(&mut self, event: *const root::lldb::SBEvent) {
                SBListener_AddEvent(self, event)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBListener_Clear(self)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBListener_IsValid(self)
            }
            #[inline]
            pub unsafe fn StartListeningForEventClass(
                &mut self,
                debugger: *mut root::lldb::SBDebugger,
                broadcaster_class: *const ::std::os::raw::c_char,
                event_mask: u32,
            ) -> u32 {
                SBListener_StartListeningForEventClass(
                    self,
                    debugger,
                    broadcaster_class,
                    event_mask,
                )
            }
            #[inline]
            pub unsafe fn StopListeningForEventClass(
                &mut self,
                debugger: *mut root::lldb::SBDebugger,
                broadcaster_class: *const ::std::os::raw::c_char,
                event_mask: u32,
            ) -> bool {
                SBListener_StopListeningForEventClass(self, debugger, broadcaster_class, event_mask)
            }
            #[inline]
            pub unsafe fn StartListeningForEvents(
                &mut self,
                broadcaster: *const root::lldb::SBBroadcaster,
                event_mask: u32,
            ) -> u32 {
                SBListener_StartListeningForEvents(self, broadcaster, event_mask)
            }
            #[inline]
            pub unsafe fn StopListeningForEvents(
                &mut self,
                broadcaster: *const root::lldb::SBBroadcaster,
                event_mask: u32,
            ) -> bool {
                SBListener_StopListeningForEvents(self, broadcaster, event_mask)
            }
            #[inline]
            pub unsafe fn WaitForEvent(
                &mut self,
                num_seconds: u32,
                event: *mut root::lldb::SBEvent,
            ) -> bool {
                SBListener_WaitForEvent(self, num_seconds, event)
            }
            #[inline]
            pub unsafe fn WaitForEventForBroadcaster(
                &mut self,
                num_seconds: u32,
                broadcaster: *const root::lldb::SBBroadcaster,
                sb_event: *mut root::lldb::SBEvent,
            ) -> bool {
                SBListener_WaitForEventForBroadcaster(self, num_seconds, broadcaster, sb_event)
            }
            #[inline]
            pub unsafe fn WaitForEventForBroadcasterWithType(
                &mut self,
                num_seconds: u32,
                broadcaster: *const root::lldb::SBBroadcaster,
                event_type_mask: u32,
                sb_event: *mut root::lldb::SBEvent,
            ) -> bool {
                SBListener_WaitForEventForBroadcasterWithType(
                    self,
                    num_seconds,
                    broadcaster,
                    event_type_mask,
                    sb_event,
                )
            }
            #[inline]
            pub unsafe fn PeekAtNextEvent(&mut self, sb_event: *mut root::lldb::SBEvent) -> bool {
                SBListener_PeekAtNextEvent(self, sb_event)
            }
            #[inline]
            pub unsafe fn PeekAtNextEventForBroadcaster(
                &mut self,
                broadcaster: *const root::lldb::SBBroadcaster,
                sb_event: *mut root::lldb::SBEvent,
            ) -> bool {
                SBListener_PeekAtNextEventForBroadcaster(self, broadcaster, sb_event)
            }
            #[inline]
            pub unsafe fn PeekAtNextEventForBroadcasterWithType(
                &mut self,
                broadcaster: *const root::lldb::SBBroadcaster,
                event_type_mask: u32,
                sb_event: *mut root::lldb::SBEvent,
            ) -> bool {
                SBListener_PeekAtNextEventForBroadcasterWithType(
                    self,
                    broadcaster,
                    event_type_mask,
                    sb_event,
                )
            }
            #[inline]
            pub unsafe fn GetNextEvent(&mut self, sb_event: *mut root::lldb::SBEvent) -> bool {
                SBListener_GetNextEvent(self, sb_event)
            }
            #[inline]
            pub unsafe fn GetNextEventForBroadcaster(
                &mut self,
                broadcaster: *const root::lldb::SBBroadcaster,
                sb_event: *mut root::lldb::SBEvent,
            ) -> bool {
                SBListener_GetNextEventForBroadcaster(self, broadcaster, sb_event)
            }
            #[inline]
            pub unsafe fn GetNextEventForBroadcasterWithType(
                &mut self,
                broadcaster: *const root::lldb::SBBroadcaster,
                event_type_mask: u32,
                sb_event: *mut root::lldb::SBEvent,
            ) -> bool {
                SBListener_GetNextEventForBroadcasterWithType(
                    self,
                    broadcaster,
                    event_type_mask,
                    sb_event,
                )
            }
            #[inline]
            pub unsafe fn HandleBroadcastEvent(
                &mut self,
                event: *const root::lldb::SBEvent,
            ) -> bool {
                SBListener_HandleBroadcastEvent(self, event)
            }
            #[inline]
            pub unsafe fn GetSP(&mut self) -> root::lldb::ListenerSP {
                SBListener_GetSP(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBListener_SBListener(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(name: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBListener_SBListener1(__bindgen_tmp.as_mut_ptr(), name);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(rhs: *const root::lldb::SBListener) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBListener_SBListener2(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(listener_sp: *const root::lldb::ListenerSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBListener_SBListener3(__bindgen_tmp.as_mut_ptr(), listener_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBListener_SBListener_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBMemoryRegionInfo {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfo5ClearEv"]
            pub fn SBMemoryRegionInfo_Clear(this: *mut root::lldb::SBMemoryRegionInfo);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfo13GetRegionBaseEv"]
            pub fn SBMemoryRegionInfo_GetRegionBase(
                this: *mut root::lldb::SBMemoryRegionInfo,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfo12GetRegionEndEv"]
            pub fn SBMemoryRegionInfo_GetRegionEnd(
                this: *mut root::lldb::SBMemoryRegionInfo,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfo10IsReadableEv"]
            pub fn SBMemoryRegionInfo_IsReadable(this: *mut root::lldb::SBMemoryRegionInfo)
                -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfo10IsWritableEv"]
            pub fn SBMemoryRegionInfo_IsWritable(this: *mut root::lldb::SBMemoryRegionInfo)
                -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfo12IsExecutableEv"]
            pub fn SBMemoryRegionInfo_IsExecutable(
                this: *mut root::lldb::SBMemoryRegionInfo,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfo8IsMappedEv"]
            pub fn SBMemoryRegionInfo_IsMapped(this: *mut root::lldb::SBMemoryRegionInfo) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfo7GetNameEv"]
            pub fn SBMemoryRegionInfo_GetName(
                this: *mut root::lldb::SBMemoryRegionInfo,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfo22HasDirtyMemoryPageListEv"]
            pub fn SBMemoryRegionInfo_HasDirtyMemoryPageList(
                this: *mut root::lldb::SBMemoryRegionInfo,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfo16GetNumDirtyPagesEv"]
            pub fn SBMemoryRegionInfo_GetNumDirtyPages(
                this: *mut root::lldb::SBMemoryRegionInfo,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfo26GetDirtyPageAddressAtIndexEj"]
            pub fn SBMemoryRegionInfo_GetDirtyPageAddressAtIndex(
                this: *mut root::lldb::SBMemoryRegionInfo,
                idx: u32,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfo11GetPageSizeEv"]
            pub fn SBMemoryRegionInfo_GetPageSize(
                this: *mut root::lldb::SBMemoryRegionInfo,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfo14GetDescriptionERNS_8SBStreamE"]
            pub fn SBMemoryRegionInfo_GetDescription(
                this: *mut root::lldb::SBMemoryRegionInfo,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfoC1Ev"]
            pub fn SBMemoryRegionInfo_SBMemoryRegionInfo(this: *mut root::lldb::SBMemoryRegionInfo);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfoC1ERKS0_"]
            pub fn SBMemoryRegionInfo_SBMemoryRegionInfo1(
                this: *mut root::lldb::SBMemoryRegionInfo,
                rhs: *const root::lldb::SBMemoryRegionInfo,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfoC1EPKcmmjbb"]
            pub fn SBMemoryRegionInfo_SBMemoryRegionInfo2(
                this: *mut root::lldb::SBMemoryRegionInfo,
                name: *const ::std::os::raw::c_char,
                begin: root::lldb::addr_t,
                end: root::lldb::addr_t,
                permissions: u32,
                mapped: bool,
                stack_memory: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBMemoryRegionInfoD1Ev"]
            pub fn SBMemoryRegionInfo_SBMemoryRegionInfo_destructor(
                this: *mut root::lldb::SBMemoryRegionInfo,
            );
        }
        impl SBMemoryRegionInfo {
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBMemoryRegionInfo_Clear(self)
            }
            #[inline]
            pub unsafe fn GetRegionBase(&mut self) -> root::lldb::addr_t {
                SBMemoryRegionInfo_GetRegionBase(self)
            }
            #[inline]
            pub unsafe fn GetRegionEnd(&mut self) -> root::lldb::addr_t {
                SBMemoryRegionInfo_GetRegionEnd(self)
            }
            #[inline]
            pub unsafe fn IsReadable(&mut self) -> bool {
                SBMemoryRegionInfo_IsReadable(self)
            }
            #[inline]
            pub unsafe fn IsWritable(&mut self) -> bool {
                SBMemoryRegionInfo_IsWritable(self)
            }
            #[inline]
            pub unsafe fn IsExecutable(&mut self) -> bool {
                SBMemoryRegionInfo_IsExecutable(self)
            }
            #[inline]
            pub unsafe fn IsMapped(&mut self) -> bool {
                SBMemoryRegionInfo_IsMapped(self)
            }
            #[inline]
            pub unsafe fn GetName(&mut self) -> *const ::std::os::raw::c_char {
                SBMemoryRegionInfo_GetName(self)
            }
            #[inline]
            pub unsafe fn HasDirtyMemoryPageList(&mut self) -> bool {
                SBMemoryRegionInfo_HasDirtyMemoryPageList(self)
            }
            #[inline]
            pub unsafe fn GetNumDirtyPages(&mut self) -> u32 {
                SBMemoryRegionInfo_GetNumDirtyPages(self)
            }
            #[inline]
            pub unsafe fn GetDirtyPageAddressAtIndex(&mut self, idx: u32) -> root::lldb::addr_t {
                SBMemoryRegionInfo_GetDirtyPageAddressAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetPageSize(&mut self) -> ::std::os::raw::c_int {
                SBMemoryRegionInfo_GetPageSize(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBMemoryRegionInfo_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBMemoryRegionInfo_SBMemoryRegionInfo(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBMemoryRegionInfo) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBMemoryRegionInfo_SBMemoryRegionInfo1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                name: *const ::std::os::raw::c_char,
                begin: root::lldb::addr_t,
                end: root::lldb::addr_t,
                permissions: u32,
                mapped: bool,
                stack_memory: bool,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBMemoryRegionInfo_SBMemoryRegionInfo2(
                    __bindgen_tmp.as_mut_ptr(),
                    name,
                    begin,
                    end,
                    permissions,
                    mapped,
                    stack_memory,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBMemoryRegionInfo_SBMemoryRegionInfo_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBMemoryRegionInfoList {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb22SBMemoryRegionInfoList7GetSizeEv"]
            pub fn SBMemoryRegionInfoList_GetSize(
                this: *const root::lldb::SBMemoryRegionInfoList,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBMemoryRegionInfoList32GetMemoryRegionContainingAddressEmRNS_18SBMemoryRegionInfoE"]
            pub fn SBMemoryRegionInfoList_GetMemoryRegionContainingAddress(
                this: *mut root::lldb::SBMemoryRegionInfoList,
                addr: root::lldb::addr_t,
                region_info: *mut root::lldb::SBMemoryRegionInfo,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBMemoryRegionInfoList22GetMemoryRegionAtIndexEjRNS_18SBMemoryRegionInfoE"]
            pub fn SBMemoryRegionInfoList_GetMemoryRegionAtIndex(
                this: *mut root::lldb::SBMemoryRegionInfoList,
                idx: u32,
                region_info: *mut root::lldb::SBMemoryRegionInfo,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBMemoryRegionInfoList6AppendERNS_18SBMemoryRegionInfoE"]
            pub fn SBMemoryRegionInfoList_Append(
                this: *mut root::lldb::SBMemoryRegionInfoList,
                region: *mut root::lldb::SBMemoryRegionInfo,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBMemoryRegionInfoList6AppendERS0_"]
            pub fn SBMemoryRegionInfoList_Append1(
                this: *mut root::lldb::SBMemoryRegionInfoList,
                region_list: *mut root::lldb::SBMemoryRegionInfoList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBMemoryRegionInfoList5ClearEv"]
            pub fn SBMemoryRegionInfoList_Clear(this: *mut root::lldb::SBMemoryRegionInfoList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBMemoryRegionInfoListC1Ev"]
            pub fn SBMemoryRegionInfoList_SBMemoryRegionInfoList(
                this: *mut root::lldb::SBMemoryRegionInfoList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBMemoryRegionInfoListC1ERKS0_"]
            pub fn SBMemoryRegionInfoList_SBMemoryRegionInfoList1(
                this: *mut root::lldb::SBMemoryRegionInfoList,
                rhs: *const root::lldb::SBMemoryRegionInfoList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb22SBMemoryRegionInfoListD1Ev"]
            pub fn SBMemoryRegionInfoList_SBMemoryRegionInfoList_destructor(
                this: *mut root::lldb::SBMemoryRegionInfoList,
            );
        }
        impl SBMemoryRegionInfoList {
            #[inline]
            pub unsafe fn GetSize(&self) -> u32 {
                SBMemoryRegionInfoList_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetMemoryRegionContainingAddress(
                &mut self,
                addr: root::lldb::addr_t,
                region_info: *mut root::lldb::SBMemoryRegionInfo,
            ) -> bool {
                SBMemoryRegionInfoList_GetMemoryRegionContainingAddress(self, addr, region_info)
            }
            #[inline]
            pub unsafe fn GetMemoryRegionAtIndex(
                &mut self,
                idx: u32,
                region_info: *mut root::lldb::SBMemoryRegionInfo,
            ) -> bool {
                SBMemoryRegionInfoList_GetMemoryRegionAtIndex(self, idx, region_info)
            }
            #[inline]
            pub unsafe fn Append(&mut self, region: *mut root::lldb::SBMemoryRegionInfo) {
                SBMemoryRegionInfoList_Append(self, region)
            }
            #[inline]
            pub unsafe fn Append1(&mut self, region_list: *mut root::lldb::SBMemoryRegionInfoList) {
                SBMemoryRegionInfoList_Append1(self, region_list)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBMemoryRegionInfoList_Clear(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBMemoryRegionInfoList_SBMemoryRegionInfoList(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBMemoryRegionInfoList) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBMemoryRegionInfoList_SBMemoryRegionInfoList1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBMemoryRegionInfoList_SBMemoryRegionInfoList_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBModuleSpec {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBModuleSpec7IsValidEv"]
            pub fn SBModuleSpec_IsValid(this: *const root::lldb::SBModuleSpec) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec5ClearEv"]
            pub fn SBModuleSpec_Clear(this: *mut root::lldb::SBModuleSpec);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec11GetFileSpecEv"]
            pub fn SBModuleSpec_GetFileSpec(
                this: *mut root::lldb::SBModuleSpec,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec11SetFileSpecERKNS_10SBFileSpecE"]
            pub fn SBModuleSpec_SetFileSpec(
                this: *mut root::lldb::SBModuleSpec,
                fspec: *const root::lldb::SBFileSpec,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec19GetPlatformFileSpecEv"]
            pub fn SBModuleSpec_GetPlatformFileSpec(
                this: *mut root::lldb::SBModuleSpec,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec19SetPlatformFileSpecERKNS_10SBFileSpecE"]
            pub fn SBModuleSpec_SetPlatformFileSpec(
                this: *mut root::lldb::SBModuleSpec,
                fspec: *const root::lldb::SBFileSpec,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec17GetSymbolFileSpecEv"]
            pub fn SBModuleSpec_GetSymbolFileSpec(
                this: *mut root::lldb::SBModuleSpec,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec17SetSymbolFileSpecERKNS_10SBFileSpecE"]
            pub fn SBModuleSpec_SetSymbolFileSpec(
                this: *mut root::lldb::SBModuleSpec,
                fspec: *const root::lldb::SBFileSpec,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec13GetObjectNameEv"]
            pub fn SBModuleSpec_GetObjectName(
                this: *mut root::lldb::SBModuleSpec,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec13SetObjectNameEPKc"]
            pub fn SBModuleSpec_SetObjectName(
                this: *mut root::lldb::SBModuleSpec,
                name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec9GetTripleEv"]
            pub fn SBModuleSpec_GetTriple(
                this: *mut root::lldb::SBModuleSpec,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec9SetTripleEPKc"]
            pub fn SBModuleSpec_SetTriple(
                this: *mut root::lldb::SBModuleSpec,
                triple: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec12GetUUIDBytesEv"]
            pub fn SBModuleSpec_GetUUIDBytes(this: *mut root::lldb::SBModuleSpec) -> *const u8;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec13GetUUIDLengthEv"]
            pub fn SBModuleSpec_GetUUIDLength(this: *mut root::lldb::SBModuleSpec) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec12SetUUIDBytesEPKhm"]
            pub fn SBModuleSpec_SetUUIDBytes(
                this: *mut root::lldb::SBModuleSpec,
                uuid: *const u8,
                uuid_len: usize,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec15GetObjectOffsetEv"]
            pub fn SBModuleSpec_GetObjectOffset(this: *mut root::lldb::SBModuleSpec) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec15SetObjectOffsetEm"]
            pub fn SBModuleSpec_SetObjectOffset(
                this: *mut root::lldb::SBModuleSpec,
                object_offset: u64,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec13GetObjectSizeEv"]
            pub fn SBModuleSpec_GetObjectSize(this: *mut root::lldb::SBModuleSpec) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec13SetObjectSizeEm"]
            pub fn SBModuleSpec_SetObjectSize(
                this: *mut root::lldb::SBModuleSpec,
                object_size: u64,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpec14GetDescriptionERNS_8SBStreamE"]
            pub fn SBModuleSpec_GetDescription(
                this: *mut root::lldb::SBModuleSpec,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpecC1Ev"]
            pub fn SBModuleSpec_SBModuleSpec(this: *mut root::lldb::SBModuleSpec);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpecC1ERKS0_"]
            pub fn SBModuleSpec_SBModuleSpec1(
                this: *mut root::lldb::SBModuleSpec,
                rhs: *const root::lldb::SBModuleSpec,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBModuleSpecD1Ev"]
            pub fn SBModuleSpec_SBModuleSpec_destructor(this: *mut root::lldb::SBModuleSpec);
        }
        impl SBModuleSpec {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBModuleSpec_IsValid(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBModuleSpec_Clear(self)
            }
            #[inline]
            pub unsafe fn GetFileSpec(&mut self) -> root::lldb::SBFileSpec {
                SBModuleSpec_GetFileSpec(self)
            }
            #[inline]
            pub unsafe fn SetFileSpec(&mut self, fspec: *const root::lldb::SBFileSpec) {
                SBModuleSpec_SetFileSpec(self, fspec)
            }
            #[inline]
            pub unsafe fn GetPlatformFileSpec(&mut self) -> root::lldb::SBFileSpec {
                SBModuleSpec_GetPlatformFileSpec(self)
            }
            #[inline]
            pub unsafe fn SetPlatformFileSpec(&mut self, fspec: *const root::lldb::SBFileSpec) {
                SBModuleSpec_SetPlatformFileSpec(self, fspec)
            }
            #[inline]
            pub unsafe fn GetSymbolFileSpec(&mut self) -> root::lldb::SBFileSpec {
                SBModuleSpec_GetSymbolFileSpec(self)
            }
            #[inline]
            pub unsafe fn SetSymbolFileSpec(&mut self, fspec: *const root::lldb::SBFileSpec) {
                SBModuleSpec_SetSymbolFileSpec(self, fspec)
            }
            #[inline]
            pub unsafe fn GetObjectName(&mut self) -> *const ::std::os::raw::c_char {
                SBModuleSpec_GetObjectName(self)
            }
            #[inline]
            pub unsafe fn SetObjectName(&mut self, name: *const ::std::os::raw::c_char) {
                SBModuleSpec_SetObjectName(self, name)
            }
            #[inline]
            pub unsafe fn GetTriple(&mut self) -> *const ::std::os::raw::c_char {
                SBModuleSpec_GetTriple(self)
            }
            #[inline]
            pub unsafe fn SetTriple(&mut self, triple: *const ::std::os::raw::c_char) {
                SBModuleSpec_SetTriple(self, triple)
            }
            #[inline]
            pub unsafe fn GetUUIDBytes(&mut self) -> *const u8 {
                SBModuleSpec_GetUUIDBytes(self)
            }
            #[inline]
            pub unsafe fn GetUUIDLength(&mut self) -> usize {
                SBModuleSpec_GetUUIDLength(self)
            }
            #[inline]
            pub unsafe fn SetUUIDBytes(&mut self, uuid: *const u8, uuid_len: usize) -> bool {
                SBModuleSpec_SetUUIDBytes(self, uuid, uuid_len)
            }
            #[inline]
            pub unsafe fn GetObjectOffset(&mut self) -> u64 {
                SBModuleSpec_GetObjectOffset(self)
            }
            #[inline]
            pub unsafe fn SetObjectOffset(&mut self, object_offset: u64) {
                SBModuleSpec_SetObjectOffset(self, object_offset)
            }
            #[inline]
            pub unsafe fn GetObjectSize(&mut self) -> u64 {
                SBModuleSpec_GetObjectSize(self)
            }
            #[inline]
            pub unsafe fn SetObjectSize(&mut self, object_size: u64) {
                SBModuleSpec_SetObjectSize(self, object_size)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBModuleSpec_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBModuleSpec_SBModuleSpec(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBModuleSpec) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBModuleSpec_SBModuleSpec1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBModuleSpec_SBModuleSpec_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBModuleSpecList {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBModuleSpecList23GetModuleSpecificationsEPKc"]
            pub fn SBModuleSpecList_GetModuleSpecifications(
                path: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBModuleSpecList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBModuleSpecList6AppendERKNS_12SBModuleSpecE"]
            pub fn SBModuleSpecList_Append(
                this: *mut root::lldb::SBModuleSpecList,
                spec: *const root::lldb::SBModuleSpec,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBModuleSpecList6AppendERKS0_"]
            pub fn SBModuleSpecList_Append1(
                this: *mut root::lldb::SBModuleSpecList,
                spec_list: *const root::lldb::SBModuleSpecList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBModuleSpecList21FindFirstMatchingSpecERKNS_12SBModuleSpecE"]
            pub fn SBModuleSpecList_FindFirstMatchingSpec(
                this: *mut root::lldb::SBModuleSpecList,
                match_spec: *const root::lldb::SBModuleSpec,
            ) -> root::lldb::SBModuleSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBModuleSpecList17FindMatchingSpecsERKNS_12SBModuleSpecE"]
            pub fn SBModuleSpecList_FindMatchingSpecs(
                this: *mut root::lldb::SBModuleSpecList,
                match_spec: *const root::lldb::SBModuleSpec,
            ) -> root::lldb::SBModuleSpecList;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBModuleSpecList7GetSizeEv"]
            pub fn SBModuleSpecList_GetSize(this: *mut root::lldb::SBModuleSpecList) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBModuleSpecList14GetSpecAtIndexEm"]
            pub fn SBModuleSpecList_GetSpecAtIndex(
                this: *mut root::lldb::SBModuleSpecList,
                i: usize,
            ) -> root::lldb::SBModuleSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBModuleSpecList14GetDescriptionERNS_8SBStreamE"]
            pub fn SBModuleSpecList_GetDescription(
                this: *mut root::lldb::SBModuleSpecList,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBModuleSpecListC1Ev"]
            pub fn SBModuleSpecList_SBModuleSpecList(this: *mut root::lldb::SBModuleSpecList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBModuleSpecListC1ERKS0_"]
            pub fn SBModuleSpecList_SBModuleSpecList1(
                this: *mut root::lldb::SBModuleSpecList,
                rhs: *const root::lldb::SBModuleSpecList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBModuleSpecListD1Ev"]
            pub fn SBModuleSpecList_SBModuleSpecList_destructor(
                this: *mut root::lldb::SBModuleSpecList,
            );
        }
        impl SBModuleSpecList {
            #[inline]
            pub unsafe fn GetModuleSpecifications(
                path: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBModuleSpecList {
                SBModuleSpecList_GetModuleSpecifications(path)
            }
            #[inline]
            pub unsafe fn Append(&mut self, spec: *const root::lldb::SBModuleSpec) {
                SBModuleSpecList_Append(self, spec)
            }
            #[inline]
            pub unsafe fn Append1(&mut self, spec_list: *const root::lldb::SBModuleSpecList) {
                SBModuleSpecList_Append1(self, spec_list)
            }
            #[inline]
            pub unsafe fn FindFirstMatchingSpec(
                &mut self,
                match_spec: *const root::lldb::SBModuleSpec,
            ) -> root::lldb::SBModuleSpec {
                SBModuleSpecList_FindFirstMatchingSpec(self, match_spec)
            }
            #[inline]
            pub unsafe fn FindMatchingSpecs(
                &mut self,
                match_spec: *const root::lldb::SBModuleSpec,
            ) -> root::lldb::SBModuleSpecList {
                SBModuleSpecList_FindMatchingSpecs(self, match_spec)
            }
            #[inline]
            pub unsafe fn GetSize(&mut self) -> usize {
                SBModuleSpecList_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetSpecAtIndex(&mut self, i: usize) -> root::lldb::SBModuleSpec {
                SBModuleSpecList_GetSpecAtIndex(self, i)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
            ) -> bool {
                SBModuleSpecList_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBModuleSpecList_SBModuleSpecList(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBModuleSpecList) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBModuleSpecList_SBModuleSpecList1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBModuleSpecList_SBModuleSpecList_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBQueueItem {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb11SBQueueItem7IsValidEv"]
            pub fn SBQueueItem_IsValid(this: *const root::lldb::SBQueueItem) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBQueueItem5ClearEv"]
            pub fn SBQueueItem_Clear(this: *mut root::lldb::SBQueueItem);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb11SBQueueItem7GetKindEv"]
            pub fn SBQueueItem_GetKind(
                this: *const root::lldb::SBQueueItem,
            ) -> root::lldb::QueueItemKind;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBQueueItem7SetKindENS_13QueueItemKindE"]
            pub fn SBQueueItem_SetKind(
                this: *mut root::lldb::SBQueueItem,
                kind: root::lldb::QueueItemKind,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb11SBQueueItem10GetAddressEv"]
            pub fn SBQueueItem_GetAddress(
                this: *const root::lldb::SBQueueItem,
            ) -> root::lldb::SBAddress;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBQueueItem10SetAddressENS_9SBAddressE"]
            pub fn SBQueueItem_SetAddress(
                this: *mut root::lldb::SBQueueItem,
                addr: root::lldb::SBAddress,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBQueueItem26GetExtendedBacktraceThreadEPKc"]
            pub fn SBQueueItem_GetExtendedBacktraceThread(
                this: *mut root::lldb::SBQueueItem,
                type_: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBQueueItem12SetQueueItemERKSt10shared_ptrIN12lldb_private9QueueItemEE"]
            pub fn SBQueueItem_SetQueueItem(
                this: *mut root::lldb::SBQueueItem,
                queue_item_sp: *const root::lldb::QueueItemSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBQueueItemC1Ev"]
            pub fn SBQueueItem_SBQueueItem(this: *mut root::lldb::SBQueueItem);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBQueueItemC1ERKSt10shared_ptrIN12lldb_private9QueueItemEE"]
            pub fn SBQueueItem_SBQueueItem1(
                this: *mut root::lldb::SBQueueItem,
                queue_item_sp: *const root::lldb::QueueItemSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb11SBQueueItemD1Ev"]
            pub fn SBQueueItem_SBQueueItem_destructor(this: *mut root::lldb::SBQueueItem);
        }
        impl SBQueueItem {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBQueueItem_IsValid(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBQueueItem_Clear(self)
            }
            #[inline]
            pub unsafe fn GetKind(&self) -> root::lldb::QueueItemKind {
                SBQueueItem_GetKind(self)
            }
            #[inline]
            pub unsafe fn SetKind(&mut self, kind: root::lldb::QueueItemKind) {
                SBQueueItem_SetKind(self, kind)
            }
            #[inline]
            pub unsafe fn GetAddress(&self) -> root::lldb::SBAddress {
                SBQueueItem_GetAddress(self)
            }
            #[inline]
            pub unsafe fn SetAddress(&mut self, addr: root::lldb::SBAddress) {
                SBQueueItem_SetAddress(self, addr)
            }
            #[inline]
            pub unsafe fn GetExtendedBacktraceThread(
                &mut self,
                type_: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBThread {
                SBQueueItem_GetExtendedBacktraceThread(self, type_)
            }
            #[inline]
            pub unsafe fn SetQueueItem(&mut self, queue_item_sp: *const root::lldb::QueueItemSP) {
                SBQueueItem_SetQueueItem(self, queue_item_sp)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBQueueItem_SBQueueItem(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(queue_item_sp: *const root::lldb::QueueItemSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBQueueItem_SBQueueItem1(__bindgen_tmp.as_mut_ptr(), queue_item_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBQueueItem_SBQueueItem_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(1))]
        #[derive(Debug)]
        pub struct SBReplayOptions {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBReplayOptions9SetVerifyEb"]
            pub fn SBReplayOptions_SetVerify(this: *mut root::lldb::SBReplayOptions, verify: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb15SBReplayOptions9GetVerifyEv"]
            pub fn SBReplayOptions_GetVerify(this: *const root::lldb::SBReplayOptions) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBReplayOptions15SetCheckVersionEb"]
            pub fn SBReplayOptions_SetCheckVersion(
                this: *mut root::lldb::SBReplayOptions,
                check: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb15SBReplayOptions15GetCheckVersionEv"]
            pub fn SBReplayOptions_GetCheckVersion(
                this: *const root::lldb::SBReplayOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBReplayOptionsC1Ev"]
            pub fn SBReplayOptions_SBReplayOptions(this: *mut root::lldb::SBReplayOptions);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBReplayOptionsC1ERKS0_"]
            pub fn SBReplayOptions_SBReplayOptions1(
                this: *mut root::lldb::SBReplayOptions,
                rhs: *const root::lldb::SBReplayOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBReplayOptionsD1Ev"]
            pub fn SBReplayOptions_SBReplayOptions_destructor(
                this: *mut root::lldb::SBReplayOptions,
            );
        }
        impl SBReplayOptions {
            #[inline]
            pub unsafe fn SetVerify(&mut self, verify: bool) {
                SBReplayOptions_SetVerify(self, verify)
            }
            #[inline]
            pub unsafe fn GetVerify(&self) -> bool {
                SBReplayOptions_GetVerify(self)
            }
            #[inline]
            pub unsafe fn SetCheckVersion(&mut self, check: bool) {
                SBReplayOptions_SetCheckVersion(self, check)
            }
            #[inline]
            pub unsafe fn GetCheckVersion(&self) -> bool {
                SBReplayOptions_GetCheckVersion(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBReplayOptions_SBReplayOptions(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBReplayOptions) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBReplayOptions_SBReplayOptions1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBReplayOptions_SBReplayOptions_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(1))]
        #[derive(Debug)]
        pub struct SBReproducer {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBReproducer7CaptureEv"]
            pub fn SBReproducer_Capture() -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBReproducer7CaptureEPKc"]
            pub fn SBReproducer_Capture1(
                path: *const ::std::os::raw::c_char,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBReproducer6ReplayEPKc"]
            pub fn SBReproducer_Replay(
                path: *const ::std::os::raw::c_char,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBReproducer6ReplayEPKcb"]
            pub fn SBReproducer_Replay1(
                path: *const ::std::os::raw::c_char,
                skip_version_check: bool,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBReproducer6ReplayEPKcRKNS_15SBReplayOptionsE"]
            pub fn SBReproducer_Replay2(
                path: *const ::std::os::raw::c_char,
                options: *const root::lldb::SBReplayOptions,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBReproducer13PassiveReplayEPKc"]
            pub fn SBReproducer_PassiveReplay(
                path: *const ::std::os::raw::c_char,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBReproducer8FinalizeEPKc"]
            pub fn SBReproducer_Finalize(
                path: *const ::std::os::raw::c_char,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBReproducer7GetPathEv"]
            pub fn SBReproducer_GetPath() -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBReproducer15SetAutoGenerateEb"]
            pub fn SBReproducer_SetAutoGenerate(b: bool) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBReproducer8GenerateEv"]
            pub fn SBReproducer_Generate() -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBReproducer19SetWorkingDirectoryEPKc"]
            pub fn SBReproducer_SetWorkingDirectory(path: *const ::std::os::raw::c_char);
        }
        impl SBReproducer {
            #[inline]
            pub unsafe fn Capture() -> *const ::std::os::raw::c_char {
                SBReproducer_Capture()
            }
            #[inline]
            pub unsafe fn Capture1(
                path: *const ::std::os::raw::c_char,
            ) -> *const ::std::os::raw::c_char {
                SBReproducer_Capture1(path)
            }
            #[inline]
            pub unsafe fn Replay(
                path: *const ::std::os::raw::c_char,
            ) -> *const ::std::os::raw::c_char {
                SBReproducer_Replay(path)
            }
            #[inline]
            pub unsafe fn Replay1(
                path: *const ::std::os::raw::c_char,
                skip_version_check: bool,
            ) -> *const ::std::os::raw::c_char {
                SBReproducer_Replay1(path, skip_version_check)
            }
            #[inline]
            pub unsafe fn Replay2(
                path: *const ::std::os::raw::c_char,
                options: *const root::lldb::SBReplayOptions,
            ) -> *const ::std::os::raw::c_char {
                SBReproducer_Replay2(path, options)
            }
            #[inline]
            pub unsafe fn PassiveReplay(
                path: *const ::std::os::raw::c_char,
            ) -> *const ::std::os::raw::c_char {
                SBReproducer_PassiveReplay(path)
            }
            #[inline]
            pub unsafe fn Finalize(
                path: *const ::std::os::raw::c_char,
            ) -> *const ::std::os::raw::c_char {
                SBReproducer_Finalize(path)
            }
            #[inline]
            pub unsafe fn GetPath() -> *const ::std::os::raw::c_char {
                SBReproducer_GetPath()
            }
            #[inline]
            pub unsafe fn SetAutoGenerate(b: bool) -> bool {
                SBReproducer_SetAutoGenerate(b)
            }
            #[inline]
            pub unsafe fn Generate() -> bool {
                SBReproducer_Generate()
            }
            #[inline]
            pub unsafe fn SetWorkingDirectory(path: *const ::std::os::raw::c_char) {
                SBReproducer_SetWorkingDirectory(path)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBSaveCoreOptions {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBSaveCoreOptions13SetPluginNameEPKc"]
            pub fn SBSaveCoreOptions_SetPluginName(
                this: *mut root::lldb::SBSaveCoreOptions,
                plugin: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb17SBSaveCoreOptions13GetPluginNameEv"]
            pub fn SBSaveCoreOptions_GetPluginName(
                this: *const root::lldb::SBSaveCoreOptions,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBSaveCoreOptions8SetStyleENS_13SaveCoreStyleE"]
            pub fn SBSaveCoreOptions_SetStyle(
                this: *mut root::lldb::SBSaveCoreOptions,
                style: root::lldb::SaveCoreStyle,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb17SBSaveCoreOptions8GetStyleEv"]
            pub fn SBSaveCoreOptions_GetStyle(
                this: *const root::lldb::SBSaveCoreOptions,
            ) -> root::lldb::SaveCoreStyle;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBSaveCoreOptions13SetOutputFileENS_10SBFileSpecE"]
            pub fn SBSaveCoreOptions_SetOutputFile(
                this: *mut root::lldb::SBSaveCoreOptions,
                output_file: root::lldb::SBFileSpec,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb17SBSaveCoreOptions13GetOutputFileEv"]
            pub fn SBSaveCoreOptions_GetOutputFile(
                this: *const root::lldb::SBSaveCoreOptions,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBSaveCoreOptions5ClearEv"]
            pub fn SBSaveCoreOptions_Clear(this: *mut root::lldb::SBSaveCoreOptions);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb17SBSaveCoreOptions3refEv"]
            pub fn SBSaveCoreOptions_ref(
                this: *const root::lldb::SBSaveCoreOptions,
            ) -> *mut root::lldb_private::SaveCoreOptions;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBSaveCoreOptionsC1Ev"]
            pub fn SBSaveCoreOptions_SBSaveCoreOptions(this: *mut root::lldb::SBSaveCoreOptions);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBSaveCoreOptionsC1ERKS0_"]
            pub fn SBSaveCoreOptions_SBSaveCoreOptions1(
                this: *mut root::lldb::SBSaveCoreOptions,
                rhs: *const root::lldb::SBSaveCoreOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb17SBSaveCoreOptionsD1Ev"]
            pub fn SBSaveCoreOptions_SBSaveCoreOptions_destructor(
                this: *mut root::lldb::SBSaveCoreOptions,
            );
        }
        impl SBSaveCoreOptions {
            #[inline]
            pub unsafe fn SetPluginName(
                &mut self,
                plugin: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError {
                SBSaveCoreOptions_SetPluginName(self, plugin)
            }
            #[inline]
            pub unsafe fn GetPluginName(&self) -> *const ::std::os::raw::c_char {
                SBSaveCoreOptions_GetPluginName(self)
            }
            #[inline]
            pub unsafe fn SetStyle(&mut self, style: root::lldb::SaveCoreStyle) {
                SBSaveCoreOptions_SetStyle(self, style)
            }
            #[inline]
            pub unsafe fn GetStyle(&self) -> root::lldb::SaveCoreStyle {
                SBSaveCoreOptions_GetStyle(self)
            }
            #[inline]
            pub unsafe fn SetOutputFile(&mut self, output_file: root::lldb::SBFileSpec) {
                SBSaveCoreOptions_SetOutputFile(self, output_file)
            }
            #[inline]
            pub unsafe fn GetOutputFile(&self) -> root::lldb::SBFileSpec {
                SBSaveCoreOptions_GetOutputFile(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBSaveCoreOptions_Clear(self)
            }
            #[inline]
            pub unsafe fn ref_(&self) -> *mut root::lldb_private::SaveCoreOptions {
                SBSaveCoreOptions_ref(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBSaveCoreOptions_SBSaveCoreOptions(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBSaveCoreOptions) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBSaveCoreOptions_SBSaveCoreOptions1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBSaveCoreOptions_SBSaveCoreOptions_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBSourceManager {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSourceManager33DisplaySourceLinesWithLineNumbersERKNS_10SBFileSpecEjjjPKcRNS_8SBStreamE"]
            pub fn SBSourceManager_DisplaySourceLinesWithLineNumbers(
                this: *mut root::lldb::SBSourceManager,
                file: *const root::lldb::SBFileSpec,
                line: u32,
                context_before: u32,
                context_after: u32,
                current_line_cstr: *const ::std::os::raw::c_char,
                s: *mut root::lldb::SBStream,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSourceManager42DisplaySourceLinesWithLineNumbersAndColumnERKNS_10SBFileSpecEjjjjPKcRNS_8SBStreamE"]
            pub fn SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn(
                this: *mut root::lldb::SBSourceManager,
                file: *const root::lldb::SBFileSpec,
                line: u32,
                column: u32,
                context_before: u32,
                context_after: u32,
                current_line_cstr: *const ::std::os::raw::c_char,
                s: *mut root::lldb::SBStream,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSourceManagerC1ERKNS_10SBDebuggerE"]
            pub fn SBSourceManager_SBSourceManager(
                this: *mut root::lldb::SBSourceManager,
                debugger: *const root::lldb::SBDebugger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSourceManagerC1ERKNS_8SBTargetE"]
            pub fn SBSourceManager_SBSourceManager1(
                this: *mut root::lldb::SBSourceManager,
                target: *const root::lldb::SBTarget,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSourceManagerC1ERKS0_"]
            pub fn SBSourceManager_SBSourceManager2(
                this: *mut root::lldb::SBSourceManager,
                rhs: *const root::lldb::SBSourceManager,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBSourceManagerD1Ev"]
            pub fn SBSourceManager_SBSourceManager_destructor(
                this: *mut root::lldb::SBSourceManager,
            );
        }
        impl SBSourceManager {
            #[inline]
            pub unsafe fn DisplaySourceLinesWithLineNumbers(
                &mut self,
                file: *const root::lldb::SBFileSpec,
                line: u32,
                context_before: u32,
                context_after: u32,
                current_line_cstr: *const ::std::os::raw::c_char,
                s: *mut root::lldb::SBStream,
            ) -> usize {
                SBSourceManager_DisplaySourceLinesWithLineNumbers(
                    self,
                    file,
                    line,
                    context_before,
                    context_after,
                    current_line_cstr,
                    s,
                )
            }
            #[inline]
            pub unsafe fn DisplaySourceLinesWithLineNumbersAndColumn(
                &mut self,
                file: *const root::lldb::SBFileSpec,
                line: u32,
                column: u32,
                context_before: u32,
                context_after: u32,
                current_line_cstr: *const ::std::os::raw::c_char,
                s: *mut root::lldb::SBStream,
            ) -> usize {
                SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn(
                    self,
                    file,
                    line,
                    column,
                    context_before,
                    context_after,
                    current_line_cstr,
                    s,
                )
            }
            #[inline]
            pub unsafe fn new(debugger: *const root::lldb::SBDebugger) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBSourceManager_SBSourceManager(__bindgen_tmp.as_mut_ptr(), debugger);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(target: *const root::lldb::SBTarget) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBSourceManager_SBSourceManager1(__bindgen_tmp.as_mut_ptr(), target);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(rhs: *const root::lldb::SBSourceManager) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBSourceManager_SBSourceManager2(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBSourceManager_SBSourceManager_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBStream {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBStream7IsValidEv"]
            pub fn SBStream_IsValid(this: *const root::lldb::SBStream) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStream7GetDataEv"]
            pub fn SBStream_GetData(
                this: *mut root::lldb::SBStream,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStream7GetSizeEv"]
            pub fn SBStream_GetSize(this: *mut root::lldb::SBStream) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStream6PrintfEPKcz"]
            pub fn SBStream_Printf(
                this: *mut root::lldb::SBStream,
                format: *const ::std::os::raw::c_char,
                ...
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStream5PrintEPKc"]
            pub fn SBStream_Print(
                this: *mut root::lldb::SBStream,
                str_: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStream14RedirectToFileEPKcb"]
            pub fn SBStream_RedirectToFile(
                this: *mut root::lldb::SBStream,
                path: *const ::std::os::raw::c_char,
                append: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStream14RedirectToFileENS_6SBFileE"]
            pub fn SBStream_RedirectToFile1(
                this: *mut root::lldb::SBStream,
                file: root::lldb::SBFile,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStream14RedirectToFileESt10shared_ptrIN12lldb_private4FileEE"]
            pub fn SBStream_RedirectToFile2(
                this: *mut root::lldb::SBStream,
                file: root::lldb::FileSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStream20RedirectToFileHandleEP8_IO_FILEb"]
            pub fn SBStream_RedirectToFileHandle(
                this: *mut root::lldb::SBStream,
                fh: *mut root::FILE,
                transfer_fh_ownership: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStream24RedirectToFileDescriptorEib"]
            pub fn SBStream_RedirectToFileDescriptor(
                this: *mut root::lldb::SBStream,
                fd: ::std::os::raw::c_int,
                transfer_fh_ownership: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStream5ClearEv"]
            pub fn SBStream_Clear(this: *mut root::lldb::SBStream);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStream3getEv"]
            pub fn SBStream_get(this: *mut root::lldb::SBStream)
                -> *mut root::lldb_private::Stream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStream3refEv"]
            pub fn SBStream_ref(this: *mut root::lldb::SBStream)
                -> *mut root::lldb_private::Stream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStreamC1Ev"]
            pub fn SBStream_SBStream(this: *mut root::lldb::SBStream);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStreamC1EOS0_"]
            pub fn SBStream_SBStream1(
                this: *mut root::lldb::SBStream,
                rhs: *mut root::lldb::SBStream,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBStreamD1Ev"]
            pub fn SBStream_SBStream_destructor(this: *mut root::lldb::SBStream);
        }
        impl SBStream {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBStream_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetData(&mut self) -> *const ::std::os::raw::c_char {
                SBStream_GetData(self)
            }
            #[inline]
            pub unsafe fn GetSize(&mut self) -> usize {
                SBStream_GetSize(self)
            }
            #[inline]
            pub unsafe fn Print(&mut self, str_: *const ::std::os::raw::c_char) {
                SBStream_Print(self, str_)
            }
            #[inline]
            pub unsafe fn RedirectToFile(
                &mut self,
                path: *const ::std::os::raw::c_char,
                append: bool,
            ) {
                SBStream_RedirectToFile(self, path, append)
            }
            #[inline]
            pub unsafe fn RedirectToFile1(&mut self, file: root::lldb::SBFile) {
                SBStream_RedirectToFile1(self, file)
            }
            #[inline]
            pub unsafe fn RedirectToFile2(&mut self, file: root::lldb::FileSP) {
                SBStream_RedirectToFile2(self, file)
            }
            #[inline]
            pub unsafe fn RedirectToFileHandle(
                &mut self,
                fh: *mut root::FILE,
                transfer_fh_ownership: bool,
            ) {
                SBStream_RedirectToFileHandle(self, fh, transfer_fh_ownership)
            }
            #[inline]
            pub unsafe fn RedirectToFileDescriptor(
                &mut self,
                fd: ::std::os::raw::c_int,
                transfer_fh_ownership: bool,
            ) {
                SBStream_RedirectToFileDescriptor(self, fd, transfer_fh_ownership)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBStream_Clear(self)
            }
            #[inline]
            pub unsafe fn get(&mut self) -> *mut root::lldb_private::Stream {
                SBStream_get(self)
            }
            #[inline]
            pub unsafe fn ref_(&mut self) -> *mut root::lldb_private::Stream {
                SBStream_ref(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBStream_SBStream(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *mut root::lldb::SBStream) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBStream_SBStream1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBStream_SBStream_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBStringList {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBStringList7IsValidEv"]
            pub fn SBStringList_IsValid(this: *const root::lldb::SBStringList) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBStringList12AppendStringEPKc"]
            pub fn SBStringList_AppendString(
                this: *mut root::lldb::SBStringList,
                str_: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBStringList10AppendListEPPKci"]
            pub fn SBStringList_AppendList(
                this: *mut root::lldb::SBStringList,
                strv: *mut *const ::std::os::raw::c_char,
                strc: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBStringList10AppendListERKS0_"]
            pub fn SBStringList_AppendList1(
                this: *mut root::lldb::SBStringList,
                strings: *const root::lldb::SBStringList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBStringList7GetSizeEv"]
            pub fn SBStringList_GetSize(this: *const root::lldb::SBStringList) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBStringList16GetStringAtIndexEm"]
            pub fn SBStringList_GetStringAtIndex(
                this: *mut root::lldb::SBStringList,
                idx: usize,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBStringList16GetStringAtIndexEm"]
            pub fn SBStringList_GetStringAtIndex1(
                this: *const root::lldb::SBStringList,
                idx: usize,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBStringList5ClearEv"]
            pub fn SBStringList_Clear(this: *mut root::lldb::SBStringList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBStringList10AppendListERKN12lldb_private10StringListE"]
            pub fn SBStringList_AppendList2(
                this: *mut root::lldb::SBStringList,
                strings: *const root::lldb_private::StringList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBStringListC1Ev"]
            pub fn SBStringList_SBStringList(this: *mut root::lldb::SBStringList);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBStringListC1ERKS0_"]
            pub fn SBStringList_SBStringList1(
                this: *mut root::lldb::SBStringList,
                rhs: *const root::lldb::SBStringList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBStringListC1EPKN12lldb_private10StringListE"]
            pub fn SBStringList_SBStringList2(
                this: *mut root::lldb::SBStringList,
                lldb_strings: *const root::lldb_private::StringList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBStringListD1Ev"]
            pub fn SBStringList_SBStringList_destructor(this: *mut root::lldb::SBStringList);
        }
        impl SBStringList {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBStringList_IsValid(self)
            }
            #[inline]
            pub unsafe fn AppendString(&mut self, str_: *const ::std::os::raw::c_char) {
                SBStringList_AppendString(self, str_)
            }
            #[inline]
            pub unsafe fn AppendList(
                &mut self,
                strv: *mut *const ::std::os::raw::c_char,
                strc: ::std::os::raw::c_int,
            ) {
                SBStringList_AppendList(self, strv, strc)
            }
            #[inline]
            pub unsafe fn AppendList1(&mut self, strings: *const root::lldb::SBStringList) {
                SBStringList_AppendList1(self, strings)
            }
            #[inline]
            pub unsafe fn GetSize(&self) -> u32 {
                SBStringList_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetStringAtIndex(&mut self, idx: usize) -> *const ::std::os::raw::c_char {
                SBStringList_GetStringAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetStringAtIndex1(&self, idx: usize) -> *const ::std::os::raw::c_char {
                SBStringList_GetStringAtIndex1(self, idx)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBStringList_Clear(self)
            }
            #[inline]
            pub unsafe fn AppendList2(&mut self, strings: *const root::lldb_private::StringList) {
                SBStringList_AppendList2(self, strings)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBStringList_SBStringList(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBStringList) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBStringList_SBStringList1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(lldb_strings: *const root::lldb_private::StringList) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBStringList_SBStringList2(__bindgen_tmp.as_mut_ptr(), lldb_strings);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBStringList_SBStringList_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBThread {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        pub const SBThread_eBroadcastBitStackChanged: root::lldb::SBThread__bindgen_ty_1 = 1;
        pub const SBThread_eBroadcastBitThreadSuspended: root::lldb::SBThread__bindgen_ty_1 = 2;
        pub const SBThread_eBroadcastBitThreadResumed: root::lldb::SBThread__bindgen_ty_1 = 4;
        pub const SBThread_eBroadcastBitSelectedFrameChanged: root::lldb::SBThread__bindgen_ty_1 =
            8;
        pub const SBThread_eBroadcastBitThreadSelected: root::lldb::SBThread__bindgen_ty_1 = 16;
        pub type SBThread__bindgen_ty_1 = ::std::os::raw::c_uint;
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread23GetBroadcasterClassNameEv"]
            pub fn SBThread_GetBroadcasterClassName() -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBThread8GetQueueEv"]
            pub fn SBThread_GetQueue(this: *const root::lldb::SBThread) -> root::lldb::SBQueue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBThread7IsValidEv"]
            pub fn SBThread_IsValid(this: *const root::lldb::SBThread) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread5ClearEv"]
            pub fn SBThread_Clear(this: *mut root::lldb::SBThread);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread13GetStopReasonEv"]
            pub fn SBThread_GetStopReason(
                this: *mut root::lldb::SBThread,
            ) -> root::lldb::StopReason;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread22GetStopReasonDataCountEv"]
            pub fn SBThread_GetStopReasonDataCount(this: *mut root::lldb::SBThread) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread24GetStopReasonDataAtIndexEj"]
            pub fn SBThread_GetStopReasonDataAtIndex(
                this: *mut root::lldb::SBThread,
                idx: u32,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread31GetStopReasonExtendedInfoAsJSONERNS_8SBStreamE"]
            pub fn SBThread_GetStopReasonExtendedInfoAsJSON(
                this: *mut root::lldb::SBThread,
                stream: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread31GetStopReasonExtendedBacktracesENS_26InstrumentationRuntimeTypeE"]
            pub fn SBThread_GetStopReasonExtendedBacktraces(
                this: *mut root::lldb::SBThread,
                type_: root::lldb::InstrumentationRuntimeType,
            ) -> root::lldb::SBThreadCollection;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread18GetStopDescriptionEPcm"]
            pub fn SBThread_GetStopDescription(
                this: *mut root::lldb::SBThread,
                dst_or_null: *mut ::std::os::raw::c_char,
                dst_len: usize,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread18GetStopReturnValueEv"]
            pub fn SBThread_GetStopReturnValue(
                this: *mut root::lldb::SBThread,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBThread11GetThreadIDEv"]
            pub fn SBThread_GetThreadID(this: *const root::lldb::SBThread) -> root::lldb::tid_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBThread10GetIndexIDEv"]
            pub fn SBThread_GetIndexID(this: *const root::lldb::SBThread) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBThread7GetNameEv"]
            pub fn SBThread_GetName(
                this: *const root::lldb::SBThread,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBThread12GetQueueNameEv"]
            pub fn SBThread_GetQueueName(
                this: *const root::lldb::SBThread,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBThread10GetQueueIDEv"]
            pub fn SBThread_GetQueueID(this: *const root::lldb::SBThread)
                -> root::lldb::queue_id_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread25GetInfoItemByPathAsStringEPKcRNS_8SBStreamE"]
            pub fn SBThread_GetInfoItemByPathAsString(
                this: *mut root::lldb::SBThread,
                path: *const ::std::os::raw::c_char,
                strm: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread8StepOverENS_7RunModeE"]
            pub fn SBThread_StepOver(
                this: *mut root::lldb::SBThread,
                stop_other_threads: root::lldb::RunMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread8StepOverENS_7RunModeERNS_7SBErrorE"]
            pub fn SBThread_StepOver1(
                this: *mut root::lldb::SBThread,
                stop_other_threads: root::lldb::RunMode,
                error: *mut root::lldb::SBError,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread8StepIntoENS_7RunModeE"]
            pub fn SBThread_StepInto(
                this: *mut root::lldb::SBThread,
                stop_other_threads: root::lldb::RunMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread8StepIntoEPKcNS_7RunModeE"]
            pub fn SBThread_StepInto1(
                this: *mut root::lldb::SBThread,
                target_name: *const ::std::os::raw::c_char,
                stop_other_threads: root::lldb::RunMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread8StepIntoEPKcjRNS_7SBErrorENS_7RunModeE"]
            pub fn SBThread_StepInto2(
                this: *mut root::lldb::SBThread,
                target_name: *const ::std::os::raw::c_char,
                end_line: u32,
                error: *mut root::lldb::SBError,
                stop_other_threads: root::lldb::RunMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread7StepOutEv"]
            pub fn SBThread_StepOut(this: *mut root::lldb::SBThread);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread7StepOutERNS_7SBErrorE"]
            pub fn SBThread_StepOut1(
                this: *mut root::lldb::SBThread,
                error: *mut root::lldb::SBError,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread14StepOutOfFrameERNS_7SBFrameE"]
            pub fn SBThread_StepOutOfFrame(
                this: *mut root::lldb::SBThread,
                frame: *mut root::lldb::SBFrame,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread14StepOutOfFrameERNS_7SBFrameERNS_7SBErrorE"]
            pub fn SBThread_StepOutOfFrame1(
                this: *mut root::lldb::SBThread,
                frame: *mut root::lldb::SBFrame,
                error: *mut root::lldb::SBError,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread15StepInstructionEb"]
            pub fn SBThread_StepInstruction(this: *mut root::lldb::SBThread, step_over: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread15StepInstructionEbRNS_7SBErrorE"]
            pub fn SBThread_StepInstruction1(
                this: *mut root::lldb::SBThread,
                step_over: bool,
                error: *mut root::lldb::SBError,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread13StepOverUntilERNS_7SBFrameERNS_10SBFileSpecEj"]
            pub fn SBThread_StepOverUntil(
                this: *mut root::lldb::SBThread,
                frame: *mut root::lldb::SBFrame,
                file_spec: *mut root::lldb::SBFileSpec,
                line: u32,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread27StepUsingScriptedThreadPlanEPKc"]
            pub fn SBThread_StepUsingScriptedThreadPlan(
                this: *mut root::lldb::SBThread,
                script_class_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread27StepUsingScriptedThreadPlanEPKcb"]
            pub fn SBThread_StepUsingScriptedThreadPlan1(
                this: *mut root::lldb::SBThread,
                script_class_name: *const ::std::os::raw::c_char,
                resume_immediately: bool,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread27StepUsingScriptedThreadPlanEPKcRNS_16SBStructuredDataEb"]
            pub fn SBThread_StepUsingScriptedThreadPlan2(
                this: *mut root::lldb::SBThread,
                script_class_name: *const ::std::os::raw::c_char,
                args_data: *mut root::lldb::SBStructuredData,
                resume_immediately: bool,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread10JumpToLineERNS_10SBFileSpecEj"]
            pub fn SBThread_JumpToLine(
                this: *mut root::lldb::SBThread,
                file_spec: *mut root::lldb::SBFileSpec,
                line: u32,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread12RunToAddressEm"]
            pub fn SBThread_RunToAddress(this: *mut root::lldb::SBThread, addr: root::lldb::addr_t);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread12RunToAddressEmRNS_7SBErrorE"]
            pub fn SBThread_RunToAddress1(
                this: *mut root::lldb::SBThread,
                addr: root::lldb::addr_t,
                error: *mut root::lldb::SBError,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread15ReturnFromFrameERNS_7SBFrameERNS_7SBValueE"]
            pub fn SBThread_ReturnFromFrame(
                this: *mut root::lldb::SBThread,
                frame: *mut root::lldb::SBFrame,
                return_value: *mut root::lldb::SBValue,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread25UnwindInnermostExpressionEv"]
            pub fn SBThread_UnwindInnermostExpression(
                this: *mut root::lldb::SBThread,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread7SuspendEv"]
            pub fn SBThread_Suspend(this: *mut root::lldb::SBThread) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread7SuspendERNS_7SBErrorE"]
            pub fn SBThread_Suspend1(
                this: *mut root::lldb::SBThread,
                error: *mut root::lldb::SBError,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread6ResumeEv"]
            pub fn SBThread_Resume(this: *mut root::lldb::SBThread) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread6ResumeERNS_7SBErrorE"]
            pub fn SBThread_Resume1(
                this: *mut root::lldb::SBThread,
                error: *mut root::lldb::SBError,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread11IsSuspendedEv"]
            pub fn SBThread_IsSuspended(this: *mut root::lldb::SBThread) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread9IsStoppedEv"]
            pub fn SBThread_IsStopped(this: *mut root::lldb::SBThread) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread12GetNumFramesEv"]
            pub fn SBThread_GetNumFrames(this: *mut root::lldb::SBThread) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread15GetFrameAtIndexEj"]
            pub fn SBThread_GetFrameAtIndex(
                this: *mut root::lldb::SBThread,
                idx: u32,
            ) -> root::lldb::SBFrame;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread16GetSelectedFrameEv"]
            pub fn SBThread_GetSelectedFrame(
                this: *mut root::lldb::SBThread,
            ) -> root::lldb::SBFrame;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread16SetSelectedFrameEj"]
            pub fn SBThread_SetSelectedFrame(
                this: *mut root::lldb::SBThread,
                frame_idx: u32,
            ) -> root::lldb::SBFrame;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread18EventIsThreadEventERKNS_7SBEventE"]
            pub fn SBThread_EventIsThreadEvent(event: *const root::lldb::SBEvent) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread22GetStackFrameFromEventERKNS_7SBEventE"]
            pub fn SBThread_GetStackFrameFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBFrame;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread18GetThreadFromEventERKNS_7SBEventE"]
            pub fn SBThread_GetThreadFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread10GetProcessEv"]
            pub fn SBThread_GetProcess(this: *mut root::lldb::SBThread) -> root::lldb::SBProcess;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBThread14GetDescriptionERNS_8SBStreamE"]
            pub fn SBThread_GetDescription(
                this: *const root::lldb::SBThread,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBThread14GetDescriptionERNS_8SBStreamEb"]
            pub fn SBThread_GetDescription1(
                this: *const root::lldb::SBThread,
                description: *mut root::lldb::SBStream,
                stop_format: bool,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread24GetDescriptionWithFormatERKNS_8SBFormatERNS_8SBStreamE"]
            pub fn SBThread_GetDescriptionWithFormat(
                this: *mut root::lldb::SBThread,
                format: *const root::lldb::SBFormat,
                output: *mut root::lldb::SBStream,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb8SBThread9GetStatusERNS_8SBStreamE"]
            pub fn SBThread_GetStatus(
                this: *const root::lldb::SBThread,
                status: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread26GetExtendedBacktraceThreadEPKc"]
            pub fn SBThread_GetExtendedBacktraceThread(
                this: *mut root::lldb::SBThread,
                type_: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread38GetExtendedBacktraceOriginatingIndexIDEv"]
            pub fn SBThread_GetExtendedBacktraceOriginatingIndexID(
                this: *mut root::lldb::SBThread,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread19GetCurrentExceptionEv"]
            pub fn SBThread_GetCurrentException(
                this: *mut root::lldb::SBThread,
            ) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread28GetCurrentExceptionBacktraceEv"]
            pub fn SBThread_GetCurrentExceptionBacktrace(
                this: *mut root::lldb::SBThread,
            ) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread19SafeToCallFunctionsEv"]
            pub fn SBThread_SafeToCallFunctions(this: *mut root::lldb::SBThread) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThread10GetSiginfoEv"]
            pub fn SBThread_GetSiginfo(this: *mut root::lldb::SBThread) -> root::lldb::SBValue;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThreadC1Ev"]
            pub fn SBThread_SBThread(this: *mut root::lldb::SBThread);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThreadC1ERKS0_"]
            pub fn SBThread_SBThread1(
                this: *mut root::lldb::SBThread,
                thread: *const root::lldb::SBThread,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb8SBThreadD1Ev"]
            pub fn SBThread_SBThread_destructor(this: *mut root::lldb::SBThread);
        }
        impl SBThread {
            #[inline]
            pub unsafe fn GetBroadcasterClassName() -> *const ::std::os::raw::c_char {
                SBThread_GetBroadcasterClassName()
            }
            #[inline]
            pub unsafe fn GetQueue(&self) -> root::lldb::SBQueue {
                SBThread_GetQueue(self)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBThread_IsValid(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBThread_Clear(self)
            }
            #[inline]
            pub unsafe fn GetStopReason(&mut self) -> root::lldb::StopReason {
                SBThread_GetStopReason(self)
            }
            #[inline]
            pub unsafe fn GetStopReasonDataCount(&mut self) -> usize {
                SBThread_GetStopReasonDataCount(self)
            }
            #[inline]
            pub unsafe fn GetStopReasonDataAtIndex(&mut self, idx: u32) -> u64 {
                SBThread_GetStopReasonDataAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetStopReasonExtendedInfoAsJSON(
                &mut self,
                stream: *mut root::lldb::SBStream,
            ) -> bool {
                SBThread_GetStopReasonExtendedInfoAsJSON(self, stream)
            }
            #[inline]
            pub unsafe fn GetStopReasonExtendedBacktraces(
                &mut self,
                type_: root::lldb::InstrumentationRuntimeType,
            ) -> root::lldb::SBThreadCollection {
                SBThread_GetStopReasonExtendedBacktraces(self, type_)
            }
            #[inline]
            pub unsafe fn GetStopDescription(
                &mut self,
                dst_or_null: *mut ::std::os::raw::c_char,
                dst_len: usize,
            ) -> usize {
                SBThread_GetStopDescription(self, dst_or_null, dst_len)
            }
            #[inline]
            pub unsafe fn GetStopReturnValue(&mut self) -> root::lldb::SBValue {
                SBThread_GetStopReturnValue(self)
            }
            #[inline]
            pub unsafe fn GetThreadID(&self) -> root::lldb::tid_t {
                SBThread_GetThreadID(self)
            }
            #[inline]
            pub unsafe fn GetIndexID(&self) -> u32 {
                SBThread_GetIndexID(self)
            }
            #[inline]
            pub unsafe fn GetName(&self) -> *const ::std::os::raw::c_char {
                SBThread_GetName(self)
            }
            #[inline]
            pub unsafe fn GetQueueName(&self) -> *const ::std::os::raw::c_char {
                SBThread_GetQueueName(self)
            }
            #[inline]
            pub unsafe fn GetQueueID(&self) -> root::lldb::queue_id_t {
                SBThread_GetQueueID(self)
            }
            #[inline]
            pub unsafe fn GetInfoItemByPathAsString(
                &mut self,
                path: *const ::std::os::raw::c_char,
                strm: *mut root::lldb::SBStream,
            ) -> bool {
                SBThread_GetInfoItemByPathAsString(self, path, strm)
            }
            #[inline]
            pub unsafe fn StepOver(&mut self, stop_other_threads: root::lldb::RunMode) {
                SBThread_StepOver(self, stop_other_threads)
            }
            #[inline]
            pub unsafe fn StepOver1(
                &mut self,
                stop_other_threads: root::lldb::RunMode,
                error: *mut root::lldb::SBError,
            ) {
                SBThread_StepOver1(self, stop_other_threads, error)
            }
            #[inline]
            pub unsafe fn StepInto(&mut self, stop_other_threads: root::lldb::RunMode) {
                SBThread_StepInto(self, stop_other_threads)
            }
            #[inline]
            pub unsafe fn StepInto1(
                &mut self,
                target_name: *const ::std::os::raw::c_char,
                stop_other_threads: root::lldb::RunMode,
            ) {
                SBThread_StepInto1(self, target_name, stop_other_threads)
            }
            #[inline]
            pub unsafe fn StepInto2(
                &mut self,
                target_name: *const ::std::os::raw::c_char,
                end_line: u32,
                error: *mut root::lldb::SBError,
                stop_other_threads: root::lldb::RunMode,
            ) {
                SBThread_StepInto2(self, target_name, end_line, error, stop_other_threads)
            }
            #[inline]
            pub unsafe fn StepOut(&mut self) {
                SBThread_StepOut(self)
            }
            #[inline]
            pub unsafe fn StepOut1(&mut self, error: *mut root::lldb::SBError) {
                SBThread_StepOut1(self, error)
            }
            #[inline]
            pub unsafe fn StepOutOfFrame(&mut self, frame: *mut root::lldb::SBFrame) {
                SBThread_StepOutOfFrame(self, frame)
            }
            #[inline]
            pub unsafe fn StepOutOfFrame1(
                &mut self,
                frame: *mut root::lldb::SBFrame,
                error: *mut root::lldb::SBError,
            ) {
                SBThread_StepOutOfFrame1(self, frame, error)
            }
            #[inline]
            pub unsafe fn StepInstruction(&mut self, step_over: bool) {
                SBThread_StepInstruction(self, step_over)
            }
            #[inline]
            pub unsafe fn StepInstruction1(
                &mut self,
                step_over: bool,
                error: *mut root::lldb::SBError,
            ) {
                SBThread_StepInstruction1(self, step_over, error)
            }
            #[inline]
            pub unsafe fn StepOverUntil(
                &mut self,
                frame: *mut root::lldb::SBFrame,
                file_spec: *mut root::lldb::SBFileSpec,
                line: u32,
            ) -> root::lldb::SBError {
                SBThread_StepOverUntil(self, frame, file_spec, line)
            }
            #[inline]
            pub unsafe fn StepUsingScriptedThreadPlan(
                &mut self,
                script_class_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBError {
                SBThread_StepUsingScriptedThreadPlan(self, script_class_name)
            }
            #[inline]
            pub unsafe fn StepUsingScriptedThreadPlan1(
                &mut self,
                script_class_name: *const ::std::os::raw::c_char,
                resume_immediately: bool,
            ) -> root::lldb::SBError {
                SBThread_StepUsingScriptedThreadPlan1(self, script_class_name, resume_immediately)
            }
            #[inline]
            pub unsafe fn StepUsingScriptedThreadPlan2(
                &mut self,
                script_class_name: *const ::std::os::raw::c_char,
                args_data: *mut root::lldb::SBStructuredData,
                resume_immediately: bool,
            ) -> root::lldb::SBError {
                SBThread_StepUsingScriptedThreadPlan2(
                    self,
                    script_class_name,
                    args_data,
                    resume_immediately,
                )
            }
            #[inline]
            pub unsafe fn JumpToLine(
                &mut self,
                file_spec: *mut root::lldb::SBFileSpec,
                line: u32,
            ) -> root::lldb::SBError {
                SBThread_JumpToLine(self, file_spec, line)
            }
            #[inline]
            pub unsafe fn RunToAddress(&mut self, addr: root::lldb::addr_t) {
                SBThread_RunToAddress(self, addr)
            }
            #[inline]
            pub unsafe fn RunToAddress1(
                &mut self,
                addr: root::lldb::addr_t,
                error: *mut root::lldb::SBError,
            ) {
                SBThread_RunToAddress1(self, addr, error)
            }
            #[inline]
            pub unsafe fn ReturnFromFrame(
                &mut self,
                frame: *mut root::lldb::SBFrame,
                return_value: *mut root::lldb::SBValue,
            ) -> root::lldb::SBError {
                SBThread_ReturnFromFrame(self, frame, return_value)
            }
            #[inline]
            pub unsafe fn UnwindInnermostExpression(&mut self) -> root::lldb::SBError {
                SBThread_UnwindInnermostExpression(self)
            }
            #[inline]
            pub unsafe fn Suspend(&mut self) -> bool {
                SBThread_Suspend(self)
            }
            #[inline]
            pub unsafe fn Suspend1(&mut self, error: *mut root::lldb::SBError) -> bool {
                SBThread_Suspend1(self, error)
            }
            #[inline]
            pub unsafe fn Resume(&mut self) -> bool {
                SBThread_Resume(self)
            }
            #[inline]
            pub unsafe fn Resume1(&mut self, error: *mut root::lldb::SBError) -> bool {
                SBThread_Resume1(self, error)
            }
            #[inline]
            pub unsafe fn IsSuspended(&mut self) -> bool {
                SBThread_IsSuspended(self)
            }
            #[inline]
            pub unsafe fn IsStopped(&mut self) -> bool {
                SBThread_IsStopped(self)
            }
            #[inline]
            pub unsafe fn GetNumFrames(&mut self) -> u32 {
                SBThread_GetNumFrames(self)
            }
            #[inline]
            pub unsafe fn GetFrameAtIndex(&mut self, idx: u32) -> root::lldb::SBFrame {
                SBThread_GetFrameAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetSelectedFrame(&mut self) -> root::lldb::SBFrame {
                SBThread_GetSelectedFrame(self)
            }
            #[inline]
            pub unsafe fn SetSelectedFrame(&mut self, frame_idx: u32) -> root::lldb::SBFrame {
                SBThread_SetSelectedFrame(self, frame_idx)
            }
            #[inline]
            pub unsafe fn EventIsThreadEvent(event: *const root::lldb::SBEvent) -> bool {
                SBThread_EventIsThreadEvent(event)
            }
            #[inline]
            pub unsafe fn GetStackFrameFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBFrame {
                SBThread_GetStackFrameFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetThreadFromEvent(
                event: *const root::lldb::SBEvent,
            ) -> root::lldb::SBThread {
                SBThread_GetThreadFromEvent(event)
            }
            #[inline]
            pub unsafe fn GetProcess(&mut self) -> root::lldb::SBProcess {
                SBThread_GetProcess(self)
            }
            #[inline]
            pub unsafe fn GetDescription(&self, description: *mut root::lldb::SBStream) -> bool {
                SBThread_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn GetDescription1(
                &self,
                description: *mut root::lldb::SBStream,
                stop_format: bool,
            ) -> bool {
                SBThread_GetDescription1(self, description, stop_format)
            }
            #[inline]
            pub unsafe fn GetDescriptionWithFormat(
                &mut self,
                format: *const root::lldb::SBFormat,
                output: *mut root::lldb::SBStream,
            ) -> root::lldb::SBError {
                SBThread_GetDescriptionWithFormat(self, format, output)
            }
            #[inline]
            pub unsafe fn GetStatus(&self, status: *mut root::lldb::SBStream) -> bool {
                SBThread_GetStatus(self, status)
            }
            #[inline]
            pub unsafe fn GetExtendedBacktraceThread(
                &mut self,
                type_: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBThread {
                SBThread_GetExtendedBacktraceThread(self, type_)
            }
            #[inline]
            pub unsafe fn GetExtendedBacktraceOriginatingIndexID(&mut self) -> u32 {
                SBThread_GetExtendedBacktraceOriginatingIndexID(self)
            }
            #[inline]
            pub unsafe fn GetCurrentException(&mut self) -> root::lldb::SBValue {
                SBThread_GetCurrentException(self)
            }
            #[inline]
            pub unsafe fn GetCurrentExceptionBacktrace(&mut self) -> root::lldb::SBThread {
                SBThread_GetCurrentExceptionBacktrace(self)
            }
            #[inline]
            pub unsafe fn SafeToCallFunctions(&mut self) -> bool {
                SBThread_SafeToCallFunctions(self)
            }
            #[inline]
            pub unsafe fn GetSiginfo(&mut self) -> root::lldb::SBValue {
                SBThread_GetSiginfo(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBThread_SBThread(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(thread: *const root::lldb::SBThread) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBThread_SBThread1(__bindgen_tmp.as_mut_ptr(), thread);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBThread_SBThread_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBThreadCollection {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBThreadCollection7IsValidEv"]
            pub fn SBThreadCollection_IsValid(this: *const root::lldb::SBThreadCollection) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBThreadCollection7GetSizeEv"]
            pub fn SBThreadCollection_GetSize(this: *mut root::lldb::SBThreadCollection) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBThreadCollection16GetThreadAtIndexEm"]
            pub fn SBThreadCollection_GetThreadAtIndex(
                this: *mut root::lldb::SBThreadCollection,
                idx: usize,
            ) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBThreadCollection3getEv"]
            pub fn SBThreadCollection_get(
                this: *const root::lldb::SBThreadCollection,
            ) -> *mut root::lldb_private::ThreadCollection;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBThreadCollection9SetOpaqueERKSt10shared_ptrIN12lldb_private16ThreadCollectionEE"]
            pub fn SBThreadCollection_SetOpaque(
                this: *mut root::lldb::SBThreadCollection,
                threads: *const root::lldb::ThreadCollectionSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBThreadCollectionC1Ev"]
            pub fn SBThreadCollection_SBThreadCollection(this: *mut root::lldb::SBThreadCollection);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBThreadCollectionC1ERKS0_"]
            pub fn SBThreadCollection_SBThreadCollection1(
                this: *mut root::lldb::SBThreadCollection,
                rhs: *const root::lldb::SBThreadCollection,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBThreadCollectionC1ERKSt10shared_ptrIN12lldb_private16ThreadCollectionEE"]
            pub fn SBThreadCollection_SBThreadCollection2(
                this: *mut root::lldb::SBThreadCollection,
                threads: *const root::lldb::ThreadCollectionSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBThreadCollectionD1Ev"]
            pub fn SBThreadCollection_SBThreadCollection_destructor(
                this: *mut root::lldb::SBThreadCollection,
            );
        }
        impl SBThreadCollection {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBThreadCollection_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetSize(&mut self) -> usize {
                SBThreadCollection_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetThreadAtIndex(&mut self, idx: usize) -> root::lldb::SBThread {
                SBThreadCollection_GetThreadAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn get(&self) -> *mut root::lldb_private::ThreadCollection {
                SBThreadCollection_get(self)
            }
            #[inline]
            pub unsafe fn SetOpaque(&mut self, threads: *const root::lldb::ThreadCollectionSP) {
                SBThreadCollection_SetOpaque(self, threads)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBThreadCollection_SBThreadCollection(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBThreadCollection) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBThreadCollection_SBThreadCollection1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(threads: *const root::lldb::ThreadCollectionSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBThreadCollection_SBThreadCollection2(__bindgen_tmp.as_mut_ptr(), threads);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBThreadCollection_SBThreadCollection_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBThreadPlan {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBThreadPlan7IsValidEv"]
            pub fn SBThreadPlan_IsValid(this: *const root::lldb::SBThreadPlan) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan5ClearEv"]
            pub fn SBThreadPlan_Clear(this: *mut root::lldb::SBThreadPlan);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan13GetStopReasonEv"]
            pub fn SBThreadPlan_GetStopReason(
                this: *mut root::lldb::SBThreadPlan,
            ) -> root::lldb::StopReason;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan22GetStopReasonDataCountEv"]
            pub fn SBThreadPlan_GetStopReasonDataCount(
                this: *mut root::lldb::SBThreadPlan,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan24GetStopReasonDataAtIndexEj"]
            pub fn SBThreadPlan_GetStopReasonDataAtIndex(
                this: *mut root::lldb::SBThreadPlan,
                idx: u32,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBThreadPlan9GetThreadEv"]
            pub fn SBThreadPlan_GetThread(
                this: *const root::lldb::SBThreadPlan,
            ) -> root::lldb::SBThread;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBThreadPlan14GetDescriptionERNS_8SBStreamE"]
            pub fn SBThreadPlan_GetDescription(
                this: *const root::lldb::SBThreadPlan,
                description: *mut root::lldb::SBStream,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan15SetPlanCompleteEb"]
            pub fn SBThreadPlan_SetPlanComplete(this: *mut root::lldb::SBThreadPlan, success: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan14IsPlanCompleteEv"]
            pub fn SBThreadPlan_IsPlanComplete(this: *mut root::lldb::SBThreadPlan) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan11IsPlanStaleEv"]
            pub fn SBThreadPlan_IsPlanStale(this: *mut root::lldb::SBThreadPlan) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan7IsValidEv"]
            pub fn SBThreadPlan_IsValid1(this: *mut root::lldb::SBThreadPlan) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan13GetStopOthersEv"]
            pub fn SBThreadPlan_GetStopOthers(this: *mut root::lldb::SBThreadPlan) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan13SetStopOthersEb"]
            pub fn SBThreadPlan_SetStopOthers(
                this: *mut root::lldb::SBThreadPlan,
                stop_others: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan31QueueThreadPlanForStepOverRangeERNS_9SBAddressEm"]
            pub fn SBThreadPlan_QueueThreadPlanForStepOverRange(
                this: *mut root::lldb::SBThreadPlan,
                start_address: *mut root::lldb::SBAddress,
                range_size: root::lldb::addr_t,
            ) -> root::lldb::SBThreadPlan;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan31QueueThreadPlanForStepOverRangeERNS_9SBAddressEmRNS_7SBErrorE"]
            pub fn SBThreadPlan_QueueThreadPlanForStepOverRange1(
                this: *mut root::lldb::SBThreadPlan,
                start_address: *mut root::lldb::SBAddress,
                range_size: root::lldb::addr_t,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBThreadPlan;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan29QueueThreadPlanForStepInRangeERNS_9SBAddressEm"]
            pub fn SBThreadPlan_QueueThreadPlanForStepInRange(
                this: *mut root::lldb::SBThreadPlan,
                start_address: *mut root::lldb::SBAddress,
                range_size: root::lldb::addr_t,
            ) -> root::lldb::SBThreadPlan;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan29QueueThreadPlanForStepInRangeERNS_9SBAddressEmRNS_7SBErrorE"]
            pub fn SBThreadPlan_QueueThreadPlanForStepInRange1(
                this: *mut root::lldb::SBThreadPlan,
                start_address: *mut root::lldb::SBAddress,
                range_size: root::lldb::addr_t,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBThreadPlan;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan25QueueThreadPlanForStepOutEjb"]
            pub fn SBThreadPlan_QueueThreadPlanForStepOut(
                this: *mut root::lldb::SBThreadPlan,
                frame_idx_to_step_to: u32,
                first_insn: bool,
            ) -> root::lldb::SBThreadPlan;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan25QueueThreadPlanForStepOutEjbRNS_7SBErrorE"]
            pub fn SBThreadPlan_QueueThreadPlanForStepOut1(
                this: *mut root::lldb::SBThreadPlan,
                frame_idx_to_step_to: u32,
                first_insn: bool,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBThreadPlan;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan30QueueThreadPlanForRunToAddressENS_9SBAddressE"]
            pub fn SBThreadPlan_QueueThreadPlanForRunToAddress(
                this: *mut root::lldb::SBThreadPlan,
                address: root::lldb::SBAddress,
            ) -> root::lldb::SBThreadPlan;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan30QueueThreadPlanForRunToAddressENS_9SBAddressERNS_7SBErrorE"]
            pub fn SBThreadPlan_QueueThreadPlanForRunToAddress1(
                this: *mut root::lldb::SBThreadPlan,
                address: root::lldb::SBAddress,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBThreadPlan;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan30QueueThreadPlanForStepScriptedEPKc"]
            pub fn SBThreadPlan_QueueThreadPlanForStepScripted(
                this: *mut root::lldb::SBThreadPlan,
                script_class_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBThreadPlan;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan30QueueThreadPlanForStepScriptedEPKcRNS_7SBErrorE"]
            pub fn SBThreadPlan_QueueThreadPlanForStepScripted1(
                this: *mut root::lldb::SBThreadPlan,
                script_class_name: *const ::std::os::raw::c_char,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBThreadPlan;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlan30QueueThreadPlanForStepScriptedEPKcRNS_16SBStructuredDataERNS_7SBErrorE"]
            pub fn SBThreadPlan_QueueThreadPlanForStepScripted2(
                this: *mut root::lldb::SBThreadPlan,
                script_class_name: *const ::std::os::raw::c_char,
                args_data: *mut root::lldb::SBStructuredData,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBThreadPlan;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlanC1Ev"]
            pub fn SBThreadPlan_SBThreadPlan(this: *mut root::lldb::SBThreadPlan);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlanC1ERKS0_"]
            pub fn SBThreadPlan_SBThreadPlan1(
                this: *mut root::lldb::SBThreadPlan,
                threadPlan: *const root::lldb::SBThreadPlan,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlanC1ERNS_8SBThreadEPKc"]
            pub fn SBThreadPlan_SBThreadPlan2(
                this: *mut root::lldb::SBThreadPlan,
                thread: *mut root::lldb::SBThread,
                class_name: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlanC1ERNS_8SBThreadEPKcRNS_16SBStructuredDataE"]
            pub fn SBThreadPlan_SBThreadPlan3(
                this: *mut root::lldb::SBThreadPlan,
                thread: *mut root::lldb::SBThread,
                class_name: *const ::std::os::raw::c_char,
                args_data: *mut root::lldb::SBStructuredData,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlanC1ERKSt10shared_ptrIN12lldb_private10ThreadPlanEE"]
            pub fn SBThreadPlan_SBThreadPlan4(
                this: *mut root::lldb::SBThreadPlan,
                lldb_object_sp: *const root::lldb::ThreadPlanSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBThreadPlanD1Ev"]
            pub fn SBThreadPlan_SBThreadPlan_destructor(this: *mut root::lldb::SBThreadPlan);
        }
        impl SBThreadPlan {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBThreadPlan_IsValid(self)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBThreadPlan_Clear(self)
            }
            #[inline]
            pub unsafe fn GetStopReason(&mut self) -> root::lldb::StopReason {
                SBThreadPlan_GetStopReason(self)
            }
            #[inline]
            pub unsafe fn GetStopReasonDataCount(&mut self) -> usize {
                SBThreadPlan_GetStopReasonDataCount(self)
            }
            #[inline]
            pub unsafe fn GetStopReasonDataAtIndex(&mut self, idx: u32) -> u64 {
                SBThreadPlan_GetStopReasonDataAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetThread(&self) -> root::lldb::SBThread {
                SBThreadPlan_GetThread(self)
            }
            #[inline]
            pub unsafe fn GetDescription(&self, description: *mut root::lldb::SBStream) -> bool {
                SBThreadPlan_GetDescription(self, description)
            }
            #[inline]
            pub unsafe fn SetPlanComplete(&mut self, success: bool) {
                SBThreadPlan_SetPlanComplete(self, success)
            }
            #[inline]
            pub unsafe fn IsPlanComplete(&mut self) -> bool {
                SBThreadPlan_IsPlanComplete(self)
            }
            #[inline]
            pub unsafe fn IsPlanStale(&mut self) -> bool {
                SBThreadPlan_IsPlanStale(self)
            }
            #[inline]
            pub unsafe fn IsValid1(&mut self) -> bool {
                SBThreadPlan_IsValid1(self)
            }
            #[inline]
            pub unsafe fn GetStopOthers(&mut self) -> bool {
                SBThreadPlan_GetStopOthers(self)
            }
            #[inline]
            pub unsafe fn SetStopOthers(&mut self, stop_others: bool) {
                SBThreadPlan_SetStopOthers(self, stop_others)
            }
            #[inline]
            pub unsafe fn QueueThreadPlanForStepOverRange(
                &mut self,
                start_address: *mut root::lldb::SBAddress,
                range_size: root::lldb::addr_t,
            ) -> root::lldb::SBThreadPlan {
                SBThreadPlan_QueueThreadPlanForStepOverRange(self, start_address, range_size)
            }
            #[inline]
            pub unsafe fn QueueThreadPlanForStepOverRange1(
                &mut self,
                start_address: *mut root::lldb::SBAddress,
                range_size: root::lldb::addr_t,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBThreadPlan {
                SBThreadPlan_QueueThreadPlanForStepOverRange1(
                    self,
                    start_address,
                    range_size,
                    error,
                )
            }
            #[inline]
            pub unsafe fn QueueThreadPlanForStepInRange(
                &mut self,
                start_address: *mut root::lldb::SBAddress,
                range_size: root::lldb::addr_t,
            ) -> root::lldb::SBThreadPlan {
                SBThreadPlan_QueueThreadPlanForStepInRange(self, start_address, range_size)
            }
            #[inline]
            pub unsafe fn QueueThreadPlanForStepInRange1(
                &mut self,
                start_address: *mut root::lldb::SBAddress,
                range_size: root::lldb::addr_t,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBThreadPlan {
                SBThreadPlan_QueueThreadPlanForStepInRange1(self, start_address, range_size, error)
            }
            #[inline]
            pub unsafe fn QueueThreadPlanForStepOut(
                &mut self,
                frame_idx_to_step_to: u32,
                first_insn: bool,
            ) -> root::lldb::SBThreadPlan {
                SBThreadPlan_QueueThreadPlanForStepOut(self, frame_idx_to_step_to, first_insn)
            }
            #[inline]
            pub unsafe fn QueueThreadPlanForStepOut1(
                &mut self,
                frame_idx_to_step_to: u32,
                first_insn: bool,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBThreadPlan {
                SBThreadPlan_QueueThreadPlanForStepOut1(
                    self,
                    frame_idx_to_step_to,
                    first_insn,
                    error,
                )
            }
            #[inline]
            pub unsafe fn QueueThreadPlanForRunToAddress(
                &mut self,
                address: root::lldb::SBAddress,
            ) -> root::lldb::SBThreadPlan {
                SBThreadPlan_QueueThreadPlanForRunToAddress(self, address)
            }
            #[inline]
            pub unsafe fn QueueThreadPlanForRunToAddress1(
                &mut self,
                address: root::lldb::SBAddress,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBThreadPlan {
                SBThreadPlan_QueueThreadPlanForRunToAddress1(self, address, error)
            }
            #[inline]
            pub unsafe fn QueueThreadPlanForStepScripted(
                &mut self,
                script_class_name: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBThreadPlan {
                SBThreadPlan_QueueThreadPlanForStepScripted(self, script_class_name)
            }
            #[inline]
            pub unsafe fn QueueThreadPlanForStepScripted1(
                &mut self,
                script_class_name: *const ::std::os::raw::c_char,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBThreadPlan {
                SBThreadPlan_QueueThreadPlanForStepScripted1(self, script_class_name, error)
            }
            #[inline]
            pub unsafe fn QueueThreadPlanForStepScripted2(
                &mut self,
                script_class_name: *const ::std::os::raw::c_char,
                args_data: *mut root::lldb::SBStructuredData,
                error: *mut root::lldb::SBError,
            ) -> root::lldb::SBThreadPlan {
                SBThreadPlan_QueueThreadPlanForStepScripted2(
                    self,
                    script_class_name,
                    args_data,
                    error,
                )
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBThreadPlan_SBThreadPlan(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(threadPlan: *const root::lldb::SBThreadPlan) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBThreadPlan_SBThreadPlan1(__bindgen_tmp.as_mut_ptr(), threadPlan);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                thread: *mut root::lldb::SBThread,
                class_name: *const ::std::os::raw::c_char,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBThreadPlan_SBThreadPlan2(__bindgen_tmp.as_mut_ptr(), thread, class_name);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(
                thread: *mut root::lldb::SBThread,
                class_name: *const ::std::os::raw::c_char,
                args_data: *mut root::lldb::SBStructuredData,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBThreadPlan_SBThreadPlan3(
                    __bindgen_tmp.as_mut_ptr(),
                    thread,
                    class_name,
                    args_data,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(lldb_object_sp: *const root::lldb::ThreadPlanSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBThreadPlan_SBThreadPlan4(__bindgen_tmp.as_mut_ptr(), lldb_object_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBThreadPlan_SBThreadPlan_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTraceCursor {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTraceCursor11SetForwardsEb"]
            pub fn SBTraceCursor_SetForwards(this: *mut root::lldb::SBTraceCursor, forwards: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTraceCursor10IsForwardsEv"]
            pub fn SBTraceCursor_IsForwards(this: *const root::lldb::SBTraceCursor) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTraceCursor4NextEv"]
            pub fn SBTraceCursor_Next(this: *mut root::lldb::SBTraceCursor);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTraceCursor8HasValueEv"]
            pub fn SBTraceCursor_HasValue(this: *const root::lldb::SBTraceCursor) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTraceCursor6GoToIdEm"]
            pub fn SBTraceCursor_GoToId(
                this: *mut root::lldb::SBTraceCursor,
                id: root::lldb::user_id_t,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTraceCursor5HasIdEm"]
            pub fn SBTraceCursor_HasId(
                this: *const root::lldb::SBTraceCursor,
                id: root::lldb::user_id_t,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTraceCursor5GetIdEv"]
            pub fn SBTraceCursor_GetId(
                this: *const root::lldb::SBTraceCursor,
            ) -> root::lldb::user_id_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTraceCursor4SeekElNS_19TraceCursorSeekTypeE"]
            pub fn SBTraceCursor_Seek(
                this: *mut root::lldb::SBTraceCursor,
                offset: i64,
                origin: root::lldb::TraceCursorSeekType,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTraceCursor11GetItemKindEv"]
            pub fn SBTraceCursor_GetItemKind(
                this: *const root::lldb::SBTraceCursor,
            ) -> root::lldb::TraceItemKind;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTraceCursor7IsErrorEv"]
            pub fn SBTraceCursor_IsError(this: *const root::lldb::SBTraceCursor) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTraceCursor8GetErrorEv"]
            pub fn SBTraceCursor_GetError(
                this: *const root::lldb::SBTraceCursor,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTraceCursor7IsEventEv"]
            pub fn SBTraceCursor_IsEvent(this: *const root::lldb::SBTraceCursor) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTraceCursor12GetEventTypeEv"]
            pub fn SBTraceCursor_GetEventType(
                this: *const root::lldb::SBTraceCursor,
            ) -> root::lldb::TraceEvent;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTraceCursor20GetEventTypeAsStringEv"]
            pub fn SBTraceCursor_GetEventTypeAsString(
                this: *const root::lldb::SBTraceCursor,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTraceCursor13IsInstructionEv"]
            pub fn SBTraceCursor_IsInstruction(this: *const root::lldb::SBTraceCursor) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTraceCursor14GetLoadAddressEv"]
            pub fn SBTraceCursor_GetLoadAddress(
                this: *const root::lldb::SBTraceCursor,
            ) -> root::lldb::addr_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTraceCursor6GetCPUEv"]
            pub fn SBTraceCursor_GetCPU(
                this: *const root::lldb::SBTraceCursor,
            ) -> root::lldb::cpu_id_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTraceCursor7IsValidEv"]
            pub fn SBTraceCursor_IsValid(this: *const root::lldb::SBTraceCursor) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTraceCursorC1Ev"]
            pub fn SBTraceCursor_SBTraceCursor(this: *mut root::lldb::SBTraceCursor);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTraceCursorC1ESt10shared_ptrIN12lldb_private11TraceCursorEE"]
            pub fn SBTraceCursor_SBTraceCursor1(
                this: *mut root::lldb::SBTraceCursor,
                trace_cursor_sp: root::lldb::TraceCursorSP,
            );
        }
        impl SBTraceCursor {
            #[inline]
            pub unsafe fn SetForwards(&mut self, forwards: bool) {
                SBTraceCursor_SetForwards(self, forwards)
            }
            #[inline]
            pub unsafe fn IsForwards(&self) -> bool {
                SBTraceCursor_IsForwards(self)
            }
            #[inline]
            pub unsafe fn Next(&mut self) {
                SBTraceCursor_Next(self)
            }
            #[inline]
            pub unsafe fn HasValue(&self) -> bool {
                SBTraceCursor_HasValue(self)
            }
            #[inline]
            pub unsafe fn GoToId(&mut self, id: root::lldb::user_id_t) -> bool {
                SBTraceCursor_GoToId(self, id)
            }
            #[inline]
            pub unsafe fn HasId(&self, id: root::lldb::user_id_t) -> bool {
                SBTraceCursor_HasId(self, id)
            }
            #[inline]
            pub unsafe fn GetId(&self) -> root::lldb::user_id_t {
                SBTraceCursor_GetId(self)
            }
            #[inline]
            pub unsafe fn Seek(
                &mut self,
                offset: i64,
                origin: root::lldb::TraceCursorSeekType,
            ) -> bool {
                SBTraceCursor_Seek(self, offset, origin)
            }
            #[inline]
            pub unsafe fn GetItemKind(&self) -> root::lldb::TraceItemKind {
                SBTraceCursor_GetItemKind(self)
            }
            #[inline]
            pub unsafe fn IsError(&self) -> bool {
                SBTraceCursor_IsError(self)
            }
            #[inline]
            pub unsafe fn GetError(&self) -> *const ::std::os::raw::c_char {
                SBTraceCursor_GetError(self)
            }
            #[inline]
            pub unsafe fn IsEvent(&self) -> bool {
                SBTraceCursor_IsEvent(self)
            }
            #[inline]
            pub unsafe fn GetEventType(&self) -> root::lldb::TraceEvent {
                SBTraceCursor_GetEventType(self)
            }
            #[inline]
            pub unsafe fn GetEventTypeAsString(&self) -> *const ::std::os::raw::c_char {
                SBTraceCursor_GetEventTypeAsString(self)
            }
            #[inline]
            pub unsafe fn IsInstruction(&self) -> bool {
                SBTraceCursor_IsInstruction(self)
            }
            #[inline]
            pub unsafe fn GetLoadAddress(&self) -> root::lldb::addr_t {
                SBTraceCursor_GetLoadAddress(self)
            }
            #[inline]
            pub unsafe fn GetCPU(&self) -> root::lldb::cpu_id_t {
                SBTraceCursor_GetCPU(self)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBTraceCursor_IsValid(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTraceCursor_SBTraceCursor(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(trace_cursor_sp: root::lldb::TraceCursorSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTraceCursor_SBTraceCursor1(__bindgen_tmp.as_mut_ptr(), trace_cursor_sp);
                __bindgen_tmp.assume_init()
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTrace {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 4usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBTrace17LoadTraceFromFileERNS_7SBErrorERNS_10SBDebuggerERKNS_10SBFileSpecE"]
            pub fn SBTrace_LoadTraceFromFile(
                error: *mut root::lldb::SBError,
                debugger: *mut root::lldb::SBDebugger,
                trace_description_file: *const root::lldb::SBFileSpec,
            ) -> root::lldb::SBTrace;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBTrace15CreateNewCursorERNS_7SBErrorERNS_8SBThreadE"]
            pub fn SBTrace_CreateNewCursor(
                this: *mut root::lldb::SBTrace,
                error: *mut root::lldb::SBError,
                thread: *mut root::lldb::SBThread,
            ) -> root::lldb::SBTraceCursor;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBTrace10SaveToDiskERNS_7SBErrorERKNS_10SBFileSpecEb"]
            pub fn SBTrace_SaveToDisk(
                this: *mut root::lldb::SBTrace,
                error: *mut root::lldb::SBError,
                bundle_dir: *const root::lldb::SBFileSpec,
                compact: bool,
            ) -> root::lldb::SBFileSpec;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBTrace25GetStartConfigurationHelpEv"]
            pub fn SBTrace_GetStartConfigurationHelp(
                this: *mut root::lldb::SBTrace,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBTrace5StartERKNS_16SBStructuredDataE"]
            pub fn SBTrace_Start(
                this: *mut root::lldb::SBTrace,
                configuration: *const root::lldb::SBStructuredData,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBTrace5StartERKNS_8SBThreadERKNS_16SBStructuredDataE"]
            pub fn SBTrace_Start1(
                this: *mut root::lldb::SBTrace,
                thread: *const root::lldb::SBThread,
                configuration: *const root::lldb::SBStructuredData,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBTrace4StopEv"]
            pub fn SBTrace_Stop(this: *mut root::lldb::SBTrace) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBTrace4StopERKNS_8SBThreadE"]
            pub fn SBTrace_Stop1(
                this: *mut root::lldb::SBTrace,
                thread: *const root::lldb::SBThread,
            ) -> root::lldb::SBError;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBTrace7IsValidEv"]
            pub fn SBTrace_IsValid(this: *mut root::lldb::SBTrace) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBTraceC1Ev"]
            pub fn SBTrace_SBTrace(this: *mut root::lldb::SBTrace);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb7SBTraceC1ERKSt10shared_ptrIN12lldb_private5TraceEE"]
            pub fn SBTrace_SBTrace1(
                this: *mut root::lldb::SBTrace,
                trace_sp: *const root::lldb::TraceSP,
            );
        }
        impl SBTrace {
            #[inline]
            pub unsafe fn LoadTraceFromFile(
                error: *mut root::lldb::SBError,
                debugger: *mut root::lldb::SBDebugger,
                trace_description_file: *const root::lldb::SBFileSpec,
            ) -> root::lldb::SBTrace {
                SBTrace_LoadTraceFromFile(error, debugger, trace_description_file)
            }
            #[inline]
            pub unsafe fn CreateNewCursor(
                &mut self,
                error: *mut root::lldb::SBError,
                thread: *mut root::lldb::SBThread,
            ) -> root::lldb::SBTraceCursor {
                SBTrace_CreateNewCursor(self, error, thread)
            }
            #[inline]
            pub unsafe fn SaveToDisk(
                &mut self,
                error: *mut root::lldb::SBError,
                bundle_dir: *const root::lldb::SBFileSpec,
                compact: bool,
            ) -> root::lldb::SBFileSpec {
                SBTrace_SaveToDisk(self, error, bundle_dir, compact)
            }
            #[inline]
            pub unsafe fn GetStartConfigurationHelp(&mut self) -> *const ::std::os::raw::c_char {
                SBTrace_GetStartConfigurationHelp(self)
            }
            #[inline]
            pub unsafe fn Start(
                &mut self,
                configuration: *const root::lldb::SBStructuredData,
            ) -> root::lldb::SBError {
                SBTrace_Start(self, configuration)
            }
            #[inline]
            pub unsafe fn Start1(
                &mut self,
                thread: *const root::lldb::SBThread,
                configuration: *const root::lldb::SBStructuredData,
            ) -> root::lldb::SBError {
                SBTrace_Start1(self, thread, configuration)
            }
            #[inline]
            pub unsafe fn Stop(&mut self) -> root::lldb::SBError {
                SBTrace_Stop(self)
            }
            #[inline]
            pub unsafe fn Stop1(
                &mut self,
                thread: *const root::lldb::SBThread,
            ) -> root::lldb::SBError {
                SBTrace_Stop1(self, thread)
            }
            #[inline]
            pub unsafe fn IsValid(&mut self) -> bool {
                SBTrace_IsValid(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTrace_SBTrace(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(trace_sp: *const root::lldb::TraceSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTrace_SBTrace1(__bindgen_tmp.as_mut_ptr(), trace_sp);
                __bindgen_tmp.assume_init()
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTypeCategory {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb14SBTypeCategory7IsValidEv"]
            pub fn SBTypeCategory_IsValid(this: *const root::lldb::SBTypeCategory) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory10GetEnabledEv"]
            pub fn SBTypeCategory_GetEnabled(this: *mut root::lldb::SBTypeCategory) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory10SetEnabledEb"]
            pub fn SBTypeCategory_SetEnabled(this: *mut root::lldb::SBTypeCategory, arg1: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory7GetNameEv"]
            pub fn SBTypeCategory_GetName(
                this: *mut root::lldb::SBTypeCategory,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory18GetLanguageAtIndexEj"]
            pub fn SBTypeCategory_GetLanguageAtIndex(
                this: *mut root::lldb::SBTypeCategory,
                idx: u32,
            ) -> root::lldb::LanguageType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory15GetNumLanguagesEv"]
            pub fn SBTypeCategory_GetNumLanguages(this: *mut root::lldb::SBTypeCategory) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory11AddLanguageENS_12LanguageTypeE"]
            pub fn SBTypeCategory_AddLanguage(
                this: *mut root::lldb::SBTypeCategory,
                language: root::lldb::LanguageType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE"]
            pub fn SBTypeCategory_GetDescription(
                this: *mut root::lldb::SBTypeCategory,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory13GetNumFormatsEv"]
            pub fn SBTypeCategory_GetNumFormats(this: *mut root::lldb::SBTypeCategory) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory15GetNumSummariesEv"]
            pub fn SBTypeCategory_GetNumSummaries(this: *mut root::lldb::SBTypeCategory) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory13GetNumFiltersEv"]
            pub fn SBTypeCategory_GetNumFilters(this: *mut root::lldb::SBTypeCategory) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory16GetNumSyntheticsEv"]
            pub fn SBTypeCategory_GetNumSynthetics(this: *mut root::lldb::SBTypeCategory) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory36GetTypeNameSpecifierForFilterAtIndexEj"]
            pub fn SBTypeCategory_GetTypeNameSpecifierForFilterAtIndex(
                this: *mut root::lldb::SBTypeCategory,
                arg1: u32,
            ) -> root::lldb::SBTypeNameSpecifier;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory36GetTypeNameSpecifierForFormatAtIndexEj"]
            pub fn SBTypeCategory_GetTypeNameSpecifierForFormatAtIndex(
                this: *mut root::lldb::SBTypeCategory,
                arg1: u32,
            ) -> root::lldb::SBTypeNameSpecifier;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory37GetTypeNameSpecifierForSummaryAtIndexEj"]
            pub fn SBTypeCategory_GetTypeNameSpecifierForSummaryAtIndex(
                this: *mut root::lldb::SBTypeCategory,
                arg1: u32,
            ) -> root::lldb::SBTypeNameSpecifier;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory39GetTypeNameSpecifierForSyntheticAtIndexEj"]
            pub fn SBTypeCategory_GetTypeNameSpecifierForSyntheticAtIndex(
                this: *mut root::lldb::SBTypeCategory,
                arg1: u32,
            ) -> root::lldb::SBTypeNameSpecifier;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory16GetFilterForTypeENS_19SBTypeNameSpecifierE"]
            pub fn SBTypeCategory_GetFilterForType(
                this: *mut root::lldb::SBTypeCategory,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeFilter;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory16GetFormatForTypeENS_19SBTypeNameSpecifierE"]
            pub fn SBTypeCategory_GetFormatForType(
                this: *mut root::lldb::SBTypeCategory,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeFormat;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory17GetSummaryForTypeENS_19SBTypeNameSpecifierE"]
            pub fn SBTypeCategory_GetSummaryForType(
                this: *mut root::lldb::SBTypeCategory,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeSummary;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory19GetSyntheticForTypeENS_19SBTypeNameSpecifierE"]
            pub fn SBTypeCategory_GetSyntheticForType(
                this: *mut root::lldb::SBTypeCategory,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeSynthetic;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory16GetFilterAtIndexEj"]
            pub fn SBTypeCategory_GetFilterAtIndex(
                this: *mut root::lldb::SBTypeCategory,
                arg1: u32,
            ) -> root::lldb::SBTypeFilter;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory16GetFormatAtIndexEj"]
            pub fn SBTypeCategory_GetFormatAtIndex(
                this: *mut root::lldb::SBTypeCategory,
                arg1: u32,
            ) -> root::lldb::SBTypeFormat;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory17GetSummaryAtIndexEj"]
            pub fn SBTypeCategory_GetSummaryAtIndex(
                this: *mut root::lldb::SBTypeCategory,
                arg1: u32,
            ) -> root::lldb::SBTypeSummary;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory19GetSyntheticAtIndexEj"]
            pub fn SBTypeCategory_GetSyntheticAtIndex(
                this: *mut root::lldb::SBTypeCategory,
                arg1: u32,
            ) -> root::lldb::SBTypeSynthetic;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory13AddTypeFormatENS_19SBTypeNameSpecifierENS_12SBTypeFormatE"]
            pub fn SBTypeCategory_AddTypeFormat(
                this: *mut root::lldb::SBTypeCategory,
                arg1: root::lldb::SBTypeNameSpecifier,
                arg2: root::lldb::SBTypeFormat,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory16DeleteTypeFormatENS_19SBTypeNameSpecifierE"]
            pub fn SBTypeCategory_DeleteTypeFormat(
                this: *mut root::lldb::SBTypeCategory,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory14AddTypeSummaryENS_19SBTypeNameSpecifierENS_13SBTypeSummaryE"]
            pub fn SBTypeCategory_AddTypeSummary(
                this: *mut root::lldb::SBTypeCategory,
                arg1: root::lldb::SBTypeNameSpecifier,
                arg2: root::lldb::SBTypeSummary,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory17DeleteTypeSummaryENS_19SBTypeNameSpecifierE"]
            pub fn SBTypeCategory_DeleteTypeSummary(
                this: *mut root::lldb::SBTypeCategory,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory13AddTypeFilterENS_19SBTypeNameSpecifierENS_12SBTypeFilterE"]
            pub fn SBTypeCategory_AddTypeFilter(
                this: *mut root::lldb::SBTypeCategory,
                arg1: root::lldb::SBTypeNameSpecifier,
                arg2: root::lldb::SBTypeFilter,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory16DeleteTypeFilterENS_19SBTypeNameSpecifierE"]
            pub fn SBTypeCategory_DeleteTypeFilter(
                this: *mut root::lldb::SBTypeCategory,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory16AddTypeSyntheticENS_19SBTypeNameSpecifierENS_15SBTypeSyntheticE"]
            pub fn SBTypeCategory_AddTypeSynthetic(
                this: *mut root::lldb::SBTypeCategory,
                arg1: root::lldb::SBTypeNameSpecifier,
                arg2: root::lldb::SBTypeSynthetic,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory19DeleteTypeSyntheticENS_19SBTypeNameSpecifierE"]
            pub fn SBTypeCategory_DeleteTypeSynthetic(
                this: *mut root::lldb::SBTypeCategory,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory5GetSPEv"]
            pub fn SBTypeCategory_GetSP(
                this: *mut root::lldb::SBTypeCategory,
            ) -> root::lldb::TypeCategoryImplSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory5SetSPERKSt10shared_ptrIN12lldb_private16TypeCategoryImplEE"]
            pub fn SBTypeCategory_SetSP(
                this: *mut root::lldb::SBTypeCategory,
                typecategory_impl_sp: *const root::lldb::TypeCategoryImplSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategory17IsDefaultCategoryEv"]
            pub fn SBTypeCategory_IsDefaultCategory(this: *mut root::lldb::SBTypeCategory) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategoryC1Ev"]
            pub fn SBTypeCategory_SBTypeCategory(this: *mut root::lldb::SBTypeCategory);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategoryC1ERKS0_"]
            pub fn SBTypeCategory_SBTypeCategory1(
                this: *mut root::lldb::SBTypeCategory,
                rhs: *const root::lldb::SBTypeCategory,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategoryC1ERKSt10shared_ptrIN12lldb_private16TypeCategoryImplEE"]
            pub fn SBTypeCategory_SBTypeCategory2(
                this: *mut root::lldb::SBTypeCategory,
                arg1: *const root::lldb::TypeCategoryImplSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategoryC1EPKc"]
            pub fn SBTypeCategory_SBTypeCategory3(
                this: *mut root::lldb::SBTypeCategory,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb14SBTypeCategoryD1Ev"]
            pub fn SBTypeCategory_SBTypeCategory_destructor(this: *mut root::lldb::SBTypeCategory);
        }
        impl SBTypeCategory {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBTypeCategory_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetEnabled(&mut self) -> bool {
                SBTypeCategory_GetEnabled(self)
            }
            #[inline]
            pub unsafe fn SetEnabled(&mut self, arg1: bool) {
                SBTypeCategory_SetEnabled(self, arg1)
            }
            #[inline]
            pub unsafe fn GetName(&mut self) -> *const ::std::os::raw::c_char {
                SBTypeCategory_GetName(self)
            }
            #[inline]
            pub unsafe fn GetLanguageAtIndex(&mut self, idx: u32) -> root::lldb::LanguageType {
                SBTypeCategory_GetLanguageAtIndex(self, idx)
            }
            #[inline]
            pub unsafe fn GetNumLanguages(&mut self) -> u32 {
                SBTypeCategory_GetNumLanguages(self)
            }
            #[inline]
            pub unsafe fn AddLanguage(&mut self, language: root::lldb::LanguageType) {
                SBTypeCategory_AddLanguage(self, language)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool {
                SBTypeCategory_GetDescription(self, description, description_level)
            }
            #[inline]
            pub unsafe fn GetNumFormats(&mut self) -> u32 {
                SBTypeCategory_GetNumFormats(self)
            }
            #[inline]
            pub unsafe fn GetNumSummaries(&mut self) -> u32 {
                SBTypeCategory_GetNumSummaries(self)
            }
            #[inline]
            pub unsafe fn GetNumFilters(&mut self) -> u32 {
                SBTypeCategory_GetNumFilters(self)
            }
            #[inline]
            pub unsafe fn GetNumSynthetics(&mut self) -> u32 {
                SBTypeCategory_GetNumSynthetics(self)
            }
            #[inline]
            pub unsafe fn GetTypeNameSpecifierForFilterAtIndex(
                &mut self,
                arg1: u32,
            ) -> root::lldb::SBTypeNameSpecifier {
                SBTypeCategory_GetTypeNameSpecifierForFilterAtIndex(self, arg1)
            }
            #[inline]
            pub unsafe fn GetTypeNameSpecifierForFormatAtIndex(
                &mut self,
                arg1: u32,
            ) -> root::lldb::SBTypeNameSpecifier {
                SBTypeCategory_GetTypeNameSpecifierForFormatAtIndex(self, arg1)
            }
            #[inline]
            pub unsafe fn GetTypeNameSpecifierForSummaryAtIndex(
                &mut self,
                arg1: u32,
            ) -> root::lldb::SBTypeNameSpecifier {
                SBTypeCategory_GetTypeNameSpecifierForSummaryAtIndex(self, arg1)
            }
            #[inline]
            pub unsafe fn GetTypeNameSpecifierForSyntheticAtIndex(
                &mut self,
                arg1: u32,
            ) -> root::lldb::SBTypeNameSpecifier {
                SBTypeCategory_GetTypeNameSpecifierForSyntheticAtIndex(self, arg1)
            }
            #[inline]
            pub unsafe fn GetFilterForType(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeFilter {
                SBTypeCategory_GetFilterForType(self, arg1)
            }
            #[inline]
            pub unsafe fn GetFormatForType(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeFormat {
                SBTypeCategory_GetFormatForType(self, arg1)
            }
            #[inline]
            pub unsafe fn GetSummaryForType(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeSummary {
                SBTypeCategory_GetSummaryForType(self, arg1)
            }
            #[inline]
            pub unsafe fn GetSyntheticForType(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBTypeSynthetic {
                SBTypeCategory_GetSyntheticForType(self, arg1)
            }
            #[inline]
            pub unsafe fn GetFilterAtIndex(&mut self, arg1: u32) -> root::lldb::SBTypeFilter {
                SBTypeCategory_GetFilterAtIndex(self, arg1)
            }
            #[inline]
            pub unsafe fn GetFormatAtIndex(&mut self, arg1: u32) -> root::lldb::SBTypeFormat {
                SBTypeCategory_GetFormatAtIndex(self, arg1)
            }
            #[inline]
            pub unsafe fn GetSummaryAtIndex(&mut self, arg1: u32) -> root::lldb::SBTypeSummary {
                SBTypeCategory_GetSummaryAtIndex(self, arg1)
            }
            #[inline]
            pub unsafe fn GetSyntheticAtIndex(&mut self, arg1: u32) -> root::lldb::SBTypeSynthetic {
                SBTypeCategory_GetSyntheticAtIndex(self, arg1)
            }
            #[inline]
            pub unsafe fn AddTypeFormat(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
                arg2: root::lldb::SBTypeFormat,
            ) -> bool {
                SBTypeCategory_AddTypeFormat(self, arg1, arg2)
            }
            #[inline]
            pub unsafe fn DeleteTypeFormat(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> bool {
                SBTypeCategory_DeleteTypeFormat(self, arg1)
            }
            #[inline]
            pub unsafe fn AddTypeSummary(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
                arg2: root::lldb::SBTypeSummary,
            ) -> bool {
                SBTypeCategory_AddTypeSummary(self, arg1, arg2)
            }
            #[inline]
            pub unsafe fn DeleteTypeSummary(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> bool {
                SBTypeCategory_DeleteTypeSummary(self, arg1)
            }
            #[inline]
            pub unsafe fn AddTypeFilter(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
                arg2: root::lldb::SBTypeFilter,
            ) -> bool {
                SBTypeCategory_AddTypeFilter(self, arg1, arg2)
            }
            #[inline]
            pub unsafe fn DeleteTypeFilter(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> bool {
                SBTypeCategory_DeleteTypeFilter(self, arg1)
            }
            #[inline]
            pub unsafe fn AddTypeSynthetic(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
                arg2: root::lldb::SBTypeSynthetic,
            ) -> bool {
                SBTypeCategory_AddTypeSynthetic(self, arg1, arg2)
            }
            #[inline]
            pub unsafe fn DeleteTypeSynthetic(
                &mut self,
                arg1: root::lldb::SBTypeNameSpecifier,
            ) -> bool {
                SBTypeCategory_DeleteTypeSynthetic(self, arg1)
            }
            #[inline]
            pub unsafe fn GetSP(&mut self) -> root::lldb::TypeCategoryImplSP {
                SBTypeCategory_GetSP(self)
            }
            #[inline]
            pub unsafe fn SetSP(
                &mut self,
                typecategory_impl_sp: *const root::lldb::TypeCategoryImplSP,
            ) {
                SBTypeCategory_SetSP(self, typecategory_impl_sp)
            }
            #[inline]
            pub unsafe fn IsDefaultCategory(&mut self) -> bool {
                SBTypeCategory_IsDefaultCategory(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeCategory_SBTypeCategory(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBTypeCategory) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeCategory_SBTypeCategory1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(arg1: *const root::lldb::TypeCategoryImplSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeCategory_SBTypeCategory2(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeCategory_SBTypeCategory3(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBTypeCategory_SBTypeCategory_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTypeEnumMember {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBTypeEnumMember7IsValidEv"]
            pub fn SBTypeEnumMember_IsValid(this: *const root::lldb::SBTypeEnumMember) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBTypeEnumMember16GetValueAsSignedEv"]
            pub fn SBTypeEnumMember_GetValueAsSigned(
                this: *mut root::lldb::SBTypeEnumMember,
            ) -> i64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBTypeEnumMember18GetValueAsUnsignedEv"]
            pub fn SBTypeEnumMember_GetValueAsUnsigned(
                this: *mut root::lldb::SBTypeEnumMember,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBTypeEnumMember7GetNameEv"]
            pub fn SBTypeEnumMember_GetName(
                this: *mut root::lldb::SBTypeEnumMember,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBTypeEnumMember7GetTypeEv"]
            pub fn SBTypeEnumMember_GetType(
                this: *mut root::lldb::SBTypeEnumMember,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBTypeEnumMember14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE"]
            pub fn SBTypeEnumMember_GetDescription(
                this: *mut root::lldb::SBTypeEnumMember,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBTypeEnumMember5resetEPN12lldb_private18TypeEnumMemberImplE"]
            pub fn SBTypeEnumMember_reset(
                this: *mut root::lldb::SBTypeEnumMember,
                arg1: *mut root::lldb_private::TypeEnumMemberImpl,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBTypeEnumMember3refEv"]
            pub fn SBTypeEnumMember_ref(
                this: *mut root::lldb::SBTypeEnumMember,
            ) -> *mut root::lldb_private::TypeEnumMemberImpl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb16SBTypeEnumMember3refEv"]
            pub fn SBTypeEnumMember_ref1(
                this: *const root::lldb::SBTypeEnumMember,
            ) -> *const root::lldb_private::TypeEnumMemberImpl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBTypeEnumMemberC1Ev"]
            pub fn SBTypeEnumMember_SBTypeEnumMember(this: *mut root::lldb::SBTypeEnumMember);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBTypeEnumMemberC1ERKS0_"]
            pub fn SBTypeEnumMember_SBTypeEnumMember1(
                this: *mut root::lldb::SBTypeEnumMember,
                rhs: *const root::lldb::SBTypeEnumMember,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBTypeEnumMemberC1ERKSt10shared_ptrIN12lldb_private18TypeEnumMemberImplEE"]
            pub fn SBTypeEnumMember_SBTypeEnumMember2(
                this: *mut root::lldb::SBTypeEnumMember,
                arg1: *const root::lldb::TypeEnumMemberImplSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb16SBTypeEnumMemberD1Ev"]
            pub fn SBTypeEnumMember_SBTypeEnumMember_destructor(
                this: *mut root::lldb::SBTypeEnumMember,
            );
        }
        impl SBTypeEnumMember {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBTypeEnumMember_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetValueAsSigned(&mut self) -> i64 {
                SBTypeEnumMember_GetValueAsSigned(self)
            }
            #[inline]
            pub unsafe fn GetValueAsUnsigned(&mut self) -> u64 {
                SBTypeEnumMember_GetValueAsUnsigned(self)
            }
            #[inline]
            pub unsafe fn GetName(&mut self) -> *const ::std::os::raw::c_char {
                SBTypeEnumMember_GetName(self)
            }
            #[inline]
            pub unsafe fn GetType(&mut self) -> root::lldb::SBType {
                SBTypeEnumMember_GetType(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool {
                SBTypeEnumMember_GetDescription(self, description, description_level)
            }
            #[inline]
            pub unsafe fn reset(&mut self, arg1: *mut root::lldb_private::TypeEnumMemberImpl) {
                SBTypeEnumMember_reset(self, arg1)
            }
            #[inline]
            pub unsafe fn ref_(&mut self) -> *mut root::lldb_private::TypeEnumMemberImpl {
                SBTypeEnumMember_ref(self)
            }
            #[inline]
            pub unsafe fn ref1(&self) -> *const root::lldb_private::TypeEnumMemberImpl {
                SBTypeEnumMember_ref1(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeEnumMember_SBTypeEnumMember(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBTypeEnumMember) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeEnumMember_SBTypeEnumMember1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(arg1: *const root::lldb::TypeEnumMemberImplSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeEnumMember_SBTypeEnumMember2(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBTypeEnumMember_SBTypeEnumMember_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTypeEnumMemberList {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeEnumMemberList7IsValidEv"]
            pub fn SBTypeEnumMemberList_IsValid(
                this: *mut root::lldb::SBTypeEnumMemberList,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeEnumMemberList6AppendENS_16SBTypeEnumMemberE"]
            pub fn SBTypeEnumMemberList_Append(
                this: *mut root::lldb::SBTypeEnumMemberList,
                entry: root::lldb::SBTypeEnumMember,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeEnumMemberList24GetTypeEnumMemberAtIndexEj"]
            pub fn SBTypeEnumMemberList_GetTypeEnumMemberAtIndex(
                this: *mut root::lldb::SBTypeEnumMemberList,
                index: u32,
            ) -> root::lldb::SBTypeEnumMember;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeEnumMemberList7GetSizeEv"]
            pub fn SBTypeEnumMemberList_GetSize(this: *mut root::lldb::SBTypeEnumMemberList)
                -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeEnumMemberListC1Ev"]
            pub fn SBTypeEnumMemberList_SBTypeEnumMemberList(
                this: *mut root::lldb::SBTypeEnumMemberList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeEnumMemberListC1ERKS0_"]
            pub fn SBTypeEnumMemberList_SBTypeEnumMemberList1(
                this: *mut root::lldb::SBTypeEnumMemberList,
                rhs: *const root::lldb::SBTypeEnumMemberList,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeEnumMemberListD1Ev"]
            pub fn SBTypeEnumMemberList_SBTypeEnumMemberList_destructor(
                this: *mut root::lldb::SBTypeEnumMemberList,
            );
        }
        impl SBTypeEnumMemberList {
            #[inline]
            pub unsafe fn IsValid(&mut self) -> bool {
                SBTypeEnumMemberList_IsValid(self)
            }
            #[inline]
            pub unsafe fn Append(&mut self, entry: root::lldb::SBTypeEnumMember) {
                SBTypeEnumMemberList_Append(self, entry)
            }
            #[inline]
            pub unsafe fn GetTypeEnumMemberAtIndex(
                &mut self,
                index: u32,
            ) -> root::lldb::SBTypeEnumMember {
                SBTypeEnumMemberList_GetTypeEnumMemberAtIndex(self, index)
            }
            #[inline]
            pub unsafe fn GetSize(&mut self) -> u32 {
                SBTypeEnumMemberList_GetSize(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeEnumMemberList_SBTypeEnumMemberList(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBTypeEnumMemberList) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeEnumMemberList_SBTypeEnumMemberList1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBTypeEnumMemberList_SBTypeEnumMemberList_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTypeFilter {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBTypeFilter7IsValidEv"]
            pub fn SBTypeFilter_IsValid(this: *const root::lldb::SBTypeFilter) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilter26GetNumberOfExpressionPathsEv"]
            pub fn SBTypeFilter_GetNumberOfExpressionPaths(
                this: *mut root::lldb::SBTypeFilter,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilter24GetExpressionPathAtIndexEj"]
            pub fn SBTypeFilter_GetExpressionPathAtIndex(
                this: *mut root::lldb::SBTypeFilter,
                i: u32,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilter28ReplaceExpressionPathAtIndexEjPKc"]
            pub fn SBTypeFilter_ReplaceExpressionPathAtIndex(
                this: *mut root::lldb::SBTypeFilter,
                i: u32,
                item: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilter20AppendExpressionPathEPKc"]
            pub fn SBTypeFilter_AppendExpressionPath(
                this: *mut root::lldb::SBTypeFilter,
                item: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilter5ClearEv"]
            pub fn SBTypeFilter_Clear(this: *mut root::lldb::SBTypeFilter);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilter10GetOptionsEv"]
            pub fn SBTypeFilter_GetOptions(this: *mut root::lldb::SBTypeFilter) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilter10SetOptionsEj"]
            pub fn SBTypeFilter_SetOptions(this: *mut root::lldb::SBTypeFilter, arg1: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilter14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE"]
            pub fn SBTypeFilter_GetDescription(
                this: *mut root::lldb::SBTypeFilter,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilter9IsEqualToERS0_"]
            pub fn SBTypeFilter_IsEqualTo(
                this: *mut root::lldb::SBTypeFilter,
                rhs: *mut root::lldb::SBTypeFilter,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilter5GetSPEv"]
            pub fn SBTypeFilter_GetSP(
                this: *mut root::lldb::SBTypeFilter,
            ) -> root::lldb::TypeFilterImplSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilter5SetSPERKSt10shared_ptrIN12lldb_private14TypeFilterImplEE"]
            pub fn SBTypeFilter_SetSP(
                this: *mut root::lldb::SBTypeFilter,
                typefilter_impl_sp: *const root::lldb::TypeFilterImplSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilter16CopyOnWrite_ImplEv"]
            pub fn SBTypeFilter_CopyOnWrite_Impl(this: *mut root::lldb::SBTypeFilter) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilterC1Ev"]
            pub fn SBTypeFilter_SBTypeFilter(this: *mut root::lldb::SBTypeFilter);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilterC1Ej"]
            pub fn SBTypeFilter_SBTypeFilter1(this: *mut root::lldb::SBTypeFilter, options: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilterC1ERKS0_"]
            pub fn SBTypeFilter_SBTypeFilter2(
                this: *mut root::lldb::SBTypeFilter,
                rhs: *const root::lldb::SBTypeFilter,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilterC1ERKSt10shared_ptrIN12lldb_private14TypeFilterImplEE"]
            pub fn SBTypeFilter_SBTypeFilter3(
                this: *mut root::lldb::SBTypeFilter,
                arg1: *const root::lldb::TypeFilterImplSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFilterD1Ev"]
            pub fn SBTypeFilter_SBTypeFilter_destructor(this: *mut root::lldb::SBTypeFilter);
        }
        impl SBTypeFilter {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBTypeFilter_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetNumberOfExpressionPaths(&mut self) -> u32 {
                SBTypeFilter_GetNumberOfExpressionPaths(self)
            }
            #[inline]
            pub unsafe fn GetExpressionPathAtIndex(
                &mut self,
                i: u32,
            ) -> *const ::std::os::raw::c_char {
                SBTypeFilter_GetExpressionPathAtIndex(self, i)
            }
            #[inline]
            pub unsafe fn ReplaceExpressionPathAtIndex(
                &mut self,
                i: u32,
                item: *const ::std::os::raw::c_char,
            ) -> bool {
                SBTypeFilter_ReplaceExpressionPathAtIndex(self, i, item)
            }
            #[inline]
            pub unsafe fn AppendExpressionPath(&mut self, item: *const ::std::os::raw::c_char) {
                SBTypeFilter_AppendExpressionPath(self, item)
            }
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBTypeFilter_Clear(self)
            }
            #[inline]
            pub unsafe fn GetOptions(&mut self) -> u32 {
                SBTypeFilter_GetOptions(self)
            }
            #[inline]
            pub unsafe fn SetOptions(&mut self, arg1: u32) {
                SBTypeFilter_SetOptions(self, arg1)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool {
                SBTypeFilter_GetDescription(self, description, description_level)
            }
            #[inline]
            pub unsafe fn IsEqualTo(&mut self, rhs: *mut root::lldb::SBTypeFilter) -> bool {
                SBTypeFilter_IsEqualTo(self, rhs)
            }
            #[inline]
            pub unsafe fn GetSP(&mut self) -> root::lldb::TypeFilterImplSP {
                SBTypeFilter_GetSP(self)
            }
            #[inline]
            pub unsafe fn SetSP(
                &mut self,
                typefilter_impl_sp: *const root::lldb::TypeFilterImplSP,
            ) {
                SBTypeFilter_SetSP(self, typefilter_impl_sp)
            }
            #[inline]
            pub unsafe fn CopyOnWrite_Impl(&mut self) -> bool {
                SBTypeFilter_CopyOnWrite_Impl(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeFilter_SBTypeFilter(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(options: u32) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeFilter_SBTypeFilter1(__bindgen_tmp.as_mut_ptr(), options);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(rhs: *const root::lldb::SBTypeFilter) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeFilter_SBTypeFilter2(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(arg1: *const root::lldb::TypeFilterImplSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeFilter_SBTypeFilter3(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBTypeFilter_SBTypeFilter_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTypeFormat {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        pub const SBTypeFormat_Type_eTypeKeepSame: root::lldb::SBTypeFormat_Type = 0;
        pub const SBTypeFormat_Type_eTypeFormat: root::lldb::SBTypeFormat_Type = 1;
        pub const SBTypeFormat_Type_eTypeEnum: root::lldb::SBTypeFormat_Type = 2;
        pub type SBTypeFormat_Type = ::std::os::raw::c_int;
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb12SBTypeFormat7IsValidEv"]
            pub fn SBTypeFormat_IsValid(this: *const root::lldb::SBTypeFormat) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormat9GetFormatEv"]
            pub fn SBTypeFormat_GetFormat(
                this: *mut root::lldb::SBTypeFormat,
            ) -> root::lldb::Format;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormat11GetTypeNameEv"]
            pub fn SBTypeFormat_GetTypeName(
                this: *mut root::lldb::SBTypeFormat,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormat10GetOptionsEv"]
            pub fn SBTypeFormat_GetOptions(this: *mut root::lldb::SBTypeFormat) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormat9SetFormatENS_6FormatE"]
            pub fn SBTypeFormat_SetFormat(
                this: *mut root::lldb::SBTypeFormat,
                arg1: root::lldb::Format,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormat11SetTypeNameEPKc"]
            pub fn SBTypeFormat_SetTypeName(
                this: *mut root::lldb::SBTypeFormat,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormat10SetOptionsEj"]
            pub fn SBTypeFormat_SetOptions(this: *mut root::lldb::SBTypeFormat, arg1: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormat14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE"]
            pub fn SBTypeFormat_GetDescription(
                this: *mut root::lldb::SBTypeFormat,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormat9IsEqualToERS0_"]
            pub fn SBTypeFormat_IsEqualTo(
                this: *mut root::lldb::SBTypeFormat,
                rhs: *mut root::lldb::SBTypeFormat,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormat5GetSPEv"]
            pub fn SBTypeFormat_GetSP(
                this: *mut root::lldb::SBTypeFormat,
            ) -> root::lldb::TypeFormatImplSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormat5SetSPERKSt10shared_ptrIN12lldb_private14TypeFormatImplEE"]
            pub fn SBTypeFormat_SetSP(
                this: *mut root::lldb::SBTypeFormat,
                typeformat_impl_sp: *const root::lldb::TypeFormatImplSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormat16CopyOnWrite_ImplENS0_4TypeE"]
            pub fn SBTypeFormat_CopyOnWrite_Impl(
                this: *mut root::lldb::SBTypeFormat,
                arg1: root::lldb::SBTypeFormat_Type,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormatC1Ev"]
            pub fn SBTypeFormat_SBTypeFormat(this: *mut root::lldb::SBTypeFormat);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormatC1ENS_6FormatEj"]
            pub fn SBTypeFormat_SBTypeFormat1(
                this: *mut root::lldb::SBTypeFormat,
                format: root::lldb::Format,
                options: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormatC1EPKcj"]
            pub fn SBTypeFormat_SBTypeFormat2(
                this: *mut root::lldb::SBTypeFormat,
                type_: *const ::std::os::raw::c_char,
                options: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormatC1ERKS0_"]
            pub fn SBTypeFormat_SBTypeFormat3(
                this: *mut root::lldb::SBTypeFormat,
                rhs: *const root::lldb::SBTypeFormat,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormatC1ERKSt10shared_ptrIN12lldb_private14TypeFormatImplEE"]
            pub fn SBTypeFormat_SBTypeFormat4(
                this: *mut root::lldb::SBTypeFormat,
                arg1: *const root::lldb::TypeFormatImplSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb12SBTypeFormatD1Ev"]
            pub fn SBTypeFormat_SBTypeFormat_destructor(this: *mut root::lldb::SBTypeFormat);
        }
        impl SBTypeFormat {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBTypeFormat_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetFormat(&mut self) -> root::lldb::Format {
                SBTypeFormat_GetFormat(self)
            }
            #[inline]
            pub unsafe fn GetTypeName(&mut self) -> *const ::std::os::raw::c_char {
                SBTypeFormat_GetTypeName(self)
            }
            #[inline]
            pub unsafe fn GetOptions(&mut self) -> u32 {
                SBTypeFormat_GetOptions(self)
            }
            #[inline]
            pub unsafe fn SetFormat(&mut self, arg1: root::lldb::Format) {
                SBTypeFormat_SetFormat(self, arg1)
            }
            #[inline]
            pub unsafe fn SetTypeName(&mut self, arg1: *const ::std::os::raw::c_char) {
                SBTypeFormat_SetTypeName(self, arg1)
            }
            #[inline]
            pub unsafe fn SetOptions(&mut self, arg1: u32) {
                SBTypeFormat_SetOptions(self, arg1)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool {
                SBTypeFormat_GetDescription(self, description, description_level)
            }
            #[inline]
            pub unsafe fn IsEqualTo(&mut self, rhs: *mut root::lldb::SBTypeFormat) -> bool {
                SBTypeFormat_IsEqualTo(self, rhs)
            }
            #[inline]
            pub unsafe fn GetSP(&mut self) -> root::lldb::TypeFormatImplSP {
                SBTypeFormat_GetSP(self)
            }
            #[inline]
            pub unsafe fn SetSP(
                &mut self,
                typeformat_impl_sp: *const root::lldb::TypeFormatImplSP,
            ) {
                SBTypeFormat_SetSP(self, typeformat_impl_sp)
            }
            #[inline]
            pub unsafe fn CopyOnWrite_Impl(&mut self, arg1: root::lldb::SBTypeFormat_Type) -> bool {
                SBTypeFormat_CopyOnWrite_Impl(self, arg1)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeFormat_SBTypeFormat(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(format: root::lldb::Format, options: u32) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeFormat_SBTypeFormat1(__bindgen_tmp.as_mut_ptr(), format, options);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(type_: *const ::std::os::raw::c_char, options: u32) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeFormat_SBTypeFormat2(__bindgen_tmp.as_mut_ptr(), type_, options);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(rhs: *const root::lldb::SBTypeFormat) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeFormat_SBTypeFormat3(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(arg1: *const root::lldb::TypeFormatImplSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeFormat_SBTypeFormat4(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBTypeFormat_SBTypeFormat_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTypeNameSpecifier {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb19SBTypeNameSpecifier7IsValidEv"]
            pub fn SBTypeNameSpecifier_IsValid(
                this: *const root::lldb::SBTypeNameSpecifier,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifier7GetNameEv"]
            pub fn SBTypeNameSpecifier_GetName(
                this: *mut root::lldb::SBTypeNameSpecifier,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifier7GetTypeEv"]
            pub fn SBTypeNameSpecifier_GetType(
                this: *mut root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::SBType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifier12GetMatchTypeEv"]
            pub fn SBTypeNameSpecifier_GetMatchType(
                this: *mut root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::FormatterMatchType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifier7IsRegexEv"]
            pub fn SBTypeNameSpecifier_IsRegex(this: *mut root::lldb::SBTypeNameSpecifier) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifier14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE"]
            pub fn SBTypeNameSpecifier_GetDescription(
                this: *mut root::lldb::SBTypeNameSpecifier,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifier9IsEqualToERS0_"]
            pub fn SBTypeNameSpecifier_IsEqualTo(
                this: *mut root::lldb::SBTypeNameSpecifier,
                rhs: *mut root::lldb::SBTypeNameSpecifier,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifier5GetSPEv"]
            pub fn SBTypeNameSpecifier_GetSP(
                this: *mut root::lldb::SBTypeNameSpecifier,
            ) -> root::lldb::TypeNameSpecifierImplSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifier5SetSPERKSt10shared_ptrIN12lldb_private21TypeNameSpecifierImplEE"]
            pub fn SBTypeNameSpecifier_SetSP(
                this: *mut root::lldb::SBTypeNameSpecifier,
                type_namespec_sp: *const root::lldb::TypeNameSpecifierImplSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifierC1Ev"]
            pub fn SBTypeNameSpecifier_SBTypeNameSpecifier(
                this: *mut root::lldb::SBTypeNameSpecifier,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifierC1EPKcb"]
            pub fn SBTypeNameSpecifier_SBTypeNameSpecifier1(
                this: *mut root::lldb::SBTypeNameSpecifier,
                name: *const ::std::os::raw::c_char,
                is_regex: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifierC1EPKcNS_18FormatterMatchTypeE"]
            pub fn SBTypeNameSpecifier_SBTypeNameSpecifier2(
                this: *mut root::lldb::SBTypeNameSpecifier,
                name: *const ::std::os::raw::c_char,
                match_type: root::lldb::FormatterMatchType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifierC1ENS_6SBTypeE"]
            pub fn SBTypeNameSpecifier_SBTypeNameSpecifier3(
                this: *mut root::lldb::SBTypeNameSpecifier,
                type_: root::lldb::SBType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifierC1ERKS0_"]
            pub fn SBTypeNameSpecifier_SBTypeNameSpecifier4(
                this: *mut root::lldb::SBTypeNameSpecifier,
                rhs: *const root::lldb::SBTypeNameSpecifier,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifierC1ERKSt10shared_ptrIN12lldb_private21TypeNameSpecifierImplEE"]
            pub fn SBTypeNameSpecifier_SBTypeNameSpecifier5(
                this: *mut root::lldb::SBTypeNameSpecifier,
                arg1: *const root::lldb::TypeNameSpecifierImplSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb19SBTypeNameSpecifierD1Ev"]
            pub fn SBTypeNameSpecifier_SBTypeNameSpecifier_destructor(
                this: *mut root::lldb::SBTypeNameSpecifier,
            );
        }
        impl SBTypeNameSpecifier {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBTypeNameSpecifier_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetName(&mut self) -> *const ::std::os::raw::c_char {
                SBTypeNameSpecifier_GetName(self)
            }
            #[inline]
            pub unsafe fn GetType(&mut self) -> root::lldb::SBType {
                SBTypeNameSpecifier_GetType(self)
            }
            #[inline]
            pub unsafe fn GetMatchType(&mut self) -> root::lldb::FormatterMatchType {
                SBTypeNameSpecifier_GetMatchType(self)
            }
            #[inline]
            pub unsafe fn IsRegex(&mut self) -> bool {
                SBTypeNameSpecifier_IsRegex(self)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool {
                SBTypeNameSpecifier_GetDescription(self, description, description_level)
            }
            #[inline]
            pub unsafe fn IsEqualTo(&mut self, rhs: *mut root::lldb::SBTypeNameSpecifier) -> bool {
                SBTypeNameSpecifier_IsEqualTo(self, rhs)
            }
            #[inline]
            pub unsafe fn GetSP(&mut self) -> root::lldb::TypeNameSpecifierImplSP {
                SBTypeNameSpecifier_GetSP(self)
            }
            #[inline]
            pub unsafe fn SetSP(
                &mut self,
                type_namespec_sp: *const root::lldb::TypeNameSpecifierImplSP,
            ) {
                SBTypeNameSpecifier_SetSP(self, type_namespec_sp)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeNameSpecifier_SBTypeNameSpecifier(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(name: *const ::std::os::raw::c_char, is_regex: bool) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeNameSpecifier_SBTypeNameSpecifier1(
                    __bindgen_tmp.as_mut_ptr(),
                    name,
                    is_regex,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                name: *const ::std::os::raw::c_char,
                match_type: root::lldb::FormatterMatchType,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeNameSpecifier_SBTypeNameSpecifier2(
                    __bindgen_tmp.as_mut_ptr(),
                    name,
                    match_type,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(type_: root::lldb::SBType) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeNameSpecifier_SBTypeNameSpecifier3(__bindgen_tmp.as_mut_ptr(), type_);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(rhs: *const root::lldb::SBTypeNameSpecifier) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeNameSpecifier_SBTypeNameSpecifier4(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new5(arg1: *const root::lldb::TypeNameSpecifierImplSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeNameSpecifier_SBTypeNameSpecifier5(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBTypeNameSpecifier_SBTypeNameSpecifier_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTypeSummaryOptions {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeSummaryOptions7IsValidEv"]
            pub fn SBTypeSummaryOptions_IsValid(
                this: *mut root::lldb::SBTypeSummaryOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeSummaryOptions11GetLanguageEv"]
            pub fn SBTypeSummaryOptions_GetLanguage(
                this: *mut root::lldb::SBTypeSummaryOptions,
            ) -> root::lldb::LanguageType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeSummaryOptions10GetCappingEv"]
            pub fn SBTypeSummaryOptions_GetCapping(
                this: *mut root::lldb::SBTypeSummaryOptions,
            ) -> root::lldb::TypeSummaryCapping;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeSummaryOptions11SetLanguageENS_12LanguageTypeE"]
            pub fn SBTypeSummaryOptions_SetLanguage(
                this: *mut root::lldb::SBTypeSummaryOptions,
                arg1: root::lldb::LanguageType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeSummaryOptions10SetCappingENS_18TypeSummaryCappingE"]
            pub fn SBTypeSummaryOptions_SetCapping(
                this: *mut root::lldb::SBTypeSummaryOptions,
                arg1: root::lldb::TypeSummaryCapping,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeSummaryOptions3getEv"]
            pub fn SBTypeSummaryOptions_get(
                this: *mut root::lldb::SBTypeSummaryOptions,
            ) -> *mut root::lldb_private::TypeSummaryOptions;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeSummaryOptions3refEv"]
            pub fn SBTypeSummaryOptions_ref(
                this: *mut root::lldb::SBTypeSummaryOptions,
            ) -> *mut root::lldb_private::TypeSummaryOptions;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb20SBTypeSummaryOptions3refEv"]
            pub fn SBTypeSummaryOptions_ref1(
                this: *const root::lldb::SBTypeSummaryOptions,
            ) -> *const root::lldb_private::TypeSummaryOptions;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeSummaryOptionsC1Ev"]
            pub fn SBTypeSummaryOptions_SBTypeSummaryOptions(
                this: *mut root::lldb::SBTypeSummaryOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeSummaryOptionsC1ERKS0_"]
            pub fn SBTypeSummaryOptions_SBTypeSummaryOptions1(
                this: *mut root::lldb::SBTypeSummaryOptions,
                rhs: *const root::lldb::SBTypeSummaryOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeSummaryOptionsC1ERKN12lldb_private18TypeSummaryOptionsE"]
            pub fn SBTypeSummaryOptions_SBTypeSummaryOptions2(
                this: *mut root::lldb::SBTypeSummaryOptions,
                lldb_object: *const root::lldb_private::TypeSummaryOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb20SBTypeSummaryOptionsD1Ev"]
            pub fn SBTypeSummaryOptions_SBTypeSummaryOptions_destructor(
                this: *mut root::lldb::SBTypeSummaryOptions,
            );
        }
        impl SBTypeSummaryOptions {
            #[inline]
            pub unsafe fn IsValid(&mut self) -> bool {
                SBTypeSummaryOptions_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetLanguage(&mut self) -> root::lldb::LanguageType {
                SBTypeSummaryOptions_GetLanguage(self)
            }
            #[inline]
            pub unsafe fn GetCapping(&mut self) -> root::lldb::TypeSummaryCapping {
                SBTypeSummaryOptions_GetCapping(self)
            }
            #[inline]
            pub unsafe fn SetLanguage(&mut self, arg1: root::lldb::LanguageType) {
                SBTypeSummaryOptions_SetLanguage(self, arg1)
            }
            #[inline]
            pub unsafe fn SetCapping(&mut self, arg1: root::lldb::TypeSummaryCapping) {
                SBTypeSummaryOptions_SetCapping(self, arg1)
            }
            #[inline]
            pub unsafe fn get(&mut self) -> *mut root::lldb_private::TypeSummaryOptions {
                SBTypeSummaryOptions_get(self)
            }
            #[inline]
            pub unsafe fn ref_(&mut self) -> *mut root::lldb_private::TypeSummaryOptions {
                SBTypeSummaryOptions_ref(self)
            }
            #[inline]
            pub unsafe fn ref1(&self) -> *const root::lldb_private::TypeSummaryOptions {
                SBTypeSummaryOptions_ref1(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeSummaryOptions_SBTypeSummaryOptions(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBTypeSummaryOptions) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeSummaryOptions_SBTypeSummaryOptions1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(lldb_object: *const root::lldb_private::TypeSummaryOptions) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeSummaryOptions_SBTypeSummaryOptions2(__bindgen_tmp.as_mut_ptr(), lldb_object);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBTypeSummaryOptions_SBTypeSummaryOptions_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTypeSummary {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        pub type SBTypeSummary_FormatCallback = u64;
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary23CreateWithSummaryStringEPKcj"]
            pub fn SBTypeSummary_CreateWithSummaryString(
                data: *const ::std::os::raw::c_char,
                options: u32,
            ) -> root::lldb::SBTypeSummary;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary22CreateWithFunctionNameEPKcj"]
            pub fn SBTypeSummary_CreateWithFunctionName(
                data: *const ::std::os::raw::c_char,
                options: u32,
            ) -> root::lldb::SBTypeSummary;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary20CreateWithScriptCodeEPKcj"]
            pub fn SBTypeSummary_CreateWithScriptCode(
                data: *const ::std::os::raw::c_char,
                options: u32,
            ) -> root::lldb::SBTypeSummary;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary18CreateWithCallbackEPFbNS_7SBValueENS_20SBTypeSummaryOptionsERNS_8SBStreamEEjPKc"]
            pub fn SBTypeSummary_CreateWithCallback(
                cb: root::lldb::SBTypeSummary_FormatCallback,
                options: u32,
                description: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTypeSummary;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBTypeSummary7IsValidEv"]
            pub fn SBTypeSummary_IsValid(this: *const root::lldb::SBTypeSummary) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary14IsFunctionCodeEv"]
            pub fn SBTypeSummary_IsFunctionCode(this: *mut root::lldb::SBTypeSummary) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary14IsFunctionNameEv"]
            pub fn SBTypeSummary_IsFunctionName(this: *mut root::lldb::SBTypeSummary) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary15IsSummaryStringEv"]
            pub fn SBTypeSummary_IsSummaryString(this: *mut root::lldb::SBTypeSummary) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary7GetDataEv"]
            pub fn SBTypeSummary_GetData(
                this: *mut root::lldb::SBTypeSummary,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary16SetSummaryStringEPKc"]
            pub fn SBTypeSummary_SetSummaryString(
                this: *mut root::lldb::SBTypeSummary,
                data: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary15SetFunctionNameEPKc"]
            pub fn SBTypeSummary_SetFunctionName(
                this: *mut root::lldb::SBTypeSummary,
                data: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary15SetFunctionCodeEPKc"]
            pub fn SBTypeSummary_SetFunctionCode(
                this: *mut root::lldb::SBTypeSummary,
                data: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary10GetOptionsEv"]
            pub fn SBTypeSummary_GetOptions(this: *mut root::lldb::SBTypeSummary) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary10SetOptionsEj"]
            pub fn SBTypeSummary_SetOptions(this: *mut root::lldb::SBTypeSummary, arg1: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE"]
            pub fn SBTypeSummary_GetDescription(
                this: *mut root::lldb::SBTypeSummary,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary14DoesPrintValueENS_7SBValueE"]
            pub fn SBTypeSummary_DoesPrintValue(
                this: *mut root::lldb::SBTypeSummary,
                value: root::lldb::SBValue,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary9IsEqualToERS0_"]
            pub fn SBTypeSummary_IsEqualTo(
                this: *mut root::lldb::SBTypeSummary,
                rhs: *mut root::lldb::SBTypeSummary,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary5GetSPEv"]
            pub fn SBTypeSummary_GetSP(
                this: *mut root::lldb::SBTypeSummary,
            ) -> root::lldb::TypeSummaryImplSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary5SetSPERKSt10shared_ptrIN12lldb_private15TypeSummaryImplEE"]
            pub fn SBTypeSummary_SetSP(
                this: *mut root::lldb::SBTypeSummary,
                typefilter_impl_sp: *const root::lldb::TypeSummaryImplSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary16CopyOnWrite_ImplEv"]
            pub fn SBTypeSummary_CopyOnWrite_Impl(this: *mut root::lldb::SBTypeSummary) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummary17ChangeSummaryTypeEb"]
            pub fn SBTypeSummary_ChangeSummaryType(
                this: *mut root::lldb::SBTypeSummary,
                want_script: bool,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummaryC1Ev"]
            pub fn SBTypeSummary_SBTypeSummary(this: *mut root::lldb::SBTypeSummary);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummaryC1ERKS0_"]
            pub fn SBTypeSummary_SBTypeSummary1(
                this: *mut root::lldb::SBTypeSummary,
                rhs: *const root::lldb::SBTypeSummary,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummaryC1ERKSt10shared_ptrIN12lldb_private15TypeSummaryImplEE"]
            pub fn SBTypeSummary_SBTypeSummary2(
                this: *mut root::lldb::SBTypeSummary,
                arg1: *const root::lldb::TypeSummaryImplSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBTypeSummaryD1Ev"]
            pub fn SBTypeSummary_SBTypeSummary_destructor(this: *mut root::lldb::SBTypeSummary);
        }
        impl SBTypeSummary {
            #[inline]
            pub unsafe fn CreateWithSummaryString(
                data: *const ::std::os::raw::c_char,
                options: u32,
            ) -> root::lldb::SBTypeSummary {
                SBTypeSummary_CreateWithSummaryString(data, options)
            }
            #[inline]
            pub unsafe fn CreateWithFunctionName(
                data: *const ::std::os::raw::c_char,
                options: u32,
            ) -> root::lldb::SBTypeSummary {
                SBTypeSummary_CreateWithFunctionName(data, options)
            }
            #[inline]
            pub unsafe fn CreateWithScriptCode(
                data: *const ::std::os::raw::c_char,
                options: u32,
            ) -> root::lldb::SBTypeSummary {
                SBTypeSummary_CreateWithScriptCode(data, options)
            }
            #[inline]
            pub unsafe fn CreateWithCallback(
                cb: root::lldb::SBTypeSummary_FormatCallback,
                options: u32,
                description: *const ::std::os::raw::c_char,
            ) -> root::lldb::SBTypeSummary {
                SBTypeSummary_CreateWithCallback(cb, options, description)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBTypeSummary_IsValid(self)
            }
            #[inline]
            pub unsafe fn IsFunctionCode(&mut self) -> bool {
                SBTypeSummary_IsFunctionCode(self)
            }
            #[inline]
            pub unsafe fn IsFunctionName(&mut self) -> bool {
                SBTypeSummary_IsFunctionName(self)
            }
            #[inline]
            pub unsafe fn IsSummaryString(&mut self) -> bool {
                SBTypeSummary_IsSummaryString(self)
            }
            #[inline]
            pub unsafe fn GetData(&mut self) -> *const ::std::os::raw::c_char {
                SBTypeSummary_GetData(self)
            }
            #[inline]
            pub unsafe fn SetSummaryString(&mut self, data: *const ::std::os::raw::c_char) {
                SBTypeSummary_SetSummaryString(self, data)
            }
            #[inline]
            pub unsafe fn SetFunctionName(&mut self, data: *const ::std::os::raw::c_char) {
                SBTypeSummary_SetFunctionName(self, data)
            }
            #[inline]
            pub unsafe fn SetFunctionCode(&mut self, data: *const ::std::os::raw::c_char) {
                SBTypeSummary_SetFunctionCode(self, data)
            }
            #[inline]
            pub unsafe fn GetOptions(&mut self) -> u32 {
                SBTypeSummary_GetOptions(self)
            }
            #[inline]
            pub unsafe fn SetOptions(&mut self, arg1: u32) {
                SBTypeSummary_SetOptions(self, arg1)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool {
                SBTypeSummary_GetDescription(self, description, description_level)
            }
            #[inline]
            pub unsafe fn DoesPrintValue(&mut self, value: root::lldb::SBValue) -> bool {
                SBTypeSummary_DoesPrintValue(self, value)
            }
            #[inline]
            pub unsafe fn IsEqualTo(&mut self, rhs: *mut root::lldb::SBTypeSummary) -> bool {
                SBTypeSummary_IsEqualTo(self, rhs)
            }
            #[inline]
            pub unsafe fn GetSP(&mut self) -> root::lldb::TypeSummaryImplSP {
                SBTypeSummary_GetSP(self)
            }
            #[inline]
            pub unsafe fn SetSP(
                &mut self,
                typefilter_impl_sp: *const root::lldb::TypeSummaryImplSP,
            ) {
                SBTypeSummary_SetSP(self, typefilter_impl_sp)
            }
            #[inline]
            pub unsafe fn CopyOnWrite_Impl(&mut self) -> bool {
                SBTypeSummary_CopyOnWrite_Impl(self)
            }
            #[inline]
            pub unsafe fn ChangeSummaryType(&mut self, want_script: bool) -> bool {
                SBTypeSummary_ChangeSummaryType(self, want_script)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeSummary_SBTypeSummary(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBTypeSummary) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeSummary_SBTypeSummary1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(arg1: *const root::lldb::TypeSummaryImplSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeSummary_SBTypeSummary2(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBTypeSummary_SBTypeSummary_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBTypeSynthetic {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSynthetic19CreateWithClassNameEPKcj"]
            pub fn SBTypeSynthetic_CreateWithClassName(
                data: *const ::std::os::raw::c_char,
                options: u32,
            ) -> root::lldb::SBTypeSynthetic;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSynthetic20CreateWithScriptCodeEPKcj"]
            pub fn SBTypeSynthetic_CreateWithScriptCode(
                data: *const ::std::os::raw::c_char,
                options: u32,
            ) -> root::lldb::SBTypeSynthetic;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb15SBTypeSynthetic7IsValidEv"]
            pub fn SBTypeSynthetic_IsValid(this: *const root::lldb::SBTypeSynthetic) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSynthetic11IsClassCodeEv"]
            pub fn SBTypeSynthetic_IsClassCode(this: *mut root::lldb::SBTypeSynthetic) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSynthetic11IsClassNameEv"]
            pub fn SBTypeSynthetic_IsClassName(this: *mut root::lldb::SBTypeSynthetic) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSynthetic7GetDataEv"]
            pub fn SBTypeSynthetic_GetData(
                this: *mut root::lldb::SBTypeSynthetic,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSynthetic12SetClassNameEPKc"]
            pub fn SBTypeSynthetic_SetClassName(
                this: *mut root::lldb::SBTypeSynthetic,
                data: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSynthetic12SetClassCodeEPKc"]
            pub fn SBTypeSynthetic_SetClassCode(
                this: *mut root::lldb::SBTypeSynthetic,
                data: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSynthetic10GetOptionsEv"]
            pub fn SBTypeSynthetic_GetOptions(this: *mut root::lldb::SBTypeSynthetic) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSynthetic10SetOptionsEj"]
            pub fn SBTypeSynthetic_SetOptions(this: *mut root::lldb::SBTypeSynthetic, arg1: u32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSynthetic14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE"]
            pub fn SBTypeSynthetic_GetDescription(
                this: *mut root::lldb::SBTypeSynthetic,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSynthetic9IsEqualToERS0_"]
            pub fn SBTypeSynthetic_IsEqualTo(
                this: *mut root::lldb::SBTypeSynthetic,
                rhs: *mut root::lldb::SBTypeSynthetic,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSynthetic5GetSPEv"]
            pub fn SBTypeSynthetic_GetSP(
                this: *mut root::lldb::SBTypeSynthetic,
            ) -> root::lldb::ScriptedSyntheticChildrenSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSynthetic5SetSPERKSt10shared_ptrIN12lldb_private25ScriptedSyntheticChildrenEE"]
            pub fn SBTypeSynthetic_SetSP(
                this: *mut root::lldb::SBTypeSynthetic,
                typefilter_impl_sp: *const root::lldb::ScriptedSyntheticChildrenSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSynthetic16CopyOnWrite_ImplEv"]
            pub fn SBTypeSynthetic_CopyOnWrite_Impl(this: *mut root::lldb::SBTypeSynthetic)
                -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSyntheticC1Ev"]
            pub fn SBTypeSynthetic_SBTypeSynthetic(this: *mut root::lldb::SBTypeSynthetic);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSyntheticC1ERKS0_"]
            pub fn SBTypeSynthetic_SBTypeSynthetic1(
                this: *mut root::lldb::SBTypeSynthetic,
                rhs: *const root::lldb::SBTypeSynthetic,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSyntheticC1ERKSt10shared_ptrIN12lldb_private25ScriptedSyntheticChildrenEE"]
            pub fn SBTypeSynthetic_SBTypeSynthetic2(
                this: *mut root::lldb::SBTypeSynthetic,
                arg1: *const root::lldb::ScriptedSyntheticChildrenSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb15SBTypeSyntheticD1Ev"]
            pub fn SBTypeSynthetic_SBTypeSynthetic_destructor(
                this: *mut root::lldb::SBTypeSynthetic,
            );
        }
        impl SBTypeSynthetic {
            #[inline]
            pub unsafe fn CreateWithClassName(
                data: *const ::std::os::raw::c_char,
                options: u32,
            ) -> root::lldb::SBTypeSynthetic {
                SBTypeSynthetic_CreateWithClassName(data, options)
            }
            #[inline]
            pub unsafe fn CreateWithScriptCode(
                data: *const ::std::os::raw::c_char,
                options: u32,
            ) -> root::lldb::SBTypeSynthetic {
                SBTypeSynthetic_CreateWithScriptCode(data, options)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBTypeSynthetic_IsValid(self)
            }
            #[inline]
            pub unsafe fn IsClassCode(&mut self) -> bool {
                SBTypeSynthetic_IsClassCode(self)
            }
            #[inline]
            pub unsafe fn IsClassName(&mut self) -> bool {
                SBTypeSynthetic_IsClassName(self)
            }
            #[inline]
            pub unsafe fn GetData(&mut self) -> *const ::std::os::raw::c_char {
                SBTypeSynthetic_GetData(self)
            }
            #[inline]
            pub unsafe fn SetClassName(&mut self, data: *const ::std::os::raw::c_char) {
                SBTypeSynthetic_SetClassName(self, data)
            }
            #[inline]
            pub unsafe fn SetClassCode(&mut self, data: *const ::std::os::raw::c_char) {
                SBTypeSynthetic_SetClassCode(self, data)
            }
            #[inline]
            pub unsafe fn GetOptions(&mut self) -> u32 {
                SBTypeSynthetic_GetOptions(self)
            }
            #[inline]
            pub unsafe fn SetOptions(&mut self, arg1: u32) {
                SBTypeSynthetic_SetOptions(self, arg1)
            }
            #[inline]
            pub unsafe fn GetDescription(
                &mut self,
                description: *mut root::lldb::SBStream,
                description_level: root::lldb::DescriptionLevel,
            ) -> bool {
                SBTypeSynthetic_GetDescription(self, description, description_level)
            }
            #[inline]
            pub unsafe fn IsEqualTo(&mut self, rhs: *mut root::lldb::SBTypeSynthetic) -> bool {
                SBTypeSynthetic_IsEqualTo(self, rhs)
            }
            #[inline]
            pub unsafe fn GetSP(&mut self) -> root::lldb::ScriptedSyntheticChildrenSP {
                SBTypeSynthetic_GetSP(self)
            }
            #[inline]
            pub unsafe fn SetSP(
                &mut self,
                typefilter_impl_sp: *const root::lldb::ScriptedSyntheticChildrenSP,
            ) {
                SBTypeSynthetic_SetSP(self, typefilter_impl_sp)
            }
            #[inline]
            pub unsafe fn CopyOnWrite_Impl(&mut self) -> bool {
                SBTypeSynthetic_CopyOnWrite_Impl(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeSynthetic_SBTypeSynthetic(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBTypeSynthetic) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeSynthetic_SBTypeSynthetic1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(arg1: *const root::lldb::ScriptedSyntheticChildrenSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBTypeSynthetic_SBTypeSynthetic2(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBTypeSynthetic_SBTypeSynthetic_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBUnixSignals {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBUnixSignals5ClearEv"]
            pub fn SBUnixSignals_Clear(this: *mut root::lldb::SBUnixSignals);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBUnixSignals7IsValidEv"]
            pub fn SBUnixSignals_IsValid(this: *const root::lldb::SBUnixSignals) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBUnixSignals18GetSignalAsCStringEi"]
            pub fn SBUnixSignals_GetSignalAsCString(
                this: *const root::lldb::SBUnixSignals,
                signo: i32,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBUnixSignals23GetSignalNumberFromNameEPKc"]
            pub fn SBUnixSignals_GetSignalNumberFromName(
                this: *const root::lldb::SBUnixSignals,
                name: *const ::std::os::raw::c_char,
            ) -> i32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBUnixSignals17GetShouldSuppressEi"]
            pub fn SBUnixSignals_GetShouldSuppress(
                this: *const root::lldb::SBUnixSignals,
                signo: i32,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBUnixSignals17SetShouldSuppressEib"]
            pub fn SBUnixSignals_SetShouldSuppress(
                this: *mut root::lldb::SBUnixSignals,
                signo: i32,
                value: bool,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBUnixSignals13GetShouldStopEi"]
            pub fn SBUnixSignals_GetShouldStop(
                this: *const root::lldb::SBUnixSignals,
                signo: i32,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBUnixSignals13SetShouldStopEib"]
            pub fn SBUnixSignals_SetShouldStop(
                this: *mut root::lldb::SBUnixSignals,
                signo: i32,
                value: bool,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBUnixSignals15GetShouldNotifyEi"]
            pub fn SBUnixSignals_GetShouldNotify(
                this: *const root::lldb::SBUnixSignals,
                signo: i32,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBUnixSignals15SetShouldNotifyEib"]
            pub fn SBUnixSignals_SetShouldNotify(
                this: *mut root::lldb::SBUnixSignals,
                signo: i32,
                value: bool,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBUnixSignals13GetNumSignalsEv"]
            pub fn SBUnixSignals_GetNumSignals(this: *const root::lldb::SBUnixSignals) -> i32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBUnixSignals16GetSignalAtIndexEi"]
            pub fn SBUnixSignals_GetSignalAtIndex(
                this: *const root::lldb::SBUnixSignals,
                index: i32,
            ) -> i32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb13SBUnixSignals5GetSPEv"]
            pub fn SBUnixSignals_GetSP(
                this: *const root::lldb::SBUnixSignals,
            ) -> root::lldb::UnixSignalsSP;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBUnixSignals5SetSPERKSt10shared_ptrIN12lldb_private11UnixSignalsEE"]
            pub fn SBUnixSignals_SetSP(
                this: *mut root::lldb::SBUnixSignals,
                signals_sp: *const root::lldb::UnixSignalsSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBUnixSignalsC1Ev"]
            pub fn SBUnixSignals_SBUnixSignals(this: *mut root::lldb::SBUnixSignals);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBUnixSignalsC1ERKS0_"]
            pub fn SBUnixSignals_SBUnixSignals1(
                this: *mut root::lldb::SBUnixSignals,
                rhs: *const root::lldb::SBUnixSignals,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBUnixSignalsC1ERSt10shared_ptrIN12lldb_private7ProcessEE"]
            pub fn SBUnixSignals_SBUnixSignals2(
                this: *mut root::lldb::SBUnixSignals,
                process_sp: *mut root::lldb::ProcessSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBUnixSignalsC1ERSt10shared_ptrIN12lldb_private8PlatformEE"]
            pub fn SBUnixSignals_SBUnixSignals3(
                this: *mut root::lldb::SBUnixSignals,
                platform_sp: *mut root::lldb::PlatformSP,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb13SBUnixSignalsD1Ev"]
            pub fn SBUnixSignals_SBUnixSignals_destructor(this: *mut root::lldb::SBUnixSignals);
        }
        impl SBUnixSignals {
            #[inline]
            pub unsafe fn Clear(&mut self) {
                SBUnixSignals_Clear(self)
            }
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBUnixSignals_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetSignalAsCString(&self, signo: i32) -> *const ::std::os::raw::c_char {
                SBUnixSignals_GetSignalAsCString(self, signo)
            }
            #[inline]
            pub unsafe fn GetSignalNumberFromName(
                &self,
                name: *const ::std::os::raw::c_char,
            ) -> i32 {
                SBUnixSignals_GetSignalNumberFromName(self, name)
            }
            #[inline]
            pub unsafe fn GetShouldSuppress(&self, signo: i32) -> bool {
                SBUnixSignals_GetShouldSuppress(self, signo)
            }
            #[inline]
            pub unsafe fn SetShouldSuppress(&mut self, signo: i32, value: bool) -> bool {
                SBUnixSignals_SetShouldSuppress(self, signo, value)
            }
            #[inline]
            pub unsafe fn GetShouldStop(&self, signo: i32) -> bool {
                SBUnixSignals_GetShouldStop(self, signo)
            }
            #[inline]
            pub unsafe fn SetShouldStop(&mut self, signo: i32, value: bool) -> bool {
                SBUnixSignals_SetShouldStop(self, signo, value)
            }
            #[inline]
            pub unsafe fn GetShouldNotify(&self, signo: i32) -> bool {
                SBUnixSignals_GetShouldNotify(self, signo)
            }
            #[inline]
            pub unsafe fn SetShouldNotify(&mut self, signo: i32, value: bool) -> bool {
                SBUnixSignals_SetShouldNotify(self, signo, value)
            }
            #[inline]
            pub unsafe fn GetNumSignals(&self) -> i32 {
                SBUnixSignals_GetNumSignals(self)
            }
            #[inline]
            pub unsafe fn GetSignalAtIndex(&self, index: i32) -> i32 {
                SBUnixSignals_GetSignalAtIndex(self, index)
            }
            #[inline]
            pub unsafe fn GetSP(&self) -> root::lldb::UnixSignalsSP {
                SBUnixSignals_GetSP(self)
            }
            #[inline]
            pub unsafe fn SetSP(&mut self, signals_sp: *const root::lldb::UnixSignalsSP) {
                SBUnixSignals_SetSP(self, signals_sp)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBUnixSignals_SBUnixSignals(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(rhs: *const root::lldb::SBUnixSignals) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBUnixSignals_SBUnixSignals1(__bindgen_tmp.as_mut_ptr(), rhs);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(process_sp: *mut root::lldb::ProcessSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBUnixSignals_SBUnixSignals2(__bindgen_tmp.as_mut_ptr(), process_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(platform_sp: *mut root::lldb::PlatformSP) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBUnixSignals_SBUnixSignals3(__bindgen_tmp.as_mut_ptr(), platform_sp);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBUnixSignals_SBUnixSignals_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug)]
        pub struct SBVariablesOptions {
            pub _bindgen_phantom: [u64; 3usize], pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBVariablesOptions7IsValidEv"]
            pub fn SBVariablesOptions_IsValid(this: *const root::lldb::SBVariablesOptions) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBVariablesOptions19GetIncludeArgumentsEv"]
            pub fn SBVariablesOptions_GetIncludeArguments(
                this: *const root::lldb::SBVariablesOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBVariablesOptions19SetIncludeArgumentsEb"]
            pub fn SBVariablesOptions_SetIncludeArguments(
                this: *mut root::lldb::SBVariablesOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBVariablesOptions29GetIncludeRecognizedArgumentsERKNS_8SBTargetE"]
            pub fn SBVariablesOptions_GetIncludeRecognizedArguments(
                this: *const root::lldb::SBVariablesOptions,
                arg1: *const root::lldb::SBTarget,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBVariablesOptions29SetIncludeRecognizedArgumentsEb"]
            pub fn SBVariablesOptions_SetIncludeRecognizedArguments(
                this: *mut root::lldb::SBVariablesOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBVariablesOptions16GetIncludeLocalsEv"]
            pub fn SBVariablesOptions_GetIncludeLocals(
                this: *const root::lldb::SBVariablesOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBVariablesOptions16SetIncludeLocalsEb"]
            pub fn SBVariablesOptions_SetIncludeLocals(
                this: *mut root::lldb::SBVariablesOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBVariablesOptions17GetIncludeStaticsEv"]
            pub fn SBVariablesOptions_GetIncludeStatics(
                this: *const root::lldb::SBVariablesOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBVariablesOptions17SetIncludeStaticsEb"]
            pub fn SBVariablesOptions_SetIncludeStatics(
                this: *mut root::lldb::SBVariablesOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBVariablesOptions14GetInScopeOnlyEv"]
            pub fn SBVariablesOptions_GetInScopeOnly(
                this: *const root::lldb::SBVariablesOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBVariablesOptions14SetInScopeOnlyEb"]
            pub fn SBVariablesOptions_SetInScopeOnly(
                this: *mut root::lldb::SBVariablesOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBVariablesOptions30GetIncludeRuntimeSupportValuesEv"]
            pub fn SBVariablesOptions_GetIncludeRuntimeSupportValues(
                this: *const root::lldb::SBVariablesOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBVariablesOptions30SetIncludeRuntimeSupportValuesEb"]
            pub fn SBVariablesOptions_SetIncludeRuntimeSupportValues(
                this: *mut root::lldb::SBVariablesOptions,
                arg1: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBVariablesOptions13GetUseDynamicEv"]
            pub fn SBVariablesOptions_GetUseDynamic(
                this: *const root::lldb::SBVariablesOptions,
            ) -> root::lldb::DynamicValueType;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBVariablesOptions13SetUseDynamicENS_16DynamicValueTypeE"]
            pub fn SBVariablesOptions_SetUseDynamic(
                this: *mut root::lldb::SBVariablesOptions,
                arg1: root::lldb::DynamicValueType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBVariablesOptions3getEv"]
            pub fn SBVariablesOptions_get(
                this: *mut root::lldb::SBVariablesOptions,
            ) -> *mut root::VariablesOptionsImpl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBVariablesOptions3refEv"]
            pub fn SBVariablesOptions_ref(
                this: *mut root::lldb::SBVariablesOptions,
            ) -> *mut root::VariablesOptionsImpl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK4lldb18SBVariablesOptions3refEv"]
            pub fn SBVariablesOptions_ref1(
                this: *const root::lldb::SBVariablesOptions,
            ) -> *const root::VariablesOptionsImpl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBVariablesOptions10SetOptionsEP20VariablesOptionsImpl"]
            pub fn SBVariablesOptions_SetOptions(
                this: *mut root::lldb::SBVariablesOptions,
                lldb_object_ptr: *mut root::VariablesOptionsImpl,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBVariablesOptionsC1Ev"]
            pub fn SBVariablesOptions_SBVariablesOptions(this: *mut root::lldb::SBVariablesOptions);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBVariablesOptionsC1ERKS0_"]
            pub fn SBVariablesOptions_SBVariablesOptions1(
                this: *mut root::lldb::SBVariablesOptions,
                options: *const root::lldb::SBVariablesOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBVariablesOptionsC1EP20VariablesOptionsImpl"]
            pub fn SBVariablesOptions_SBVariablesOptions2(
                this: *mut root::lldb::SBVariablesOptions,
                lldb_object_ptr: *mut root::VariablesOptionsImpl,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN4lldb18SBVariablesOptionsD1Ev"]
            pub fn SBVariablesOptions_SBVariablesOptions_destructor(
                this: *mut root::lldb::SBVariablesOptions,
            );
        }
        impl SBVariablesOptions {
            #[inline]
            pub unsafe fn IsValid(&self) -> bool {
                SBVariablesOptions_IsValid(self)
            }
            #[inline]
            pub unsafe fn GetIncludeArguments(&self) -> bool {
                SBVariablesOptions_GetIncludeArguments(self)
            }
            #[inline]
            pub unsafe fn SetIncludeArguments(&mut self, arg1: bool) {
                SBVariablesOptions_SetIncludeArguments(self, arg1)
            }
            #[inline]
            pub unsafe fn GetIncludeRecognizedArguments(
                &self,
                arg1: *const root::lldb::SBTarget,
            ) -> bool {
                SBVariablesOptions_GetIncludeRecognizedArguments(self, arg1)
            }
            #[inline]
            pub unsafe fn SetIncludeRecognizedArguments(&mut self, arg1: bool) {
                SBVariablesOptions_SetIncludeRecognizedArguments(self, arg1)
            }
            #[inline]
            pub unsafe fn GetIncludeLocals(&self) -> bool {
                SBVariablesOptions_GetIncludeLocals(self)
            }
            #[inline]
            pub unsafe fn SetIncludeLocals(&mut self, arg1: bool) {
                SBVariablesOptions_SetIncludeLocals(self, arg1)
            }
            #[inline]
            pub unsafe fn GetIncludeStatics(&self) -> bool {
                SBVariablesOptions_GetIncludeStatics(self)
            }
            #[inline]
            pub unsafe fn SetIncludeStatics(&mut self, arg1: bool) {
                SBVariablesOptions_SetIncludeStatics(self, arg1)
            }
            #[inline]
            pub unsafe fn GetInScopeOnly(&self) -> bool {
                SBVariablesOptions_GetInScopeOnly(self)
            }
            #[inline]
            pub unsafe fn SetInScopeOnly(&mut self, arg1: bool) {
                SBVariablesOptions_SetInScopeOnly(self, arg1)
            }
            #[inline]
            pub unsafe fn GetIncludeRuntimeSupportValues(&self) -> bool {
                SBVariablesOptions_GetIncludeRuntimeSupportValues(self)
            }
            #[inline]
            pub unsafe fn SetIncludeRuntimeSupportValues(&mut self, arg1: bool) {
                SBVariablesOptions_SetIncludeRuntimeSupportValues(self, arg1)
            }
            #[inline]
            pub unsafe fn GetUseDynamic(&self) -> root::lldb::DynamicValueType {
                SBVariablesOptions_GetUseDynamic(self)
            }
            #[inline]
            pub unsafe fn SetUseDynamic(&mut self, arg1: root::lldb::DynamicValueType) {
                SBVariablesOptions_SetUseDynamic(self, arg1)
            }
            #[inline]
            pub unsafe fn get(&mut self) -> *mut root::VariablesOptionsImpl {
                SBVariablesOptions_get(self)
            }
            #[inline]
            pub unsafe fn ref_(&mut self) -> *mut root::VariablesOptionsImpl {
                SBVariablesOptions_ref(self)
            }
            #[inline]
            pub unsafe fn ref1(&self) -> *const root::VariablesOptionsImpl {
                SBVariablesOptions_ref1(self)
            }
            #[inline]
            pub unsafe fn SetOptions(&mut self, lldb_object_ptr: *mut root::VariablesOptionsImpl) {
                SBVariablesOptions_SetOptions(self, lldb_object_ptr)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBVariablesOptions_SBVariablesOptions(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(options: *const root::lldb::SBVariablesOptions) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBVariablesOptions_SBVariablesOptions1(__bindgen_tmp.as_mut_ptr(), options);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(lldb_object_ptr: *mut root::VariablesOptionsImpl) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SBVariablesOptions_SBVariablesOptions2(__bindgen_tmp.as_mut_ptr(), lldb_object_ptr);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                SBVariablesOptions_SBVariablesOptions_destructor(self)
            }
        }
    }
    pub type FILE = [u64; 27usize];
    pub mod __pstl {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod execution {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
    }
    pub mod lldb_private {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Address {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct AddressRange {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Block {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BreakpointIDList {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BreakpointName {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Broadcaster {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CommandInterpreter {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CommandInterpreterRunOptions {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CommandReturnObject {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CompileUnit {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CompilerDecl {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CompilerType {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DataExtractor {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Debugger {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Declaration {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Environment {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct EvaluateExpressionOptions {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Event {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ExecutionContext {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ExecutionContextRef {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FileSpec {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FileSpecList {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Function {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Listener {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MemoryRegionInfo {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MemoryRegionInfos {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ModuleSpec {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ProcessAttachInfo {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ProcessLaunchInfo {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ProcessInstanceInfo {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct SaveCoreOptions {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Status {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Stream {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct StringList {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct StructuredDataImpl {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Symbol {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct SymbolContext {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Thread {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ThreadCollection {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ThreadPlan {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ThreadedCommunication {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TypeEnumMemberImpl {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TypeImpl {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TypeMemberFunctionImpl {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TypeMemberImpl {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TypeSummaryOptions {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct VariableList {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LineEntry {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct StatisticsOptions {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct AddressRangeListImpl {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ProcessInfoList {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ScriptObject {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CommandInterpreterRunResult {
            _unused: [u8; 0],
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ValueListImpl {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ValueLocker {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PlatformConnectOptions {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PlatformShellCommand {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct VariablesOptionsImpl {
        _unused: [u8; 0],
    }
}
